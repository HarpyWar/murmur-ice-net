// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Murmur_122.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace Murmur
{
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class User : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int session;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int userid;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool mute;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool deaf;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool suppress;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool selfMute;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool selfDeaf;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int channel;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string name;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int onlinesecs;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int bytespersec;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int version;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string release;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string os;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string osversion;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string identity;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string context;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string comment;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public byte[] address;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool tcponly;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int idlesecs;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public User()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public User(int session, int userid, bool mute, bool deaf, bool suppress, bool selfMute, bool selfDeaf, int channel, string name, int onlinesecs, int bytespersec, int version, string release, string os, string osversion, string identity, string context, string comment, byte[] address, bool tcponly, int idlesecs)
        {
            this.session = session;
            this.userid = userid;
            this.mute = mute;
            this.deaf = deaf;
            this.suppress = suppress;
            this.selfMute = selfMute;
            this.selfDeaf = selfDeaf;
            this.channel = channel;
            this.name = name;
            this.onlinesecs = onlinesecs;
            this.bytespersec = bytespersec;
            this.version = version;
            this.release = release;
            this.os = os;
            this.osversion = osversion;
            this.identity = identity;
            this.context = context;
            this.comment = comment;
            this.address = address;
            this.tcponly = tcponly;
            this.idlesecs = idlesecs;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            h__ = 5 * h__ + session.GetHashCode();
            h__ = 5 * h__ + userid.GetHashCode();
            h__ = 5 * h__ + mute.GetHashCode();
            h__ = 5 * h__ + deaf.GetHashCode();
            h__ = 5 * h__ + suppress.GetHashCode();
            h__ = 5 * h__ + selfMute.GetHashCode();
            h__ = 5 * h__ + selfDeaf.GetHashCode();
            h__ = 5 * h__ + channel.GetHashCode();
            if(name != null)
            {
                h__ = 5 * h__ + name.GetHashCode();
            }
            h__ = 5 * h__ + onlinesecs.GetHashCode();
            h__ = 5 * h__ + bytespersec.GetHashCode();
            h__ = 5 * h__ + version.GetHashCode();
            if(release != null)
            {
                h__ = 5 * h__ + release.GetHashCode();
            }
            if(os != null)
            {
                h__ = 5 * h__ + os.GetHashCode();
            }
            if(osversion != null)
            {
                h__ = 5 * h__ + osversion.GetHashCode();
            }
            if(identity != null)
            {
                h__ = 5 * h__ + identity.GetHashCode();
            }
            if(context != null)
            {
                h__ = 5 * h__ + context.GetHashCode();
            }
            if(comment != null)
            {
                h__ = 5 * h__ + comment.GetHashCode();
            }
            if(address != null)
            {
                h__ = 5 * h__ + IceUtilInternal.Arrays.GetHashCode(address);
            }
            h__ = 5 * h__ + tcponly.GetHashCode();
            h__ = 5 * h__ + idlesecs.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            User o__ = (User)other__;
            if(!session.Equals(o__.session))
            {
                return false;
            }
            if(!userid.Equals(o__.userid))
            {
                return false;
            }
            if(!mute.Equals(o__.mute))
            {
                return false;
            }
            if(!deaf.Equals(o__.deaf))
            {
                return false;
            }
            if(!suppress.Equals(o__.suppress))
            {
                return false;
            }
            if(!selfMute.Equals(o__.selfMute))
            {
                return false;
            }
            if(!selfDeaf.Equals(o__.selfDeaf))
            {
                return false;
            }
            if(!channel.Equals(o__.channel))
            {
                return false;
            }
            if(name == null)
            {
                if(o__.name != null)
                {
                    return false;
                }
            }
            else
            {
                if(!name.Equals(o__.name))
                {
                    return false;
                }
            }
            if(!onlinesecs.Equals(o__.onlinesecs))
            {
                return false;
            }
            if(!bytespersec.Equals(o__.bytespersec))
            {
                return false;
            }
            if(!version.Equals(o__.version))
            {
                return false;
            }
            if(release == null)
            {
                if(o__.release != null)
                {
                    return false;
                }
            }
            else
            {
                if(!release.Equals(o__.release))
                {
                    return false;
                }
            }
            if(os == null)
            {
                if(o__.os != null)
                {
                    return false;
                }
            }
            else
            {
                if(!os.Equals(o__.os))
                {
                    return false;
                }
            }
            if(osversion == null)
            {
                if(o__.osversion != null)
                {
                    return false;
                }
            }
            else
            {
                if(!osversion.Equals(o__.osversion))
                {
                    return false;
                }
            }
            if(identity == null)
            {
                if(o__.identity != null)
                {
                    return false;
                }
            }
            else
            {
                if(!identity.Equals(o__.identity))
                {
                    return false;
                }
            }
            if(context == null)
            {
                if(o__.context != null)
                {
                    return false;
                }
            }
            else
            {
                if(!context.Equals(o__.context))
                {
                    return false;
                }
            }
            if(comment == null)
            {
                if(o__.comment != null)
                {
                    return false;
                }
            }
            else
            {
                if(!comment.Equals(o__.comment))
                {
                    return false;
                }
            }
            if(address == null)
            {
                if(o__.address != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(address, o__.address))
                {
                    return false;
                }
            }
            if(!tcponly.Equals(o__.tcponly))
            {
                return false;
            }
            if(!idlesecs.Equals(o__.idlesecs))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(User lhs__, User rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(User lhs__, User rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(session);
            os__.writeInt(userid);
            os__.writeBool(mute);
            os__.writeBool(deaf);
            os__.writeBool(suppress);
            os__.writeBool(selfMute);
            os__.writeBool(selfDeaf);
            os__.writeInt(channel);
            os__.writeString(name);
            os__.writeInt(onlinesecs);
            os__.writeInt(bytespersec);
            os__.writeInt(version);
            os__.writeString(release);
            os__.writeString(os);
            os__.writeString(osversion);
            os__.writeString(identity);
            os__.writeString(context);
            os__.writeString(comment);
            os__.writeByteSeq(address);
            os__.writeBool(tcponly);
            os__.writeInt(idlesecs);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            session = is__.readInt();
            userid = is__.readInt();
            mute = is__.readBool();
            deaf = is__.readBool();
            suppress = is__.readBool();
            selfMute = is__.readBool();
            selfDeaf = is__.readBool();
            channel = is__.readInt();
            name = is__.readString();
            onlinesecs = is__.readInt();
            bytespersec = is__.readInt();
            version = is__.readInt();
            release = is__.readString();
            os = is__.readString();
            osversion = is__.readString();
            identity = is__.readString();
            context = is__.readString();
            comment = is__.readString();
            address = is__.readByteSeq();
            tcponly = is__.readBool();
            idlesecs = is__.readInt();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Channel : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int id;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string name;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int parent;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int[] links;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string description;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool temporary;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int position;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Channel()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Channel(int id, string name, int parent, int[] links, string description, bool temporary, int position)
        {
            this.id = id;
            this.name = name;
            this.parent = parent;
            this.links = links;
            this.description = description;
            this.temporary = temporary;
            this.position = position;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            h__ = 5 * h__ + id.GetHashCode();
            if(name != null)
            {
                h__ = 5 * h__ + name.GetHashCode();
            }
            h__ = 5 * h__ + parent.GetHashCode();
            if(links != null)
            {
                h__ = 5 * h__ + IceUtilInternal.Arrays.GetHashCode(links);
            }
            if(description != null)
            {
                h__ = 5 * h__ + description.GetHashCode();
            }
            h__ = 5 * h__ + temporary.GetHashCode();
            h__ = 5 * h__ + position.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            Channel o__ = (Channel)other__;
            if(!id.Equals(o__.id))
            {
                return false;
            }
            if(name == null)
            {
                if(o__.name != null)
                {
                    return false;
                }
            }
            else
            {
                if(!name.Equals(o__.name))
                {
                    return false;
                }
            }
            if(!parent.Equals(o__.parent))
            {
                return false;
            }
            if(links == null)
            {
                if(o__.links != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(links, o__.links))
                {
                    return false;
                }
            }
            if(description == null)
            {
                if(o__.description != null)
                {
                    return false;
                }
            }
            else
            {
                if(!description.Equals(o__.description))
                {
                    return false;
                }
            }
            if(!temporary.Equals(o__.temporary))
            {
                return false;
            }
            if(!position.Equals(o__.position))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(Channel lhs__, Channel rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(Channel lhs__, Channel rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(id);
            os__.writeString(name);
            os__.writeInt(parent);
            os__.writeIntSeq(links);
            os__.writeString(description);
            os__.writeBool(temporary);
            os__.writeInt(position);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            id = is__.readInt();
            name = is__.readString();
            parent = is__.readInt();
            links = is__.readIntSeq();
            description = is__.readString();
            temporary = is__.readBool();
            position = is__.readInt();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Group : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string name;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool inherited;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool inherit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool inheritable;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int[] add;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int[] remove;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int[] members;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Group()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Group(string name, bool inherited, bool inherit, bool inheritable, int[] add, int[] remove, int[] members)
        {
            this.name = name;
            this.inherited = inherited;
            this.inherit = inherit;
            this.inheritable = inheritable;
            this.add = add;
            this.remove = remove;
            this.members = members;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if(name != null)
            {
                h__ = 5 * h__ + name.GetHashCode();
            }
            h__ = 5 * h__ + inherited.GetHashCode();
            h__ = 5 * h__ + inherit.GetHashCode();
            h__ = 5 * h__ + inheritable.GetHashCode();
            if(add != null)
            {
                h__ = 5 * h__ + IceUtilInternal.Arrays.GetHashCode(add);
            }
            if(remove != null)
            {
                h__ = 5 * h__ + IceUtilInternal.Arrays.GetHashCode(remove);
            }
            if(members != null)
            {
                h__ = 5 * h__ + IceUtilInternal.Arrays.GetHashCode(members);
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            Group o__ = (Group)other__;
            if(name == null)
            {
                if(o__.name != null)
                {
                    return false;
                }
            }
            else
            {
                if(!name.Equals(o__.name))
                {
                    return false;
                }
            }
            if(!inherited.Equals(o__.inherited))
            {
                return false;
            }
            if(!inherit.Equals(o__.inherit))
            {
                return false;
            }
            if(!inheritable.Equals(o__.inheritable))
            {
                return false;
            }
            if(add == null)
            {
                if(o__.add != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(add, o__.add))
                {
                    return false;
                }
            }
            if(remove == null)
            {
                if(o__.remove != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(remove, o__.remove))
                {
                    return false;
                }
            }
            if(members == null)
            {
                if(o__.members != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(members, o__.members))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(Group lhs__, Group rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(Group lhs__, Group rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(name);
            os__.writeBool(inherited);
            os__.writeBool(inherit);
            os__.writeBool(inheritable);
            os__.writeIntSeq(add);
            os__.writeIntSeq(remove);
            os__.writeIntSeq(members);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            name = is__.readString();
            inherited = is__.readBool();
            inherit = is__.readBool();
            inheritable = is__.readBool();
            add = is__.readIntSeq();
            remove = is__.readIntSeq();
            members = is__.readIntSeq();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionWrite
    {
        public const int value = 1;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionTraverse
    {
        public const int value = 2;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionEnter
    {
        public const int value = 4;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionSpeak
    {
        public const int value = 8;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionWhisper
    {
        public const int value = 256;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionMuteDeafen
    {
        public const int value = 16;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionMove
    {
        public const int value = 32;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionMakeChannel
    {
        public const int value = 64;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionMakeTempChannel
    {
        public const int value = 1024;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionLinkChannel
    {
        public const int value = 128;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionTextMessage
    {
        public const int value = 512;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionKick
    {
        public const int value = 65536;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionBan
    {
        public const int value = 131072;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionRegister
    {
        public const int value = 262144;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PermissionRegisterSelf
    {
        public const int value = 524288;
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ACL : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool applyHere;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool applySubs;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool inherited;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int userid;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string group;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int allow;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int deny;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public ACL()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public ACL(bool applyHere, bool applySubs, bool inherited, int userid, string group, int allow, int deny)
        {
            this.applyHere = applyHere;
            this.applySubs = applySubs;
            this.inherited = inherited;
            this.userid = userid;
            this.group = group;
            this.allow = allow;
            this.deny = deny;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            h__ = 5 * h__ + applyHere.GetHashCode();
            h__ = 5 * h__ + applySubs.GetHashCode();
            h__ = 5 * h__ + inherited.GetHashCode();
            h__ = 5 * h__ + userid.GetHashCode();
            if(group != null)
            {
                h__ = 5 * h__ + group.GetHashCode();
            }
            h__ = 5 * h__ + allow.GetHashCode();
            h__ = 5 * h__ + deny.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            ACL o__ = (ACL)other__;
            if(!applyHere.Equals(o__.applyHere))
            {
                return false;
            }
            if(!applySubs.Equals(o__.applySubs))
            {
                return false;
            }
            if(!inherited.Equals(o__.inherited))
            {
                return false;
            }
            if(!userid.Equals(o__.userid))
            {
                return false;
            }
            if(group == null)
            {
                if(o__.group != null)
                {
                    return false;
                }
            }
            else
            {
                if(!group.Equals(o__.group))
                {
                    return false;
                }
            }
            if(!allow.Equals(o__.allow))
            {
                return false;
            }
            if(!deny.Equals(o__.deny))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(ACL lhs__, ACL rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(ACL lhs__, ACL rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeBool(applyHere);
            os__.writeBool(applySubs);
            os__.writeBool(inherited);
            os__.writeInt(userid);
            os__.writeString(group);
            os__.writeInt(allow);
            os__.writeInt(deny);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            applyHere = is__.readBool();
            applySubs = is__.readBool();
            inherited = is__.readBool();
            userid = is__.readInt();
            group = is__.readString();
            allow = is__.readInt();
            deny = is__.readInt();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Ban : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public byte[] address;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int bits;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string name;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string hash;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string reason;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public long start;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int duration;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Ban()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Ban(byte[] address, int bits, string name, string hash, string reason, long start, int duration)
        {
            this.address = address;
            this.bits = bits;
            this.name = name;
            this.hash = hash;
            this.reason = reason;
            this.start = start;
            this.duration = duration;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if(address != null)
            {
                h__ = 5 * h__ + IceUtilInternal.Arrays.GetHashCode(address);
            }
            h__ = 5 * h__ + bits.GetHashCode();
            if(name != null)
            {
                h__ = 5 * h__ + name.GetHashCode();
            }
            if(hash != null)
            {
                h__ = 5 * h__ + hash.GetHashCode();
            }
            if(reason != null)
            {
                h__ = 5 * h__ + reason.GetHashCode();
            }
            h__ = 5 * h__ + start.GetHashCode();
            h__ = 5 * h__ + duration.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            Ban o__ = (Ban)other__;
            if(address == null)
            {
                if(o__.address != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(address, o__.address))
                {
                    return false;
                }
            }
            if(!bits.Equals(o__.bits))
            {
                return false;
            }
            if(name == null)
            {
                if(o__.name != null)
                {
                    return false;
                }
            }
            else
            {
                if(!name.Equals(o__.name))
                {
                    return false;
                }
            }
            if(hash == null)
            {
                if(o__.hash != null)
                {
                    return false;
                }
            }
            else
            {
                if(!hash.Equals(o__.hash))
                {
                    return false;
                }
            }
            if(reason == null)
            {
                if(o__.reason != null)
                {
                    return false;
                }
            }
            else
            {
                if(!reason.Equals(o__.reason))
                {
                    return false;
                }
            }
            if(!start.Equals(o__.start))
            {
                return false;
            }
            if(!duration.Equals(o__.duration))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(Ban lhs__, Ban rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(Ban lhs__, Ban rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeByteSeq(address);
            os__.writeInt(bits);
            os__.writeString(name);
            os__.writeString(hash);
            os__.writeString(reason);
            os__.writeLong(start);
            os__.writeInt(duration);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            address = is__.readByteSeq();
            bits = is__.readInt();
            name = is__.readString();
            hash = is__.readString();
            reason = is__.readString();
            start = is__.readLong();
            duration = is__.readInt();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class LogEntry : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int timestamp;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string txt;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public LogEntry()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public LogEntry(int timestamp, string txt)
        {
            this.timestamp = timestamp;
            this.txt = txt;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            h__ = 5 * h__ + timestamp.GetHashCode();
            if(txt != null)
            {
                h__ = 5 * h__ + txt.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            LogEntry o__ = (LogEntry)other__;
            if(!timestamp.Equals(o__.timestamp))
            {
                return false;
            }
            if(txt == null)
            {
                if(o__.txt != null)
                {
                    return false;
                }
            }
            else
            {
                if(!txt.Equals(o__.txt))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(LogEntry lhs__, LogEntry rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(LogEntry lhs__, LogEntry rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(timestamp);
            os__.writeString(txt);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            timestamp = is__.readInt();
            txt = is__.readString();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public enum ChannelInfo
    {
        ChannelDescription,
        ChannelPosition
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public enum UserInfo
    {
        UserName,
        UserEmail,
        UserComment,
        UserHash,
        UserPassword
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Tree : Ice.ObjectImpl
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Murmur.Channel c;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Murmur.Tree[] children;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Murmur.User[] users;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Tree()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Tree(Murmur.Channel c, Murmur.Tree[] children, Murmur.User[] users)
        {
            this.c = c;
            this.children = children;
            this.users = users;
        }

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Murmur::Tree"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_id()
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            if(c == null)
            {
                Murmur.Channel tmp__ = new Murmur.Channel();
                tmp__.write__(os__);
            }
            else
            {
                c.write__(os__);
            }
            if(children == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(children.Length);
                for(int ix__ = 0; ix__ < children.Length; ++ix__)
                {
                    os__.writeObject(children[ix__]);
                }
            }
            if(users == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(users.Length);
                for(int ix__ = 0; ix__ < users.Length; ++ix__)
                {
                    (users[ix__] == null ? new Murmur.User() : users[ix__]).write__(os__);
                }
            }
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            if(c == null)
            {
                c = new Murmur.Channel();
            }
            c.read__(is__);
            {
                int szx__ = is__.readAndCheckSeqSize(4);
                children = new Murmur.Tree[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    IceInternal.ArrayPatcher<Murmur.Tree> spx = new IceInternal.ArrayPatcher<Murmur.Tree>("::Murmur::Tree", children, ix__);
                    is__.readObject(spx);
                }
            }
            {
                int szx__ = is__.readAndCheckSeqSize(42);
                users = new Murmur.User[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    users[ix__] = new Murmur.User();
                    users[ix__].read__(is__);
                }
            }
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::Tree was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::Tree was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class MurmurException : Ice.UserException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public MurmurException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public MurmurException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::MurmurException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            MurmurException o__ = other__ as MurmurException;
            if(o__ == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(MurmurException lhs__, MurmurException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(MurmurException lhs__, MurmurException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::MurmurException");
            os__.startWriteSlice();
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::MurmurException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::MurmurException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    /// <summary>
    /// This is thrown when you specify an invalid session.
    /// This may happen if the user has disconnected since your last call to [Server::getUsers]. See [User::session]
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidSessionException : Murmur.MurmurException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidSessionException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidSessionException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::InvalidSessionException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            InvalidSessionException o__ = other__ as InvalidSessionException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(InvalidSessionException lhs__, InvalidSessionException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(InvalidSessionException lhs__, InvalidSessionException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::InvalidSessionException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidSessionException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidSessionException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    /// <summary>
    /// This is thrown when you specify an invalid channel id.
    /// This may happen if the channel was removed by another provess. It can also be thrown if you try to add an invalid channel.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidChannelException : Murmur.MurmurException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidChannelException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidChannelException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::InvalidChannelException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            InvalidChannelException o__ = other__ as InvalidChannelException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(InvalidChannelException lhs__, InvalidChannelException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(InvalidChannelException lhs__, InvalidChannelException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::InvalidChannelException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidChannelException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidChannelException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    /// <summary>
    /// This is thrown when you try to do an operation on a server that does not exist.
    /// This may happen if someone has removed the server.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidServerException : Murmur.MurmurException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidServerException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidServerException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::InvalidServerException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            InvalidServerException o__ = other__ as InvalidServerException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(InvalidServerException lhs__, InvalidServerException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(InvalidServerException lhs__, InvalidServerException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::InvalidServerException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidServerException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidServerException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    /// <summary>
    /// This happens if you try to fetch user or channel state on a stopped server, if you try to stop an already stopped server or start an already started server.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ServerBootedException : Murmur.MurmurException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public ServerBootedException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public ServerBootedException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::ServerBootedException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            ServerBootedException o__ = other__ as ServerBootedException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(ServerBootedException lhs__, ServerBootedException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(ServerBootedException lhs__, ServerBootedException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::ServerBootedException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::ServerBootedException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::ServerBootedException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    /// <summary>
    /// This is thrown if [Server::start] fails, and should generally be the cause for some concern.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ServerFailureException : Murmur.MurmurException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public ServerFailureException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public ServerFailureException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::ServerFailureException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            ServerFailureException o__ = other__ as ServerFailureException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(ServerFailureException lhs__, ServerFailureException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(ServerFailureException lhs__, ServerFailureException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::ServerFailureException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::ServerFailureException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::ServerFailureException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    /// <summary>
    /// This is thrown when you specify an invalid userid.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidUserException : Murmur.MurmurException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidUserException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidUserException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::InvalidUserException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            InvalidUserException o__ = other__ as InvalidUserException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(InvalidUserException lhs__, InvalidUserException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(InvalidUserException lhs__, InvalidUserException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::InvalidUserException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidUserException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidUserException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    /// <summary>
    /// This is thrown when you try to set an invalid texture.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidTextureException : Murmur.MurmurException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidTextureException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidTextureException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::InvalidTextureException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            InvalidTextureException o__ = other__ as InvalidTextureException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(InvalidTextureException lhs__, InvalidTextureException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(InvalidTextureException lhs__, InvalidTextureException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::InvalidTextureException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidTextureException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidTextureException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    /// <summary>
    /// This is thrown when you supply an invalid callback.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidCallbackException : Murmur.MurmurException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidCallbackException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidCallbackException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::InvalidCallbackException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            InvalidCallbackException o__ = other__ as InvalidCallbackException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(InvalidCallbackException lhs__, InvalidCallbackException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(InvalidCallbackException lhs__, InvalidCallbackException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::InvalidCallbackException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidCallbackException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidCallbackException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    /// <summary>
    /// This is thrown when you supply the wrong secret in the calling context.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidSecretException : Murmur.MurmurException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidSecretException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidSecretException(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "Murmur::InvalidSecretException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            InvalidSecretException o__ = other__ as InvalidSecretException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(InvalidSecretException lhs__, InvalidSecretException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(InvalidSecretException lhs__, InvalidSecretException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Murmur::InvalidSecretException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidSecretException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Murmur::InvalidSecretException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ServerCallback : Ice.Object, ServerCallbackOperations_, ServerCallbackOperationsNC_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ContextServer
    {
        public const int value = 1;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ContextChannel
    {
        public const int value = 2;
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ContextUser
    {
        public const int value = 4;
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ServerContextCallback : Ice.Object, ServerContextCallbackOperations_, ServerContextCallbackOperationsNC_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ServerAuthenticator : Ice.Object, ServerAuthenticatorOperations_, ServerAuthenticatorOperationsNC_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ServerUpdatingAuthenticator : Ice.Object, ServerUpdatingAuthenticatorOperations_, ServerUpdatingAuthenticatorOperationsNC_, Murmur.ServerAuthenticator
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Server : Ice.Object, ServerOperations_, ServerOperationsNC_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface MetaCallback : Ice.Object, MetaCallbackOperations_, MetaCallbackOperationsNC_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Meta : Ice.Object, MetaOperations_, MetaOperationsNC_
    {
    }
}

namespace Murmur
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerCallback_userConnected();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerCallback_userDisconnected();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerCallback_userStateChanged();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerCallback_channelCreated();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerCallback_channelRemoved();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerCallback_channelStateChanged();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerContextCallback_contextAction();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerAuthenticator_authenticate(int ret__, string newname, string[] groups);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerAuthenticator_getInfo(bool ret__, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerAuthenticator_nameToId(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerAuthenticator_idToName(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerAuthenticator_idToTexture(byte[] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerUpdatingAuthenticator_registerUser(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerUpdatingAuthenticator_unregisterUser(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerUpdatingAuthenticator_getRegisteredUsers(_System.Collections.Generic.Dictionary<int, string> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerUpdatingAuthenticator_setInfo(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ServerUpdatingAuthenticator_setTexture(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_isRunning(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_start();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_stop();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_delete();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_id(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_addCallback();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_removeCallback();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_setAuthenticator();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getConf(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getAllConf(_System.Collections.Generic.Dictionary<string, string> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_setConf();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_setSuperuserPassword();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getLog(Murmur.LogEntry[] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getUsers(_System.Collections.Generic.Dictionary<int, Murmur.User> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getChannels(_System.Collections.Generic.Dictionary<int, Murmur.Channel> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getCertificateList(byte[][] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getTree(Murmur.Tree ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getBans(Murmur.Ban[] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_setBans();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_kickUser();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getState(Murmur.User ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_setState();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_sendMessage();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_hasPermission(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_addContextCallback();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_removeContextCallback();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getChannelState(Murmur.Channel ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_setChannelState();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_removeChannel();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_addChannel(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_sendMessageChannel();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getACL(Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_setACL();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_addUserToGroup();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_removeUserFromGroup();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_redirectWhisperGroup();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getUserNames(_System.Collections.Generic.Dictionary<int, string> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getUserIds(_System.Collections.Generic.Dictionary<string, int> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_registerUser(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_unregisterUser();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_updateRegistration();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getRegistration(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getRegisteredUsers(_System.Collections.Generic.Dictionary<int, string> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_verifyPassword(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getTexture(byte[] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_setTexture();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_getUptime(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_MetaCallback_started();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_MetaCallback_stopped();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Meta_getServer(Murmur.ServerPrx ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Meta_newServer(Murmur.ServerPrx ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Meta_getBootedServers(Murmur.ServerPrx[] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Meta_getAllServers(Murmur.ServerPrx[] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Meta_getDefaultConf(_System.Collections.Generic.Dictionary<string, string> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Meta_getVersion(int major, int minor, int patch, string text);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Meta_addCallback();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Meta_removeCallback();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Meta_getUptime(int ret__);
}

namespace Murmur
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface TreePrx : Ice.ObjectPrx
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerCallbackPrx : Ice.ObjectPrx
    {
        void userConnected(Murmur.User state);
        void userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerCallback_userConnected> begin_userConnected(Murmur.User state);
        Ice.AsyncResult<Murmur.Callback_ServerCallback_userConnected> begin_userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_userConnected(Murmur.User state, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_userConnected(Ice.AsyncResult r__);

        void userDisconnected(Murmur.User state);
        void userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerCallback_userDisconnected> begin_userDisconnected(Murmur.User state);
        Ice.AsyncResult<Murmur.Callback_ServerCallback_userDisconnected> begin_userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_userDisconnected(Murmur.User state, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_userDisconnected(Ice.AsyncResult r__);

        void userStateChanged(Murmur.User state);
        void userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerCallback_userStateChanged> begin_userStateChanged(Murmur.User state);
        Ice.AsyncResult<Murmur.Callback_ServerCallback_userStateChanged> begin_userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_userStateChanged(Murmur.User state, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_userStateChanged(Ice.AsyncResult r__);

        void channelCreated(Murmur.Channel state);
        void channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerCallback_channelCreated> begin_channelCreated(Murmur.Channel state);
        Ice.AsyncResult<Murmur.Callback_ServerCallback_channelCreated> begin_channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_channelCreated(Murmur.Channel state, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_channelCreated(Ice.AsyncResult r__);

        void channelRemoved(Murmur.Channel state);
        void channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerCallback_channelRemoved> begin_channelRemoved(Murmur.Channel state);
        Ice.AsyncResult<Murmur.Callback_ServerCallback_channelRemoved> begin_channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_channelRemoved(Murmur.Channel state, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_channelRemoved(Ice.AsyncResult r__);

        void channelStateChanged(Murmur.Channel state);
        void channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerCallback_channelStateChanged> begin_channelStateChanged(Murmur.Channel state);
        Ice.AsyncResult<Murmur.Callback_ServerCallback_channelStateChanged> begin_channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_channelStateChanged(Murmur.Channel state, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_channelStateChanged(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerContextCallbackPrx : Ice.ObjectPrx
    {
        void contextAction(string action, Murmur.User usr, int session, int channelid);
        void contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerContextCallback_contextAction> begin_contextAction(string action, Murmur.User usr, int session, int channelid);
        Ice.AsyncResult<Murmur.Callback_ServerContextCallback_contextAction> begin_contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_contextAction(string action, Murmur.User usr, int session, int channelid, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_contextAction(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerAuthenticatorPrx : Ice.ObjectPrx
    {
        int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups);
        int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_authenticate> begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong);
        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_authenticate> begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_authenticate(out string newname, out string[] groups, Ice.AsyncResult r__);

        bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);
        bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_getInfo> begin_getInfo(int id);
        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_getInfo> begin_getInfo(int id, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getInfo(int id, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getInfo(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_getInfo(out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncResult r__);

        int nameToId(string name);
        int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_nameToId> begin_nameToId(string name);
        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_nameToId> begin_nameToId(string name, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_nameToId(string name, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_nameToId(string name, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_nameToId(Ice.AsyncResult r__);

        string idToName(int id);
        string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToName> begin_idToName(int id);
        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToName> begin_idToName(int id, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_idToName(int id, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_idToName(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_idToName(Ice.AsyncResult r__);

        byte[] idToTexture(int id);
        byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToTexture> begin_idToTexture(int id);
        Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToTexture> begin_idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_idToTexture(int id, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        byte[] end_idToTexture(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerUpdatingAuthenticatorPrx : Murmur.ServerAuthenticatorPrx
    {
        int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);
        int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);
        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_registerUser(Ice.AsyncResult r__);

        int unregisterUser(int id);
        int unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_unregisterUser> begin_unregisterUser(int id);
        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_unregisterUser> begin_unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_unregisterUser(int id, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_unregisterUser(Ice.AsyncResult r__);

        _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter);
        _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_getRegisteredUsers> begin_getRegisteredUsers(string filter);
        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_getRegisteredUsers> begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getRegisteredUsers(string filter, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.Dictionary<int, string> end_getRegisteredUsers(Ice.AsyncResult r__);

        int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);
        int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setInfo> begin_setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);
        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setInfo> begin_setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_setInfo(Ice.AsyncResult r__);

        int setTexture(int id, byte[] tex);
        int setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setTexture> begin_setTexture(int id, byte[] tex);
        Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setTexture> begin_setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setTexture(int id, byte[] tex, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_setTexture(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerPrx : Ice.ObjectPrx
    {
        bool isRunning();
        bool isRunning(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_isRunning> begin_isRunning();
        Ice.AsyncResult<Murmur.Callback_Server_isRunning> begin_isRunning(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_isRunning(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_isRunning(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_isRunning(Ice.AsyncResult r__);

        void start();
        void start(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_start> begin_start();
        Ice.AsyncResult<Murmur.Callback_Server_start> begin_start(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_start(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_start(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_start(Ice.AsyncResult r__);

        void stop();
        void stop(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_stop> begin_stop();
        Ice.AsyncResult<Murmur.Callback_Server_stop> begin_stop(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_stop(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_stop(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_stop(Ice.AsyncResult r__);

        void delete();
        void delete(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_delete> begin_delete();
        Ice.AsyncResult<Murmur.Callback_Server_delete> begin_delete(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_delete(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_delete(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_delete(Ice.AsyncResult r__);

        int id();
        int id(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_id> begin_id();
        Ice.AsyncResult<Murmur.Callback_Server_id> begin_id(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_id(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_id(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_id(Ice.AsyncResult r__);

        void addCallback(Murmur.ServerCallbackPrx cb);
        void addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_addCallback> begin_addCallback(Murmur.ServerCallbackPrx cb);
        Ice.AsyncResult<Murmur.Callback_Server_addCallback> begin_addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_addCallback(Murmur.ServerCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_addCallback(Ice.AsyncResult r__);

        void removeCallback(Murmur.ServerCallbackPrx cb);
        void removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_removeCallback> begin_removeCallback(Murmur.ServerCallbackPrx cb);
        Ice.AsyncResult<Murmur.Callback_Server_removeCallback> begin_removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_removeCallback(Murmur.ServerCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_removeCallback(Ice.AsyncResult r__);

        void setAuthenticator(Murmur.ServerAuthenticatorPrx auth);
        void setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_setAuthenticator> begin_setAuthenticator(Murmur.ServerAuthenticatorPrx auth);
        Ice.AsyncResult<Murmur.Callback_Server_setAuthenticator> begin_setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setAuthenticator(Murmur.ServerAuthenticatorPrx auth, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setAuthenticator(Ice.AsyncResult r__);

        string getConf(string key);
        string getConf(string key, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getConf> begin_getConf(string key);
        Ice.AsyncResult<Murmur.Callback_Server_getConf> begin_getConf(string key, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getConf(string key, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getConf(string key, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_getConf(Ice.AsyncResult r__);

        _System.Collections.Generic.Dictionary<string, string> getAllConf();
        _System.Collections.Generic.Dictionary<string, string> getAllConf(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getAllConf> begin_getAllConf();
        Ice.AsyncResult<Murmur.Callback_Server_getAllConf> begin_getAllConf(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getAllConf(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getAllConf(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.Dictionary<string, string> end_getAllConf(Ice.AsyncResult r__);

        void setConf(string key, string value);
        void setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_setConf> begin_setConf(string key, string value);
        Ice.AsyncResult<Murmur.Callback_Server_setConf> begin_setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setConf(string key, string value, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setConf(Ice.AsyncResult r__);

        void setSuperuserPassword(string pw);
        void setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_setSuperuserPassword> begin_setSuperuserPassword(string pw);
        Ice.AsyncResult<Murmur.Callback_Server_setSuperuserPassword> begin_setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setSuperuserPassword(string pw, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setSuperuserPassword(Ice.AsyncResult r__);

        Murmur.LogEntry[] getLog(int first, int last);
        Murmur.LogEntry[] getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getLog> begin_getLog(int first, int last);
        Ice.AsyncResult<Murmur.Callback_Server_getLog> begin_getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getLog(int first, int last, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Murmur.LogEntry[] end_getLog(Ice.AsyncResult r__);

        _System.Collections.Generic.Dictionary<int, Murmur.User> getUsers();
        _System.Collections.Generic.Dictionary<int, Murmur.User> getUsers(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getUsers> begin_getUsers();
        Ice.AsyncResult<Murmur.Callback_Server_getUsers> begin_getUsers(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getUsers(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getUsers(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.Dictionary<int, Murmur.User> end_getUsers(Ice.AsyncResult r__);

        _System.Collections.Generic.Dictionary<int, Murmur.Channel> getChannels();
        _System.Collections.Generic.Dictionary<int, Murmur.Channel> getChannels(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getChannels> begin_getChannels();
        Ice.AsyncResult<Murmur.Callback_Server_getChannels> begin_getChannels(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getChannels(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getChannels(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.Dictionary<int, Murmur.Channel> end_getChannels(Ice.AsyncResult r__);

        byte[][] getCertificateList(int session);
        byte[][] getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getCertificateList> begin_getCertificateList(int session);
        Ice.AsyncResult<Murmur.Callback_Server_getCertificateList> begin_getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getCertificateList(int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        byte[][] end_getCertificateList(Ice.AsyncResult r__);

        Murmur.Tree getTree();
        Murmur.Tree getTree(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getTree> begin_getTree();
        Ice.AsyncResult<Murmur.Callback_Server_getTree> begin_getTree(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getTree(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getTree(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Murmur.Tree end_getTree(Ice.AsyncResult r__);

        Murmur.Ban[] getBans();
        Murmur.Ban[] getBans(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getBans> begin_getBans();
        Ice.AsyncResult<Murmur.Callback_Server_getBans> begin_getBans(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getBans(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getBans(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Murmur.Ban[] end_getBans(Ice.AsyncResult r__);

        void setBans(Murmur.Ban[] bans);
        void setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_setBans> begin_setBans(Murmur.Ban[] bans);
        Ice.AsyncResult<Murmur.Callback_Server_setBans> begin_setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setBans(Murmur.Ban[] bans, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setBans(Ice.AsyncResult r__);

        void kickUser(int session, string reason);
        void kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_kickUser> begin_kickUser(int session, string reason);
        Ice.AsyncResult<Murmur.Callback_Server_kickUser> begin_kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_kickUser(int session, string reason, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_kickUser(Ice.AsyncResult r__);

        Murmur.User getState(int session);
        Murmur.User getState(int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getState> begin_getState(int session);
        Ice.AsyncResult<Murmur.Callback_Server_getState> begin_getState(int session, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getState(int session, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getState(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Murmur.User end_getState(Ice.AsyncResult r__);

        void setState(Murmur.User state);
        void setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_setState> begin_setState(Murmur.User state);
        Ice.AsyncResult<Murmur.Callback_Server_setState> begin_setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setState(Murmur.User state, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setState(Ice.AsyncResult r__);

        void sendMessage(int session, string text);
        void sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_sendMessage> begin_sendMessage(int session, string text);
        Ice.AsyncResult<Murmur.Callback_Server_sendMessage> begin_sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_sendMessage(int session, string text, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_sendMessage(Ice.AsyncResult r__);

        bool hasPermission(int session, int channelid, int perm);
        bool hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_hasPermission> begin_hasPermission(int session, int channelid, int perm);
        Ice.AsyncResult<Murmur.Callback_Server_hasPermission> begin_hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_hasPermission(Ice.AsyncResult r__);

        void addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx);
        void addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_addContextCallback> begin_addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx);
        Ice.AsyncResult<Murmur.Callback_Server_addContextCallback> begin_addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_addContextCallback(Ice.AsyncResult r__);

        void removeContextCallback(Murmur.ServerContextCallbackPrx cb);
        void removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_removeContextCallback> begin_removeContextCallback(Murmur.ServerContextCallbackPrx cb);
        Ice.AsyncResult<Murmur.Callback_Server_removeContextCallback> begin_removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_removeContextCallback(Murmur.ServerContextCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_removeContextCallback(Ice.AsyncResult r__);

        Murmur.Channel getChannelState(int channelid);
        Murmur.Channel getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getChannelState> begin_getChannelState(int channelid);
        Ice.AsyncResult<Murmur.Callback_Server_getChannelState> begin_getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getChannelState(int channelid, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Murmur.Channel end_getChannelState(Ice.AsyncResult r__);

        void setChannelState(Murmur.Channel state);
        void setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_setChannelState> begin_setChannelState(Murmur.Channel state);
        Ice.AsyncResult<Murmur.Callback_Server_setChannelState> begin_setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setChannelState(Murmur.Channel state, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setChannelState(Ice.AsyncResult r__);

        void removeChannel(int channelid);
        void removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_removeChannel> begin_removeChannel(int channelid);
        Ice.AsyncResult<Murmur.Callback_Server_removeChannel> begin_removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_removeChannel(int channelid, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_removeChannel(Ice.AsyncResult r__);

        int addChannel(string name, int parent);
        int addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_addChannel> begin_addChannel(string name, int parent);
        Ice.AsyncResult<Murmur.Callback_Server_addChannel> begin_addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_addChannel(string name, int parent, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_addChannel(Ice.AsyncResult r__);

        void sendMessageChannel(int channelid, bool tree, string text);
        void sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_sendMessageChannel> begin_sendMessageChannel(int channelid, bool tree, string text);
        Ice.AsyncResult<Murmur.Callback_Server_sendMessageChannel> begin_sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_sendMessageChannel(int channelid, bool tree, string text, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_sendMessageChannel(Ice.AsyncResult r__);

        void getACL(int channelid, out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit);
        void getACL(int channelid, out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getACL> begin_getACL(int channelid);
        Ice.AsyncResult<Murmur.Callback_Server_getACL> begin_getACL(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getACL(int channelid, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getACL(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_getACL(out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit, Ice.AsyncResult r__);

        void setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit);
        void setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_setACL> begin_setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit);
        Ice.AsyncResult<Murmur.Callback_Server_setACL> begin_setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setACL(Ice.AsyncResult r__);

        void addUserToGroup(int channelid, int session, string group);
        void addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_addUserToGroup> begin_addUserToGroup(int channelid, int session, string group);
        Ice.AsyncResult<Murmur.Callback_Server_addUserToGroup> begin_addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_addUserToGroup(int channelid, int session, string group, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_addUserToGroup(Ice.AsyncResult r__);

        void removeUserFromGroup(int channelid, int session, string group);
        void removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_removeUserFromGroup> begin_removeUserFromGroup(int channelid, int session, string group);
        Ice.AsyncResult<Murmur.Callback_Server_removeUserFromGroup> begin_removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, string group, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_removeUserFromGroup(Ice.AsyncResult r__);

        void redirectWhisperGroup(int session, string source, string target);
        void redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_redirectWhisperGroup> begin_redirectWhisperGroup(int session, string source, string target);
        Ice.AsyncResult<Murmur.Callback_Server_redirectWhisperGroup> begin_redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_redirectWhisperGroup(int session, string source, string target, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_redirectWhisperGroup(Ice.AsyncResult r__);

        _System.Collections.Generic.Dictionary<int, string> getUserNames(int[] ids);
        _System.Collections.Generic.Dictionary<int, string> getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getUserNames> begin_getUserNames(int[] ids);
        Ice.AsyncResult<Murmur.Callback_Server_getUserNames> begin_getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getUserNames(int[] ids, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.Dictionary<int, string> end_getUserNames(Ice.AsyncResult r__);

        _System.Collections.Generic.Dictionary<string, int> getUserIds(string[] names);
        _System.Collections.Generic.Dictionary<string, int> getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getUserIds> begin_getUserIds(string[] names);
        Ice.AsyncResult<Murmur.Callback_Server_getUserIds> begin_getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getUserIds(string[] names, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.Dictionary<string, int> end_getUserIds(Ice.AsyncResult r__);

        int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);
        int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);
        Ice.AsyncResult<Murmur.Callback_Server_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_registerUser(Ice.AsyncResult r__);

        void unregisterUser(int userid);
        void unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_unregisterUser> begin_unregisterUser(int userid);
        Ice.AsyncResult<Murmur.Callback_Server_unregisterUser> begin_unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_unregisterUser(int userid, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_unregisterUser(Ice.AsyncResult r__);

        void updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);
        void updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_updateRegistration> begin_updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);
        Ice.AsyncResult<Murmur.Callback_Server_updateRegistration> begin_updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_updateRegistration(Ice.AsyncResult r__);

        _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> getRegistration(int userid);
        _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getRegistration> begin_getRegistration(int userid);
        Ice.AsyncResult<Murmur.Callback_Server_getRegistration> begin_getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getRegistration(int userid, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> end_getRegistration(Ice.AsyncResult r__);

        _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter);
        _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getRegisteredUsers> begin_getRegisteredUsers(string filter);
        Ice.AsyncResult<Murmur.Callback_Server_getRegisteredUsers> begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getRegisteredUsers(string filter, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.Dictionary<int, string> end_getRegisteredUsers(Ice.AsyncResult r__);

        int verifyPassword(string name, string pw);
        int verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_verifyPassword> begin_verifyPassword(string name, string pw);
        Ice.AsyncResult<Murmur.Callback_Server_verifyPassword> begin_verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_verifyPassword(string name, string pw, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_verifyPassword(Ice.AsyncResult r__);

        byte[] getTexture(int userid);
        byte[] getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getTexture> begin_getTexture(int userid);
        Ice.AsyncResult<Murmur.Callback_Server_getTexture> begin_getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getTexture(int userid, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        byte[] end_getTexture(Ice.AsyncResult r__);

        void setTexture(int userid, byte[] tex);
        void setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_setTexture> begin_setTexture(int userid, byte[] tex);
        Ice.AsyncResult<Murmur.Callback_Server_setTexture> begin_setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setTexture(int userid, byte[] tex, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_setTexture(Ice.AsyncResult r__);

        int getUptime();
        int getUptime(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Server_getUptime> begin_getUptime();
        Ice.AsyncResult<Murmur.Callback_Server_getUptime> begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getUptime(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_getUptime(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface MetaCallbackPrx : Ice.ObjectPrx
    {
        void started(Murmur.ServerPrx srv);
        void started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_MetaCallback_started> begin_started(Murmur.ServerPrx srv);
        Ice.AsyncResult<Murmur.Callback_MetaCallback_started> begin_started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_started(Murmur.ServerPrx srv, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_started(Ice.AsyncResult r__);

        void stopped(Murmur.ServerPrx srv);
        void stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_MetaCallback_stopped> begin_stopped(Murmur.ServerPrx srv);
        Ice.AsyncResult<Murmur.Callback_MetaCallback_stopped> begin_stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_stopped(Murmur.ServerPrx srv, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_stopped(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface MetaPrx : Ice.ObjectPrx
    {
        Murmur.ServerPrx getServer(int id);
        Murmur.ServerPrx getServer(int id, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Meta_getServer> begin_getServer(int id);
        Ice.AsyncResult<Murmur.Callback_Meta_getServer> begin_getServer(int id, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getServer(int id, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getServer(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Murmur.ServerPrx end_getServer(Ice.AsyncResult r__);

        Murmur.ServerPrx newServer();
        Murmur.ServerPrx newServer(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Meta_newServer> begin_newServer();
        Ice.AsyncResult<Murmur.Callback_Meta_newServer> begin_newServer(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_newServer(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_newServer(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Murmur.ServerPrx end_newServer(Ice.AsyncResult r__);

        Murmur.ServerPrx[] getBootedServers();
        Murmur.ServerPrx[] getBootedServers(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Meta_getBootedServers> begin_getBootedServers();
        Ice.AsyncResult<Murmur.Callback_Meta_getBootedServers> begin_getBootedServers(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getBootedServers(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getBootedServers(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Murmur.ServerPrx[] end_getBootedServers(Ice.AsyncResult r__);

        Murmur.ServerPrx[] getAllServers();
        Murmur.ServerPrx[] getAllServers(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Meta_getAllServers> begin_getAllServers();
        Ice.AsyncResult<Murmur.Callback_Meta_getAllServers> begin_getAllServers(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getAllServers(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getAllServers(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Murmur.ServerPrx[] end_getAllServers(Ice.AsyncResult r__);

        _System.Collections.Generic.Dictionary<string, string> getDefaultConf();
        _System.Collections.Generic.Dictionary<string, string> getDefaultConf(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Meta_getDefaultConf> begin_getDefaultConf();
        Ice.AsyncResult<Murmur.Callback_Meta_getDefaultConf> begin_getDefaultConf(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getDefaultConf(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getDefaultConf(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.Dictionary<string, string> end_getDefaultConf(Ice.AsyncResult r__);

        void getVersion(out int major, out int minor, out int patch, out string text);
        void getVersion(out int major, out int minor, out int patch, out string text, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Meta_getVersion> begin_getVersion();
        Ice.AsyncResult<Murmur.Callback_Meta_getVersion> begin_getVersion(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getVersion(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getVersion(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_getVersion(out int major, out int minor, out int patch, out string text, Ice.AsyncResult r__);

        void addCallback(Murmur.MetaCallbackPrx cb);
        void addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Meta_addCallback> begin_addCallback(Murmur.MetaCallbackPrx cb);
        Ice.AsyncResult<Murmur.Callback_Meta_addCallback> begin_addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_addCallback(Murmur.MetaCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_addCallback(Ice.AsyncResult r__);

        void removeCallback(Murmur.MetaCallbackPrx cb);
        void removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Meta_removeCallback> begin_removeCallback(Murmur.MetaCallbackPrx cb);
        Ice.AsyncResult<Murmur.Callback_Meta_removeCallback> begin_removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_removeCallback(Murmur.MetaCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_removeCallback(Ice.AsyncResult r__);

        int getUptime();
        int getUptime(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Murmur.Callback_Meta_getUptime> begin_getUptime();
        Ice.AsyncResult<Murmur.Callback_Meta_getUptime> begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getUptime(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_getUptime(Ice.AsyncResult r__);
    }
}

namespace Murmur
{
    /// <summary>
    /// Callback interface for servers.
    /// You can supply an implementation of this to receive notification
    /// messages from the server.
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
    /// complete before continuing processing.
    /// Note that callbacks are removed when a server is stopped, so you should have a callback for
    /// [MetaCallback::started] which calls [Server::addCallback].
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerCallbackOperations_
    {
        /// <summary>
        /// Called when a user connects to the server.
        /// </summary>
        /// <param name="state">State of connected user.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void userConnected(Murmur.User state, Ice.Current current__);

        /// <summary>
        /// Called when a user disconnects from the server.
        /// The user has already been removed, so you can no longer use methods like [Server::getState]
        /// to retrieve the user's state.
        /// </summary>
        /// <param name="state">State of disconnected user.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void userDisconnected(Murmur.User state, Ice.Current current__);

        /// <summary>
        /// Called when a user state changes.
        /// This is called if the user moves, is renamed, is muted, deafened etc.
        /// </summary>
        /// <param name="state">New state of user.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void userStateChanged(Murmur.User state, Ice.Current current__);

        /// <summary>
        /// Called when a new channel is created.
        /// </summary>
        /// <param name="state">State of new channel.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void channelCreated(Murmur.Channel state, Ice.Current current__);

        /// <summary>
        /// Called when a channel is removed.
        /// The channel has already been removed, you can no longer use methods like [Server::getChannelState]
        /// </summary>
        /// <param name="state">State of removed channel.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void channelRemoved(Murmur.Channel state, Ice.Current current__);

        /// <summary>
        /// Called when a new channel state changes.
        /// This is called if the channel is moved, renamed or if new links are added.
        /// </summary>
        /// <param name="state">New state of channel.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void channelStateChanged(Murmur.Channel state, Ice.Current current__);
    }

    /// <summary>
    /// Callback interface for servers.
    /// You can supply an implementation of this to receive notification
    /// messages from the server.
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
    /// complete before continuing processing.
    /// Note that callbacks are removed when a server is stopped, so you should have a callback for
    /// [MetaCallback::started] which calls [Server::addCallback].
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerCallbackOperationsNC_
    {
        /// <summary>
        /// Called when a user connects to the server.
        /// </summary>
        /// <param name="state">State of connected user.</param>
        
        void userConnected(Murmur.User state);

        /// <summary>
        /// Called when a user disconnects from the server.
        /// The user has already been removed, so you can no longer use methods like [Server::getState]
        /// to retrieve the user's state.
        /// </summary>
        /// <param name="state">State of disconnected user.</param>
        
        void userDisconnected(Murmur.User state);

        /// <summary>
        /// Called when a user state changes.
        /// This is called if the user moves, is renamed, is muted, deafened etc.
        /// </summary>
        /// <param name="state">New state of user.</param>
        
        void userStateChanged(Murmur.User state);

        /// <summary>
        /// Called when a new channel is created.
        /// </summary>
        /// <param name="state">State of new channel.</param>
        
        void channelCreated(Murmur.Channel state);

        /// <summary>
        /// Called when a channel is removed.
        /// The channel has already been removed, you can no longer use methods like [Server::getChannelState]
        /// </summary>
        /// <param name="state">State of removed channel.</param>
        
        void channelRemoved(Murmur.Channel state);

        /// <summary>
        /// Called when a new channel state changes.
        /// This is called if the channel is moved, renamed or if new links are added.
        /// </summary>
        /// <param name="state">New state of channel.</param>
        
        void channelStateChanged(Murmur.Channel state);
    }

    /// <summary>
    /// Callback interface for context actions.
    /// You need to supply one of these for [Server::addContext]. 
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
    /// complete before continuing processing.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerContextCallbackOperations_
    {
        /// <summary>
        /// Called when a context action is performed.
        /// </summary>
        /// <param name="action">Action to be performed.
        /// </param>
        /// <param name="usr">User which initiated the action.
        /// </param>
        /// <param name="session">If nonzero, session of target user.
        /// </param>
        /// <param name="channelid">If nonzero, session of target channel.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void contextAction(string action, Murmur.User usr, int session, int channelid, Ice.Current current__);
    }

    /// <summary>
    /// Callback interface for context actions.
    /// You need to supply one of these for [Server::addContext]. 
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
    /// complete before continuing processing.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerContextCallbackOperationsNC_
    {
        /// <summary>
        /// Called when a context action is performed.
        /// </summary>
        /// <param name="action">Action to be performed.
        /// </param>
        /// <param name="usr">User which initiated the action.
        /// </param>
        /// <param name="session">If nonzero, session of target user.
        /// </param>
        /// <param name="channelid">If nonzero, session of target channel.</param>
        
        void contextAction(string action, Murmur.User usr, int session, int channelid);
    }

    /// <summary>
    /// Callback interface for server authentication.
    /// You need to supply one of these for [Server::setAuthenticator].
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that unlike [ServerCallback] and [ServerContextCallback], these methods are called
    /// synchronously. If the response lags, the entire murmur server will lag.
    /// Also note that, as the method calls are synchronous, making a call to [Server] or [Meta] will
    /// deadlock the server.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerAuthenticatorOperations_
    {
        /// <summary>
        /// Called to authenticate a user.
        /// If you do not know the username in question, always return -2 from this
        /// method to fall through to normal database authentication.
        /// Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
        /// the username and id so it cannot be used for normal database authentication.
        /// The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
        /// should only be trusted if certstrong is true.
        /// 
        /// </summary>
        /// <param name="name">Username to authenticate.
        /// </param>
        /// <param name="pw">Password to authenticate with.
        /// </param>
        /// <param name="certificates">List of der encoded certificates the user connected with.
        /// </param>
        /// <param name="certhash">Hash of user certificate, as used by murmur internally when matching.
        /// </param>
        /// <param name="certstrong">True if certificate was valid and signed by a trusted CA.
        /// </param>
        /// <param name="newname">Set this to change the username from the supplied one.
        /// </param>
        /// <param name="groups">List of groups on the root channel that the user will be added to for the duration of the connection.
        /// </param>
        /// <returns>UserID of authenticated user, -1 for authentication failures and -2 for unknown user (fallthrough).</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, Ice.Current current__);

        /// <summary>
        /// Fetch information about a user.
        /// This is used to retrieve information like email address, keyhash etc. If you
        /// want murmur to take care of this information itself, simply return false to fall through.
        /// </summary>
        /// <param name="id">User id.
        /// </param>
        /// <param name="key">Key of information to be retrieved.
        /// </param>
        /// <param name="info">Information about user. This needs to include at least "name".
        /// </param>
        /// <returns>true if information is present, false to fall through.</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        /// <summary>
        /// Map a name to a user id.
        /// </summary>
        /// <param name="name">Username to map.
        /// </param>
        /// <returns>User id or -2 for unknown name.</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int nameToId(string name, Ice.Current current__);

        /// <summary>
        /// Map a user to a User id.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>Name of user or empty string for unknown id.</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        string idToName(int id, Ice.Current current__);

        /// <summary>
        /// Map a user to a custom Texture.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>User texture or an empty texture for unknwon users or users without textures.</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        byte[] idToTexture(int id, Ice.Current current__);
    }

    /// <summary>
    /// Callback interface for server authentication.
    /// You need to supply one of these for [Server::setAuthenticator].
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that unlike [ServerCallback] and [ServerContextCallback], these methods are called
    /// synchronously. If the response lags, the entire murmur server will lag.
    /// Also note that, as the method calls are synchronous, making a call to [Server] or [Meta] will
    /// deadlock the server.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerAuthenticatorOperationsNC_
    {
        /// <summary>
        /// Called to authenticate a user.
        /// If you do not know the username in question, always return -2 from this
        /// method to fall through to normal database authentication.
        /// Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
        /// the username and id so it cannot be used for normal database authentication.
        /// The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
        /// should only be trusted if certstrong is true.
        /// 
        /// </summary>
        /// <param name="name">Username to authenticate.
        /// </param>
        /// <param name="pw">Password to authenticate with.
        /// </param>
        /// <param name="certificates">List of der encoded certificates the user connected with.
        /// </param>
        /// <param name="certhash">Hash of user certificate, as used by murmur internally when matching.
        /// </param>
        /// <param name="certstrong">True if certificate was valid and signed by a trusted CA.
        /// </param>
        /// <param name="newname">Set this to change the username from the supplied one.
        /// </param>
        /// <param name="groups">List of groups on the root channel that the user will be added to for the duration of the connection.
        /// </param>
        /// <returns>UserID of authenticated user, -1 for authentication failures and -2 for unknown user (fallthrough).</returns>
        
        int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups);

        /// <summary>
        /// Fetch information about a user.
        /// This is used to retrieve information like email address, keyhash etc. If you
        /// want murmur to take care of this information itself, simply return false to fall through.
        /// </summary>
        /// <param name="id">User id.
        /// </param>
        /// <param name="key">Key of information to be retrieved.
        /// </param>
        /// <param name="info">Information about user. This needs to include at least "name".
        /// </param>
        /// <returns>true if information is present, false to fall through.</returns>
        
        bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);

        /// <summary>
        /// Map a name to a user id.
        /// </summary>
        /// <param name="name">Username to map.
        /// </param>
        /// <returns>User id or -2 for unknown name.</returns>
        
        int nameToId(string name);

        /// <summary>
        /// Map a user to a User id.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>Name of user or empty string for unknown id.</returns>
        
        string idToName(int id);

        /// <summary>
        /// Map a user to a custom Texture.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>User texture or an empty texture for unknwon users or users without textures.</returns>
        
        byte[] idToTexture(int id);
    }

    /// <summary>
    /// Callback interface for server authentication and registration.
    /// This allows you to support both authentication
    /// and account updating.
    /// You do not need to implement this if all you want is authentication, you only need this if other scripts
    /// connected to the same server calls e.g. [Server::setTexture].
    /// Almost all of these methods support fall through, meaning murmur should continue the operation against its
    /// own database.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerUpdatingAuthenticatorOperations_ : Murmur.ServerAuthenticatorOperations_
    {
        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="info">Information about user to register.
        /// </param>
        /// <returns>User id of new user, -1 for registration failure, or -2 to fall through.</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        /// <summary>
        /// Unregister a user.
        /// </summary>
        /// <param name="id">Userid to unregister.
        /// </param>
        /// <returns>1 for successfull unregistration, 0 for unsuccessfull unregistration, -1 to fall through.</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int unregisterUser(int id, Ice.Current current__);

        /// <summary>
        /// Get a list of registered users matching filter.
        /// </summary>
        /// <param name="filter">Substring usernames must contain. If empty, return all registered users.
        /// </param>
        /// <returns>List of matching registered users.</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, Ice.Current current__);

        /// <summary>
        /// Set additional information for user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="info">Information to set about user. This should be merged with existing information.
        /// </param>
        /// <returns>1 for successfull update, 0 for unsuccessfull update, -1 to fall through.</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        /// <summary>
        /// Set texture of user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="tex">New texture.
        /// </param>
        /// <returns>1 for successfull update, 0 for unsuccessfull update, -1 to fall through.</returns>
        /// <param name="current__">The Current object for the invocation.</param>
        
        int setTexture(int id, byte[] tex, Ice.Current current__);
    }

    /// <summary>
    /// Callback interface for server authentication and registration.
    /// This allows you to support both authentication
    /// and account updating.
    /// You do not need to implement this if all you want is authentication, you only need this if other scripts
    /// connected to the same server calls e.g. [Server::setTexture].
    /// Almost all of these methods support fall through, meaning murmur should continue the operation against its
    /// own database.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerUpdatingAuthenticatorOperationsNC_ : Murmur.ServerAuthenticatorOperationsNC_
    {
        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="info">Information about user to register.
        /// </param>
        /// <returns>User id of new user, -1 for registration failure, or -2 to fall through.</returns>
        
        int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);

        /// <summary>
        /// Unregister a user.
        /// </summary>
        /// <param name="id">Userid to unregister.
        /// </param>
        /// <returns>1 for successfull unregistration, 0 for unsuccessfull unregistration, -1 to fall through.</returns>
        
        int unregisterUser(int id);

        /// <summary>
        /// Get a list of registered users matching filter.
        /// </summary>
        /// <param name="filter">Substring usernames must contain. If empty, return all registered users.
        /// </param>
        /// <returns>List of matching registered users.</returns>
        
        _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter);

        /// <summary>
        /// Set additional information for user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="info">Information to set about user. This should be merged with existing information.
        /// </param>
        /// <returns>1 for successfull update, 0 for unsuccessfull update, -1 to fall through.</returns>
        
        int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);

        /// <summary>
        /// Set texture of user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="tex">New texture.
        /// </param>
        /// <returns>1 for successfull update, 0 for unsuccessfull update, -1 to fall through.</returns>
        
        int setTexture(int id, byte[] tex);
    }

    /// <summary>
    /// Per-server interface.
    /// This includes all methods for configuring and altering
    /// the state of a single virtual server. You can retrieve a pointer to this interface
    /// from one of the methods in [Meta].
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerOperations_
    {
        /// <summary>
        /// Shows if the server currently running (accepting users).
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void isRunning_async(Murmur.AMD_Server_isRunning cb__, Ice.Current current__);

        /// <summary>
        /// Start server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void start_async(Murmur.AMD_Server_start cb__, Ice.Current current__);

        /// <summary>
        /// Stop server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void stop_async(Murmur.AMD_Server_stop cb__, Ice.Current current__);

        /// <summary>
        /// Delete server and all it's configuration.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void delete_async(Murmur.AMD_Server_delete cb__, Ice.Current current__);

        /// <summary>
        /// Fetch the server id.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void id_async(Murmur.AMD_Server_id cb__, Ice.Current current__);

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications about changes to users and channels.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void addCallback_async(Murmur.AMD_Server_addCallback cb__, Murmur.ServerCallbackPrx cb, Ice.Current current__);

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface to be removed.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void removeCallback_async(Murmur.AMD_Server_removeCallback cb__, Murmur.ServerCallbackPrx cb, Ice.Current current__);

        /// <summary>
        /// Set external authenticator.
        /// If set, all authentications from clients are forwarded to this
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="auth">Authenticator object to perform subsequent authentications.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void setAuthenticator_async(Murmur.AMD_Server_setAuthenticator cb__, Murmur.ServerAuthenticatorPrx auth, Ice.Current current__);

        /// <summary>
        /// Retrieve configuration item.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="key">Configuration key.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getConf_async(Murmur.AMD_Server_getConf cb__, string key, Ice.Current current__);

        /// <summary>
        /// Retrieve all configuration items.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getAllConf_async(Murmur.AMD_Server_getAllConf cb__, Ice.Current current__);

        /// <summary>
        /// Set a configuration item.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="key">Configuration key.
        /// </param>
        /// <param name="value">Configuration value.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void setConf_async(Murmur.AMD_Server_setConf cb__, string key, string value, Ice.Current current__);

        /// <summary>
        /// Set superuser password.
        /// This is just a convenience for using [updateRegistration] on user id 0.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="pw">Password.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void setSuperuserPassword_async(Murmur.AMD_Server_setSuperuserPassword cb__, string pw, Ice.Current current__);

        /// <summary>
        /// Fetch log entries.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="first">Lowest numbered entry to fetch. 0 is the most recent item.
        /// </param>
        /// <param name="last">Last entry to fetch.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getLog_async(Murmur.AMD_Server_getLog cb__, int first, int last, Ice.Current current__);

        /// <summary>
        /// Fetch all users.
        /// This returns all currently connected users on the server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getUsers_async(Murmur.AMD_Server_getUsers cb__, Ice.Current current__);

        /// <summary>
        /// Fetch all channels.
        /// This returns all defined channels on the server. The root channel is always channel 0.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getChannels_async(Murmur.AMD_Server_getChannels cb__, Ice.Current current__);

        /// <summary>
        /// Fetch certificate of user.
        /// This returns the complete certificate chain of a user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getCertificateList_async(Murmur.AMD_Server_getCertificateList cb__, int session, Ice.Current current__);

        /// <summary>
        /// Fetch all channels and connected users as a tree.
        /// This retrieves an easy-to-use representation of the server
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getTree_async(Murmur.AMD_Server_getTree cb__, Ice.Current current__);

        /// <summary>
        /// Fetch all current IP bans on the server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getBans_async(Murmur.AMD_Server_getBans cb__, Ice.Current current__);

        /// <summary>
        /// Set all current IP bans on the server.
        /// This will replace any bans already present, so if you want to add a ban, be sure to call [getBans] and then
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="bans">List of bans.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void setBans_async(Murmur.AMD_Server_setBans cb__, Murmur.Ban[] bans, Ice.Current current__);

        /// <summary>
        /// Kick a user.
        /// The user is not banned, and is free to rejoin the server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="reason">Text message to show when user is kicked.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void kickUser_async(Murmur.AMD_Server_kickUser cb__, int session, string reason, Ice.Current current__);

        /// <summary>
        /// Get state of a single connected user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getState_async(Murmur.AMD_Server_getState cb__, int session, Ice.Current current__);

        /// <summary>
        /// Set user state.
        /// You can use this to move, mute and deafen users.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="state">User state to set.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void setState_async(Murmur.AMD_Server_setState cb__, Murmur.User state, Ice.Current current__);

        /// <summary>
        /// Send text message to a single user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void sendMessage_async(Murmur.AMD_Server_sendMessage cb__, int session, string text, Ice.Current current__);

        /// <summary>
        /// Check if user is permitted to perform action.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        /// <param name="perm">Permission bits to check.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void hasPermission_async(Murmur.AMD_Server_hasPermission cb__, int session, int channelid, int perm, Ice.Current current__);

        /// <summary>
        /// Add a context callback.
        /// This is done per user, and will add a context menu action for the user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Session of user which should receive context entry.
        /// </param>
        /// <param name="action">Action string, a unique name to associate with the action.
        /// </param>
        /// <param name="text">Name of action shown to user.
        /// </param>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        /// <param name="ctx">Context this should be used in. Needs to be one or a combination of [ContextServer], [ContextChannel] and [ContextUser].
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void addContextCallback_async(Murmur.AMD_Server_addContextCallback cb__, int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, Ice.Current current__);

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface to be removed. This callback will be removed from all from all users.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void removeContextCallback_async(Murmur.AMD_Server_removeContextCallback cb__, Murmur.ServerContextCallbackPrx cb, Ice.Current current__);

        /// <summary>
        /// Get state of single channel.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getChannelState_async(Murmur.AMD_Server_getChannelState cb__, int channelid, Ice.Current current__);

        /// <summary>
        /// Set state of a single channel.
        /// You can use this to move or relink channels.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="state">Channel state to set.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void setChannelState_async(Murmur.AMD_Server_setChannelState cb__, Murmur.Channel state, Ice.Current current__);

        /// <summary>
        /// Remove a channel and all its subchannels.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">ID of Channel. See [Channel::id].</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void removeChannel_async(Murmur.AMD_Server_removeChannel cb__, int channelid, Ice.Current current__);

        /// <summary>
        /// Add a new channel.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="name">Name of new channel.
        /// </param>
        /// <param name="parent">Channel ID of parent channel. See [Channel::id].
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void addChannel_async(Murmur.AMD_Server_addChannel cb__, string name, int parent, Ice.Current current__);

        /// <summary>
        /// Send text message to channel or a tree of channels.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to send to. See [Channel::id].
        /// </param>
        /// <param name="tree">If true, the message will be sent to the channel and all its subchannels.
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void sendMessageChannel_async(Murmur.AMD_Server_sendMessageChannel cb__, int channelid, bool tree, string text, Ice.Current current__);

        /// <summary>
        /// Retrieve ACLs and Groups on a channel.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getACL_async(Murmur.AMD_Server_getACL cb__, int channelid, Ice.Current current__);

        /// <summary>
        /// Set ACLs and Groups on a channel.
        /// Note that this will replace all existing ACLs and groups on the channel.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        /// <param name="acls">List of ACLs on the channel.
        /// </param>
        /// <param name="groups">List of groups on the channel.
        /// </param>
        /// <param name="inherit">Should this channel inherit ACLs from the parent channel?</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void setACL_async(Murmur.AMD_Server_setACL cb__, int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, Ice.Current current__);

        /// <summary>
        /// Temporarily add a user to a group on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to add to.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void addUserToGroup_async(Murmur.AMD_Server_addUserToGroup cb__, int channelid, int session, string group, Ice.Current current__);

        /// <summary>
        /// Remove a user from a temporary group membership on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to remove from.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void removeUserFromGroup_async(Murmur.AMD_Server_removeUserFromGroup cb__, int channelid, int session, string group, Ice.Current current__);

        /// <summary>
        /// Redirect whisper targets for user.
        /// If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="source">Group name to redirect from.
        /// </param>
        /// <param name="target">Group name to redirect to.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void redirectWhisperGroup_async(Murmur.AMD_Server_redirectWhisperGroup cb__, int session, string source, string target, Ice.Current current__);

        /// <summary>
        /// Map a list of [User::userid] to a matching name.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getUserNames_async(Murmur.AMD_Server_getUserNames cb__, int[] ids, Ice.Current current__);

        /// <summary>
        /// Map a list of user names to a matching id.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getUserIds_async(Murmur.AMD_Server_getUserIds cb__, string[] names, Ice.Current current__);

        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="info">Information about new user. Must include at least "name".
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void registerUser_async(Murmur.AMD_Server_registerUser cb__, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        /// <summary>
        /// Remove a user registration.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void unregisterUser_async(Murmur.AMD_Server_unregisterUser cb__, int userid, Ice.Current current__);

        /// <summary>
        /// Update the registration for a user.
        /// You can use this to set the email or password of a user,
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void updateRegistration_async(Murmur.AMD_Server_updateRegistration cb__, int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        /// <summary>
        /// Fetch registration for a single user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getRegistration_async(Murmur.AMD_Server_getRegistration cb__, int userid, Ice.Current current__);

        /// <summary>
        /// Fetch a group of registered users.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="filter">Substring of user name. If blank, will retrieve all registered users.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getRegisteredUsers_async(Murmur.AMD_Server_getRegisteredUsers cb__, string filter, Ice.Current current__);

        /// <summary>
        /// Verify the password of a user.
        /// You can use this to verify a user's credentials.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="name">User name. See [RegisteredUser::name].
        /// </param>
        /// <param name="pw">User password.
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void verifyPassword_async(Murmur.AMD_Server_verifyPassword cb__, string name, string pw, Ice.Current current__);

        /// <summary>
        /// Fetch user texture.
        /// Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getTexture_async(Murmur.AMD_Server_getTexture cb__, int userid, Ice.Current current__);

        /// <summary>
        /// Set user texture.
        /// The texture is a 600x60 32-bit BGRA raw texture, optionally zlib compress()ed.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <param name="tex">Texture to set for the user, or an empty texture to remove the existing texture.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void setTexture_async(Murmur.AMD_Server_setTexture cb__, int userid, byte[] tex, Ice.Current current__);

        /// <summary>
        /// Get virtual server uptime.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getUptime_async(Murmur.AMD_Server_getUptime cb__, Ice.Current current__);
    }

    /// <summary>
    /// Per-server interface.
    /// This includes all methods for configuring and altering
    /// the state of a single virtual server. You can retrieve a pointer to this interface
    /// from one of the methods in [Meta].
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerOperationsNC_
    {
        /// <summary>
        /// Shows if the server currently running (accepting users).
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void isRunning_async(Murmur.AMD_Server_isRunning cb__);

        /// <summary>
        /// Start server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void start_async(Murmur.AMD_Server_start cb__);

        /// <summary>
        /// Stop server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void stop_async(Murmur.AMD_Server_stop cb__);

        /// <summary>
        /// Delete server and all it's configuration.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void delete_async(Murmur.AMD_Server_delete cb__);

        /// <summary>
        /// Fetch the server id.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void id_async(Murmur.AMD_Server_id cb__);

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications about changes to users and channels.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        void addCallback_async(Murmur.AMD_Server_addCallback cb__, Murmur.ServerCallbackPrx cb);

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface to be removed.
        /// </param>
        void removeCallback_async(Murmur.AMD_Server_removeCallback cb__, Murmur.ServerCallbackPrx cb);

        /// <summary>
        /// Set external authenticator.
        /// If set, all authentications from clients are forwarded to this
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="auth">Authenticator object to perform subsequent authentications.</param>
        void setAuthenticator_async(Murmur.AMD_Server_setAuthenticator cb__, Murmur.ServerAuthenticatorPrx auth);

        /// <summary>
        /// Retrieve configuration item.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="key">Configuration key.
        /// </param>
        void getConf_async(Murmur.AMD_Server_getConf cb__, string key);

        /// <summary>
        /// Retrieve all configuration items.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getAllConf_async(Murmur.AMD_Server_getAllConf cb__);

        /// <summary>
        /// Set a configuration item.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="key">Configuration key.
        /// </param>
        /// <param name="value">Configuration value.</param>
        void setConf_async(Murmur.AMD_Server_setConf cb__, string key, string value);

        /// <summary>
        /// Set superuser password.
        /// This is just a convenience for using [updateRegistration] on user id 0.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="pw">Password.</param>
        void setSuperuserPassword_async(Murmur.AMD_Server_setSuperuserPassword cb__, string pw);

        /// <summary>
        /// Fetch log entries.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="first">Lowest numbered entry to fetch. 0 is the most recent item.
        /// </param>
        /// <param name="last">Last entry to fetch.
        /// </param>
        void getLog_async(Murmur.AMD_Server_getLog cb__, int first, int last);

        /// <summary>
        /// Fetch all users.
        /// This returns all currently connected users on the server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getUsers_async(Murmur.AMD_Server_getUsers cb__);

        /// <summary>
        /// Fetch all channels.
        /// This returns all defined channels on the server. The root channel is always channel 0.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getChannels_async(Murmur.AMD_Server_getChannels cb__);

        /// <summary>
        /// Fetch certificate of user.
        /// This returns the complete certificate chain of a user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        void getCertificateList_async(Murmur.AMD_Server_getCertificateList cb__, int session);

        /// <summary>
        /// Fetch all channels and connected users as a tree.
        /// This retrieves an easy-to-use representation of the server
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getTree_async(Murmur.AMD_Server_getTree cb__);

        /// <summary>
        /// Fetch all current IP bans on the server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getBans_async(Murmur.AMD_Server_getBans cb__);

        /// <summary>
        /// Set all current IP bans on the server.
        /// This will replace any bans already present, so if you want to add a ban, be sure to call [getBans] and then
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="bans">List of bans.</param>
        void setBans_async(Murmur.AMD_Server_setBans cb__, Murmur.Ban[] bans);

        /// <summary>
        /// Kick a user.
        /// The user is not banned, and is free to rejoin the server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="reason">Text message to show when user is kicked.</param>
        void kickUser_async(Murmur.AMD_Server_kickUser cb__, int session, string reason);

        /// <summary>
        /// Get state of a single connected user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        void getState_async(Murmur.AMD_Server_getState cb__, int session);

        /// <summary>
        /// Set user state.
        /// You can use this to move, mute and deafen users.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="state">User state to set.
        /// </param>
        void setState_async(Murmur.AMD_Server_setState cb__, Murmur.User state);

        /// <summary>
        /// Send text message to a single user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        void sendMessage_async(Murmur.AMD_Server_sendMessage cb__, int session, string text);

        /// <summary>
        /// Check if user is permitted to perform action.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        /// <param name="perm">Permission bits to check.
        /// </param>
        void hasPermission_async(Murmur.AMD_Server_hasPermission cb__, int session, int channelid, int perm);

        /// <summary>
        /// Add a context callback.
        /// This is done per user, and will add a context menu action for the user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Session of user which should receive context entry.
        /// </param>
        /// <param name="action">Action string, a unique name to associate with the action.
        /// </param>
        /// <param name="text">Name of action shown to user.
        /// </param>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        /// <param name="ctx">Context this should be used in. Needs to be one or a combination of [ContextServer], [ContextChannel] and [ContextUser].
        /// </param>
        void addContextCallback_async(Murmur.AMD_Server_addContextCallback cb__, int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx);

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface to be removed. This callback will be removed from all from all users.
        /// </param>
        void removeContextCallback_async(Murmur.AMD_Server_removeContextCallback cb__, Murmur.ServerContextCallbackPrx cb);

        /// <summary>
        /// Get state of single channel.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        void getChannelState_async(Murmur.AMD_Server_getChannelState cb__, int channelid);

        /// <summary>
        /// Set state of a single channel.
        /// You can use this to move or relink channels.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="state">Channel state to set.
        /// </param>
        void setChannelState_async(Murmur.AMD_Server_setChannelState cb__, Murmur.Channel state);

        /// <summary>
        /// Remove a channel and all its subchannels.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">ID of Channel. See [Channel::id].</param>
        void removeChannel_async(Murmur.AMD_Server_removeChannel cb__, int channelid);

        /// <summary>
        /// Add a new channel.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="name">Name of new channel.
        /// </param>
        /// <param name="parent">Channel ID of parent channel. See [Channel::id].
        /// </param>
        void addChannel_async(Murmur.AMD_Server_addChannel cb__, string name, int parent);

        /// <summary>
        /// Send text message to channel or a tree of channels.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to send to. See [Channel::id].
        /// </param>
        /// <param name="tree">If true, the message will be sent to the channel and all its subchannels.
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        void sendMessageChannel_async(Murmur.AMD_Server_sendMessageChannel cb__, int channelid, bool tree, string text);

        /// <summary>
        /// Retrieve ACLs and Groups on a channel.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        void getACL_async(Murmur.AMD_Server_getACL cb__, int channelid);

        /// <summary>
        /// Set ACLs and Groups on a channel.
        /// Note that this will replace all existing ACLs and groups on the channel.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        /// <param name="acls">List of ACLs on the channel.
        /// </param>
        /// <param name="groups">List of groups on the channel.
        /// </param>
        /// <param name="inherit">Should this channel inherit ACLs from the parent channel?</param>
        void setACL_async(Murmur.AMD_Server_setACL cb__, int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit);

        /// <summary>
        /// Temporarily add a user to a group on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to add to.</param>
        void addUserToGroup_async(Murmur.AMD_Server_addUserToGroup cb__, int channelid, int session, string group);

        /// <summary>
        /// Remove a user from a temporary group membership on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to remove from.</param>
        void removeUserFromGroup_async(Murmur.AMD_Server_removeUserFromGroup cb__, int channelid, int session, string group);

        /// <summary>
        /// Redirect whisper targets for user.
        /// If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="source">Group name to redirect from.
        /// </param>
        /// <param name="target">Group name to redirect to.</param>
        void redirectWhisperGroup_async(Murmur.AMD_Server_redirectWhisperGroup cb__, int session, string source, string target);

        /// <summary>
        /// Map a list of [User::userid] to a matching name.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getUserNames_async(Murmur.AMD_Server_getUserNames cb__, int[] ids);

        /// <summary>
        /// Map a list of user names to a matching id.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getUserIds_async(Murmur.AMD_Server_getUserIds cb__, string[] names);

        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="info">Information about new user. Must include at least "name".
        /// </param>
        void registerUser_async(Murmur.AMD_Server_registerUser cb__, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);

        /// <summary>
        /// Remove a user registration.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].</param>
        void unregisterUser_async(Murmur.AMD_Server_unregisterUser cb__, int userid);

        /// <summary>
        /// Update the registration for a user.
        /// You can use this to set the email or password of a user,
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void updateRegistration_async(Murmur.AMD_Server_updateRegistration cb__, int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info);

        /// <summary>
        /// Fetch registration for a single user.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        void getRegistration_async(Murmur.AMD_Server_getRegistration cb__, int userid);

        /// <summary>
        /// Fetch a group of registered users.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="filter">Substring of user name. If blank, will retrieve all registered users.
        /// </param>
        void getRegisteredUsers_async(Murmur.AMD_Server_getRegisteredUsers cb__, string filter);

        /// <summary>
        /// Verify the password of a user.
        /// You can use this to verify a user's credentials.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="name">User name. See [RegisteredUser::name].
        /// </param>
        /// <param name="pw">User password.
        /// </param>
        void verifyPassword_async(Murmur.AMD_Server_verifyPassword cb__, string name, string pw);

        /// <summary>
        /// Fetch user texture.
        /// Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        void getTexture_async(Murmur.AMD_Server_getTexture cb__, int userid);

        /// <summary>
        /// Set user texture.
        /// The texture is a 600x60 32-bit BGRA raw texture, optionally zlib compress()ed.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <param name="tex">Texture to set for the user, or an empty texture to remove the existing texture.</param>
        void setTexture_async(Murmur.AMD_Server_setTexture cb__, int userid, byte[] tex);

        /// <summary>
        /// Get virtual server uptime.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getUptime_async(Murmur.AMD_Server_getUptime cb__);
    }

    /// <summary>
    /// Callback interface for Meta.
    /// You can supply an implementation of this to recieve notifications
    /// when servers are stopped or started.
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
    /// complete before continuing processing.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface MetaCallbackOperations_
    {
        /// <summary>
        /// Called when a server is started.
        /// The server is up and running when this event is sent, so all methods that 
        /// need a running server will work.
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void started(Murmur.ServerPrx srv, Ice.Current current__);

        /// <summary>
        /// Called when a server is stopped.
        /// The server is already stopped when this event is sent, so no methods that
        /// need a running server will work.
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        
        void stopped(Murmur.ServerPrx srv, Ice.Current current__);
    }

    /// <summary>
    /// Callback interface for Meta.
    /// You can supply an implementation of this to recieve notifications
    /// when servers are stopped or started.
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
    /// complete before continuing processing.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface MetaCallbackOperationsNC_
    {
        /// <summary>
        /// Called when a server is started.
        /// The server is up and running when this event is sent, so all methods that 
        /// need a running server will work.
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        
        void started(Murmur.ServerPrx srv);

        /// <summary>
        /// Called when a server is stopped.
        /// The server is already stopped when this event is sent, so no methods that
        /// need a running server will work.
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        
        void stopped(Murmur.ServerPrx srv);
    }

    /// <summary>
    /// This is the meta interface.
    /// It is primarily used for retrieving the [Server] interfaces for each individual server.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface MetaOperations_
    {
        /// <summary>
        /// Fetch interface to specific server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="id">Server ID. See [Server::getId].
        /// </param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getServer_async(Murmur.AMD_Meta_getServer cb__, int id, Ice.Current current__);

        /// <summary>
        /// Create a new server.
        /// Call [Server::getId] on the returned interface to find it's ID.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void newServer_async(Murmur.AMD_Meta_newServer cb__, Ice.Current current__);

        /// <summary>
        /// Fetch list of all currently running servers.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getBootedServers_async(Murmur.AMD_Meta_getBootedServers cb__, Ice.Current current__);

        /// <summary>
        /// Fetch list of all defined servers.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getAllServers_async(Murmur.AMD_Meta_getAllServers cb__, Ice.Current current__);

        /// <summary>
        /// Fetch default configuraion.
        /// This returns the configuration items that were set in the configuration file, or
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getDefaultConf_async(Murmur.AMD_Meta_getDefaultConf cb__, Ice.Current current__);

        /// <summary>
        /// Fetch version of Murmur.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getVersion_async(Murmur.AMD_Meta_getVersion cb__, Ice.Current current__);

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications when servers are started or stopped.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface which will receive notifications.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void addCallback_async(Murmur.AMD_Meta_addCallback cb__, Murmur.MetaCallbackPrx cb, Ice.Current current__);

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface to be removed.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void removeCallback_async(Murmur.AMD_Meta_removeCallback cb__, Murmur.MetaCallbackPrx cb, Ice.Current current__);

        /// <summary>
        /// Get murmur uptime.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void getUptime_async(Murmur.AMD_Meta_getUptime cb__, Ice.Current current__);
    }

    /// <summary>
    /// This is the meta interface.
    /// It is primarily used for retrieving the [Server] interfaces for each individual server.
    /// </summary>
    
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface MetaOperationsNC_
    {
        /// <summary>
        /// Fetch interface to specific server.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="id">Server ID. See [Server::getId].
        /// </param>
        void getServer_async(Murmur.AMD_Meta_getServer cb__, int id);

        /// <summary>
        /// Create a new server.
        /// Call [Server::getId] on the returned interface to find it's ID.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void newServer_async(Murmur.AMD_Meta_newServer cb__);

        /// <summary>
        /// Fetch list of all currently running servers.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getBootedServers_async(Murmur.AMD_Meta_getBootedServers cb__);

        /// <summary>
        /// Fetch list of all defined servers.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getAllServers_async(Murmur.AMD_Meta_getAllServers cb__);

        /// <summary>
        /// Fetch default configuraion.
        /// This returns the configuration items that were set in the configuration file, or
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getDefaultConf_async(Murmur.AMD_Meta_getDefaultConf cb__);

        /// <summary>
        /// Fetch version of Murmur.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getVersion_async(Murmur.AMD_Meta_getVersion cb__);

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications when servers are started or stopped.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface which will receive notifications.</param>
        void addCallback_async(Murmur.AMD_Meta_addCallback cb__, Murmur.MetaCallbackPrx cb);

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="cb">Callback interface to be removed.</param>
        void removeCallback_async(Murmur.AMD_Meta_removeCallback cb__, Murmur.MetaCallbackPrx cb);

        /// <summary>
        /// Get murmur uptime.
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void getUptime_async(Murmur.AMD_Meta_getUptime cb__);
    }
}

namespace Murmur
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class NetAddressHelper
    {
        public static void write(IceInternal.BasicStream os__, byte[] v__)
        {
            os__.writeByteSeq(v__);
        }

        public static byte[] read(IceInternal.BasicStream is__)
        {
            byte[] v__;
            v__ = is__.readByteSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class IntListHelper
    {
        public static void write(IceInternal.BasicStream os__, int[] v__)
        {
            os__.writeIntSeq(v__);
        }

        public static int[] read(IceInternal.BasicStream is__)
        {
            int[] v__;
            v__ = is__.readIntSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class TreeListHelper
    {
        public static void write(IceInternal.BasicStream os__, Murmur.Tree[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    os__.writeObject(v__[ix__]);
                }
            }
        }

        public static Murmur.Tree[] read(IceInternal.BasicStream is__)
        {
            Murmur.Tree[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(4);
                v__ = new Murmur.Tree[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    IceInternal.ArrayPatcher<Murmur.Tree> spx = new IceInternal.ArrayPatcher<Murmur.Tree>("::Murmur::Tree", v__, ix__);
                    is__.readObject(spx);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class UserMapHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<int, Murmur.User> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<int, Murmur.User> e__ in v__)
                {
                    os__.writeInt(e__.Key);
                    if(e__.Value == null)
                    {
                        Murmur.User tmp__ = new Murmur.User();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        e__.Value.write__(os__);
                    }
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Murmur.User> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<int, Murmur.User> r__ = new _System.Collections.Generic.Dictionary<int, Murmur.User>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = is__.readInt();
                Murmur.User v__;
                v__ = null;
                if(v__ == null)
                {
                    v__ = new Murmur.User();
                }
                v__.read__(is__);
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ChannelMapHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<int, Murmur.Channel> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<int, Murmur.Channel> e__ in v__)
                {
                    os__.writeInt(e__.Key);
                    if(e__.Value == null)
                    {
                        Murmur.Channel tmp__ = new Murmur.Channel();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        e__.Value.write__(os__);
                    }
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Murmur.Channel> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<int, Murmur.Channel> r__ = new _System.Collections.Generic.Dictionary<int, Murmur.Channel>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = is__.readInt();
                Murmur.Channel v__;
                v__ = null;
                if(v__ == null)
                {
                    v__ = new Murmur.Channel();
                }
                v__.read__(is__);
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ChannelListHelper
    {
        public static void write(IceInternal.BasicStream os__, Murmur.Channel[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Murmur.Channel() : v__[ix__]).write__(os__);
                }
            }
        }

        public static Murmur.Channel[] read(IceInternal.BasicStream is__)
        {
            Murmur.Channel[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(16);
                v__ = new Murmur.Channel[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Murmur.Channel();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class UserListHelper
    {
        public static void write(IceInternal.BasicStream os__, Murmur.User[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Murmur.User() : v__[ix__]).write__(os__);
                }
            }
        }

        public static Murmur.User[] read(IceInternal.BasicStream is__)
        {
            Murmur.User[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(42);
                v__ = new Murmur.User[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Murmur.User();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class GroupListHelper
    {
        public static void write(IceInternal.BasicStream os__, Murmur.Group[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Murmur.Group() : v__[ix__]).write__(os__);
                }
            }
        }

        public static Murmur.Group[] read(IceInternal.BasicStream is__)
        {
            Murmur.Group[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(7);
                v__ = new Murmur.Group[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Murmur.Group();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ACLListHelper
    {
        public static void write(IceInternal.BasicStream os__, Murmur.ACL[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Murmur.ACL() : v__[ix__]).write__(os__);
                }
            }
        }

        public static Murmur.ACL[] read(IceInternal.BasicStream is__)
        {
            Murmur.ACL[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(16);
                v__ = new Murmur.ACL[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Murmur.ACL();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class LogListHelper
    {
        public static void write(IceInternal.BasicStream os__, Murmur.LogEntry[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Murmur.LogEntry() : v__[ix__]).write__(os__);
                }
            }
        }

        public static Murmur.LogEntry[] read(IceInternal.BasicStream is__)
        {
            Murmur.LogEntry[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(5);
                v__ = new Murmur.LogEntry[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Murmur.LogEntry();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class BanListHelper
    {
        public static void write(IceInternal.BasicStream os__, Murmur.Ban[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Murmur.Ban() : v__[ix__]).write__(os__);
                }
            }
        }

        public static Murmur.Ban[] read(IceInternal.BasicStream is__)
        {
            Murmur.Ban[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(20);
                v__ = new Murmur.Ban[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Murmur.Ban();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class IdListHelper
    {
        public static void write(IceInternal.BasicStream os__, int[] v__)
        {
            os__.writeIntSeq(v__);
        }

        public static int[] read(IceInternal.BasicStream is__)
        {
            int[] v__;
            v__ = is__.readIntSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class NameListHelper
    {
        public static void write(IceInternal.BasicStream os__, string[] v__)
        {
            os__.writeStringSeq(v__);
        }

        public static string[] read(IceInternal.BasicStream is__)
        {
            string[] v__;
            v__ = is__.readStringSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class NameMapHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<int, string> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<int, string> e__ in v__)
                {
                    os__.writeInt(e__.Key);
                    os__.writeString(e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, string> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<int, string> r__ = new _System.Collections.Generic.Dictionary<int, string>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = is__.readInt();
                string v__;
                v__ = is__.readString();
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class IdMapHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<string, int> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<string, int> e__ in v__)
                {
                    os__.writeString(e__.Key);
                    os__.writeInt(e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<string, int> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<string, int> r__ = new _System.Collections.Generic.Dictionary<string, int>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                string k__;
                k__ = is__.readString();
                int v__;
                v__ = is__.readInt();
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class TextureHelper
    {
        public static void write(IceInternal.BasicStream os__, byte[] v__)
        {
            os__.writeByteSeq(v__);
        }

        public static byte[] read(IceInternal.BasicStream is__)
        {
            byte[] v__;
            v__ = is__.readByteSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ConfigMapHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<string, string> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<string, string> e__ in v__)
                {
                    os__.writeString(e__.Key);
                    os__.writeString(e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<string, string> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<string, string> r__ = new _System.Collections.Generic.Dictionary<string, string>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                string k__;
                k__ = is__.readString();
                string v__;
                v__ = is__.readString();
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class GroupNameListHelper
    {
        public static void write(IceInternal.BasicStream os__, string[] v__)
        {
            os__.writeStringSeq(v__);
        }

        public static string[] read(IceInternal.BasicStream is__)
        {
            string[] v__;
            v__ = is__.readStringSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class CertificateDerHelper
    {
        public static void write(IceInternal.BasicStream os__, byte[] v__)
        {
            os__.writeByteSeq(v__);
        }

        public static byte[] read(IceInternal.BasicStream is__)
        {
            byte[] v__;
            v__ = is__.readByteSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class CertificateListHelper
    {
        public static void write(IceInternal.BasicStream os__, byte[][] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    Murmur.CertificateDerHelper.write(os__, v__[ix__]);
                }
            }
        }

        public static byte[][] read(IceInternal.BasicStream is__)
        {
            byte[][] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(1);
                v__ = new byte[szx__][];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = Murmur.CertificateDerHelper.read(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class UserInfoMapHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<Murmur.UserInfo, string> e__ in v__)
                {
                    os__.writeByte((byte)e__.Key, 5);
                    os__.writeString(e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> r__ = new _System.Collections.Generic.Dictionary<Murmur.UserInfo, string>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                Murmur.UserInfo k__;
                k__ = (Murmur.UserInfo)is__.readByte(5);
                string v__;
                v__ = is__.readString();
                r__[k__] = v__;
            }
            return r__;
        }
    }

    /// <summary>
    /// User and subchannel state.
    /// Read-only.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class TreePrxHelper : Ice.ObjectPrxHelperBase, TreePrx
    {
        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static TreePrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TreePrx r = b as TreePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TreePrxHelper h = new TreePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static TreePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TreePrx r = b as TreePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TreePrxHelper h = new TreePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static TreePrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TreePrxHelper h = new TreePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TreePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TreePrxHelper h = new TreePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TreePrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TreePrx r = b as TreePrx;
            if(r == null)
            {
                TreePrxHelper h = new TreePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static TreePrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            TreePrxHelper h = new TreePrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Murmur::Tree"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new TreeDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new TreeDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, TreePrx v__)
        {
            os__.writeProxy(v__);
        }

        public static TreePrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                TreePrxHelper result = new TreePrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    /// <summary>
    /// Callback interface for servers.
    /// You can supply an implementation of this to receive notification
    /// messages from the server.
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
    /// complete before continuing processing.
    /// Note that callbacks are removed when a server is stopped, so you should have a callback for
    /// [MetaCallback::started] which calls [Server::addCallback].
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerCallbackPrxHelper : Ice.ObjectPrxHelperBase, ServerCallbackPrx
    {
        #region Synchronous operations

        /// <summary>
        /// Called when a new channel is created.
        /// </summary>
        /// <param name="state">State of new channel.</param>
        
        public void channelCreated(Murmur.Channel state)
        {
            channelCreated(state, null, false);
        }

        /// <summary>
        /// Called when a new channel is created.
        /// </summary>
        /// <param name="state">State of new channel.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            channelCreated(state, context__, true);
        }

        private void channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerCallbackDel_ del__ = (ServerCallbackDel_)delBase__;
                    del__.channelCreated(state, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Called when a channel is removed.
        /// The channel has already been removed, you can no longer use methods like [Server::getChannelState]
        /// </summary>
        /// <param name="state">State of removed channel.</param>
        
        public void channelRemoved(Murmur.Channel state)
        {
            channelRemoved(state, null, false);
        }

        /// <summary>
        /// Called when a channel is removed.
        /// The channel has already been removed, you can no longer use methods like [Server::getChannelState]
        /// </summary>
        /// <param name="state">State of removed channel.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            channelRemoved(state, context__, true);
        }

        private void channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerCallbackDel_ del__ = (ServerCallbackDel_)delBase__;
                    del__.channelRemoved(state, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Called when a new channel state changes.
        /// This is called if the channel is moved, renamed or if new links are added.
        /// </summary>
        /// <param name="state">New state of channel.</param>
        
        public void channelStateChanged(Murmur.Channel state)
        {
            channelStateChanged(state, null, false);
        }

        /// <summary>
        /// Called when a new channel state changes.
        /// This is called if the channel is moved, renamed or if new links are added.
        /// </summary>
        /// <param name="state">New state of channel.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            channelStateChanged(state, context__, true);
        }

        private void channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerCallbackDel_ del__ = (ServerCallbackDel_)delBase__;
                    del__.channelStateChanged(state, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Called when a user connects to the server.
        /// </summary>
        /// <param name="state">State of connected user.</param>
        
        public void userConnected(Murmur.User state)
        {
            userConnected(state, null, false);
        }

        /// <summary>
        /// Called when a user connects to the server.
        /// </summary>
        /// <param name="state">State of connected user.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            userConnected(state, context__, true);
        }

        private void userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerCallbackDel_ del__ = (ServerCallbackDel_)delBase__;
                    del__.userConnected(state, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Called when a user disconnects from the server.
        /// The user has already been removed, so you can no longer use methods like [Server::getState]
        /// to retrieve the user's state.
        /// </summary>
        /// <param name="state">State of disconnected user.</param>
        
        public void userDisconnected(Murmur.User state)
        {
            userDisconnected(state, null, false);
        }

        /// <summary>
        /// Called when a user disconnects from the server.
        /// The user has already been removed, so you can no longer use methods like [Server::getState]
        /// to retrieve the user's state.
        /// </summary>
        /// <param name="state">State of disconnected user.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            userDisconnected(state, context__, true);
        }

        private void userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerCallbackDel_ del__ = (ServerCallbackDel_)delBase__;
                    del__.userDisconnected(state, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Called when a user state changes.
        /// This is called if the user moves, is renamed, is muted, deafened etc.
        /// </summary>
        /// <param name="state">New state of user.</param>
        
        public void userStateChanged(Murmur.User state)
        {
            userStateChanged(state, null, false);
        }

        /// <summary>
        /// Called when a user state changes.
        /// This is called if the user moves, is renamed, is muted, deafened etc.
        /// </summary>
        /// <param name="state">New state of user.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            userStateChanged(state, context__, true);
        }

        private void userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerCallbackDel_ del__ = (ServerCallbackDel_)delBase__;
                    del__.userStateChanged(state, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Murmur.Callback_ServerCallback_channelCreated> begin_channelCreated(Murmur.Channel state)
        {
            return begin_channelCreated(state, null, false, null, null);
        }

        /// <summary>
        /// Called when a new channel is created.
        /// </summary>
        /// <param name="state">State of new channel.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerCallback_channelCreated> begin_channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_channelCreated(state, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_channelCreated(Murmur.Channel state, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_channelCreated(state, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_channelCreated(state, ctx__, true, cb__, cookie__);
        }

        private const string __channelCreated_name = "channelCreated";

        public void end_channelCreated(Ice.AsyncResult r__)
        {
            end__(r__, __channelCreated_name);
        }

        private Ice.AsyncResult<Murmur.Callback_ServerCallback_channelCreated> begin_channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_channelCreated> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_channelCreated>(this, __channelCreated_name, channelCreated_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__channelCreated_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(state == null)
                {
                    Murmur.Channel tmp__ = new Murmur.Channel();
                    tmp__.write__(os__);
                }
                else
                {
                    state.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void channelCreated_completed__(Murmur.Callback_ServerCallback_channelCreated cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerCallback_channelRemoved> begin_channelRemoved(Murmur.Channel state)
        {
            return begin_channelRemoved(state, null, false, null, null);
        }

        /// <summary>
        /// Called when a channel is removed.
        /// The channel has already been removed, you can no longer use methods like [Server::getChannelState]
        /// </summary>
        /// <param name="state">State of removed channel.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerCallback_channelRemoved> begin_channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_channelRemoved(state, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_channelRemoved(Murmur.Channel state, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_channelRemoved(state, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_channelRemoved(state, ctx__, true, cb__, cookie__);
        }

        private const string __channelRemoved_name = "channelRemoved";

        public void end_channelRemoved(Ice.AsyncResult r__)
        {
            end__(r__, __channelRemoved_name);
        }

        private Ice.AsyncResult<Murmur.Callback_ServerCallback_channelRemoved> begin_channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_channelRemoved> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_channelRemoved>(this, __channelRemoved_name, channelRemoved_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__channelRemoved_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(state == null)
                {
                    Murmur.Channel tmp__ = new Murmur.Channel();
                    tmp__.write__(os__);
                }
                else
                {
                    state.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void channelRemoved_completed__(Murmur.Callback_ServerCallback_channelRemoved cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerCallback_channelStateChanged> begin_channelStateChanged(Murmur.Channel state)
        {
            return begin_channelStateChanged(state, null, false, null, null);
        }

        /// <summary>
        /// Called when a new channel state changes.
        /// This is called if the channel is moved, renamed or if new links are added.
        /// </summary>
        /// <param name="state">New state of channel.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerCallback_channelStateChanged> begin_channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_channelStateChanged(state, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_channelStateChanged(Murmur.Channel state, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_channelStateChanged(state, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_channelStateChanged(state, ctx__, true, cb__, cookie__);
        }

        private const string __channelStateChanged_name = "channelStateChanged";

        public void end_channelStateChanged(Ice.AsyncResult r__)
        {
            end__(r__, __channelStateChanged_name);
        }

        private Ice.AsyncResult<Murmur.Callback_ServerCallback_channelStateChanged> begin_channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_channelStateChanged> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_channelStateChanged>(this, __channelStateChanged_name, channelStateChanged_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__channelStateChanged_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(state == null)
                {
                    Murmur.Channel tmp__ = new Murmur.Channel();
                    tmp__.write__(os__);
                }
                else
                {
                    state.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void channelStateChanged_completed__(Murmur.Callback_ServerCallback_channelStateChanged cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerCallback_userConnected> begin_userConnected(Murmur.User state)
        {
            return begin_userConnected(state, null, false, null, null);
        }

        /// <summary>
        /// Called when a user connects to the server.
        /// </summary>
        /// <param name="state">State of connected user.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerCallback_userConnected> begin_userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_userConnected(state, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_userConnected(Murmur.User state, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_userConnected(state, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_userConnected(state, ctx__, true, cb__, cookie__);
        }

        private const string __userConnected_name = "userConnected";

        public void end_userConnected(Ice.AsyncResult r__)
        {
            end__(r__, __userConnected_name);
        }

        private Ice.AsyncResult<Murmur.Callback_ServerCallback_userConnected> begin_userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_userConnected> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_userConnected>(this, __userConnected_name, userConnected_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__userConnected_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(state == null)
                {
                    Murmur.User tmp__ = new Murmur.User();
                    tmp__.write__(os__);
                }
                else
                {
                    state.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void userConnected_completed__(Murmur.Callback_ServerCallback_userConnected cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerCallback_userDisconnected> begin_userDisconnected(Murmur.User state)
        {
            return begin_userDisconnected(state, null, false, null, null);
        }

        /// <summary>
        /// Called when a user disconnects from the server.
        /// The user has already been removed, so you can no longer use methods like [Server::getState]
        /// </summary>
        /// <param name="state">State of disconnected user.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerCallback_userDisconnected> begin_userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_userDisconnected(state, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_userDisconnected(Murmur.User state, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_userDisconnected(state, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_userDisconnected(state, ctx__, true, cb__, cookie__);
        }

        private const string __userDisconnected_name = "userDisconnected";

        public void end_userDisconnected(Ice.AsyncResult r__)
        {
            end__(r__, __userDisconnected_name);
        }

        private Ice.AsyncResult<Murmur.Callback_ServerCallback_userDisconnected> begin_userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_userDisconnected> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_userDisconnected>(this, __userDisconnected_name, userDisconnected_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__userDisconnected_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(state == null)
                {
                    Murmur.User tmp__ = new Murmur.User();
                    tmp__.write__(os__);
                }
                else
                {
                    state.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void userDisconnected_completed__(Murmur.Callback_ServerCallback_userDisconnected cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerCallback_userStateChanged> begin_userStateChanged(Murmur.User state)
        {
            return begin_userStateChanged(state, null, false, null, null);
        }

        /// <summary>
        /// Called when a user state changes.
        /// This is called if the user moves, is renamed, is muted, deafened etc.
        /// </summary>
        /// <param name="state">New state of user.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerCallback_userStateChanged> begin_userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_userStateChanged(state, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_userStateChanged(Murmur.User state, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_userStateChanged(state, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_userStateChanged(state, ctx__, true, cb__, cookie__);
        }

        private const string __userStateChanged_name = "userStateChanged";

        public void end_userStateChanged(Ice.AsyncResult r__)
        {
            end__(r__, __userStateChanged_name);
        }

        private Ice.AsyncResult<Murmur.Callback_ServerCallback_userStateChanged> begin_userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_userStateChanged> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerCallback_userStateChanged>(this, __userStateChanged_name, userStateChanged_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__userStateChanged_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(state == null)
                {
                    Murmur.User tmp__ = new Murmur.User();
                    tmp__.write__(os__);
                }
                else
                {
                    state.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void userStateChanged_completed__(Murmur.Callback_ServerCallback_userStateChanged cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ServerCallbackPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerCallbackPrx r = b as ServerCallbackPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ServerCallbackPrxHelper h = new ServerCallbackPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerCallbackPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ServerCallbackPrx r = b as ServerCallbackPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ServerCallbackPrxHelper h = new ServerCallbackPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerCallbackPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ServerCallbackPrxHelper h = new ServerCallbackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerCallbackPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ServerCallbackPrxHelper h = new ServerCallbackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerCallbackPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerCallbackPrx r = b as ServerCallbackPrx;
            if(r == null)
            {
                ServerCallbackPrxHelper h = new ServerCallbackPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerCallbackPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ServerCallbackPrxHelper h = new ServerCallbackPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Murmur::ServerCallback"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ServerCallbackDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ServerCallbackDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, ServerCallbackPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ServerCallbackPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ServerCallbackPrxHelper result = new ServerCallbackPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    /// <summary>
    /// Callback interface for context actions.
    /// You need to supply one of these for [Server::addContext]. 
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
    /// complete before continuing processing.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerContextCallbackPrxHelper : Ice.ObjectPrxHelperBase, ServerContextCallbackPrx
    {
        #region Synchronous operations

        /// <summary>
        /// Called when a context action is performed.
        /// </summary>
        /// <param name="action">Action to be performed.
        /// </param>
        /// <param name="usr">User which initiated the action.
        /// </param>
        /// <param name="session">If nonzero, session of target user.
        /// </param>
        /// <param name="channelid">If nonzero, session of target channel.</param>
        
        public void contextAction(string action, Murmur.User usr, int session, int channelid)
        {
            contextAction(action, usr, session, channelid, null, false);
        }

        /// <summary>
        /// Called when a context action is performed.
        /// </summary>
        /// <param name="action">Action to be performed.
        /// </param>
        /// <param name="usr">User which initiated the action.
        /// </param>
        /// <param name="session">If nonzero, session of target user.
        /// </param>
        /// <param name="channelid">If nonzero, session of target channel.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            contextAction(action, usr, session, channelid, context__, true);
        }

        private void contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerContextCallbackDel_ del__ = (ServerContextCallbackDel_)delBase__;
                    del__.contextAction(action, usr, session, channelid, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Murmur.Callback_ServerContextCallback_contextAction> begin_contextAction(string action, Murmur.User usr, int session, int channelid)
        {
            return begin_contextAction(action, usr, session, channelid, null, false, null, null);
        }

        /// <summary>
        /// Called when a context action is performed.
        /// </summary>
        /// <param name="action">Action to be performed.
        /// </param>
        /// <param name="usr">User which initiated the action.
        /// </param>
        /// <param name="session">If nonzero, session of target user.
        /// </param>
        /// <param name="channelid">If nonzero, session of target channel.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerContextCallback_contextAction> begin_contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_contextAction(action, usr, session, channelid, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_contextAction(string action, Murmur.User usr, int session, int channelid, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_contextAction(action, usr, session, channelid, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_contextAction(action, usr, session, channelid, ctx__, true, cb__, cookie__);
        }

        private const string __contextAction_name = "contextAction";

        public void end_contextAction(Ice.AsyncResult r__)
        {
            end__(r__, __contextAction_name);
        }

        private Ice.AsyncResult<Murmur.Callback_ServerContextCallback_contextAction> begin_contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerContextCallback_contextAction> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_ServerContextCallback_contextAction>(this, __contextAction_name, contextAction_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__contextAction_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(action);
                if(usr == null)
                {
                    Murmur.User tmp__ = new Murmur.User();
                    tmp__.write__(os__);
                }
                else
                {
                    usr.write__(os__);
                }
                os__.writeInt(session);
                os__.writeInt(channelid);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void contextAction_completed__(Murmur.Callback_ServerContextCallback_contextAction cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ServerContextCallbackPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerContextCallbackPrx r = b as ServerContextCallbackPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ServerContextCallbackPrxHelper h = new ServerContextCallbackPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerContextCallbackPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ServerContextCallbackPrx r = b as ServerContextCallbackPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ServerContextCallbackPrxHelper h = new ServerContextCallbackPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerContextCallbackPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ServerContextCallbackPrxHelper h = new ServerContextCallbackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerContextCallbackPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ServerContextCallbackPrxHelper h = new ServerContextCallbackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerContextCallbackPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerContextCallbackPrx r = b as ServerContextCallbackPrx;
            if(r == null)
            {
                ServerContextCallbackPrxHelper h = new ServerContextCallbackPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerContextCallbackPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ServerContextCallbackPrxHelper h = new ServerContextCallbackPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Murmur::ServerContextCallback"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ServerContextCallbackDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ServerContextCallbackDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, ServerContextCallbackPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ServerContextCallbackPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ServerContextCallbackPrxHelper result = new ServerContextCallbackPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    /// <summary>
    /// Callback interface for server authentication.
    /// You need to supply one of these for [Server::setAuthenticator].
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that unlike [ServerCallback] and [ServerContextCallback], these methods are called
    /// synchronously. If the response lags, the entire murmur server will lag.
    /// Also note that, as the method calls are synchronous, making a call to [Server] or [Meta] will
    /// deadlock the server.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerAuthenticatorPrxHelper : Ice.ObjectPrxHelperBase, ServerAuthenticatorPrx
    {
        #region Synchronous operations

        /// <summary>
        /// Called to authenticate a user.
        /// If you do not know the username in question, always return -2 from this
        /// method to fall through to normal database authentication.
        /// Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
        /// the username and id so it cannot be used for normal database authentication.
        /// The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
        /// should only be trusted if certstrong is true.
        /// 
        /// </summary>
        /// <param name="name">Username to authenticate.
        /// </param>
        /// <param name="pw">Password to authenticate with.
        /// </param>
        /// <param name="certificates">List of der encoded certificates the user connected with.
        /// </param>
        /// <param name="certhash">Hash of user certificate, as used by murmur internally when matching.
        /// </param>
        /// <param name="certstrong">True if certificate was valid and signed by a trusted CA.
        /// </param>
        /// <param name="newname">Set this to change the username from the supplied one.
        /// </param>
        /// <param name="groups">List of groups on the root channel that the user will be added to for the duration of the connection.
        /// </param>
        /// <returns>UserID of authenticated user, -1 for authentication failures and -2 for unknown user (fallthrough).</returns>
        
        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups)
        {
            return authenticate(name, pw, certificates, certhash, certstrong, out newname, out groups, null, false);
        }

        /// <summary>
        /// Called to authenticate a user.
        /// If you do not know the username in question, always return -2 from this
        /// method to fall through to normal database authentication.
        /// Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
        /// the username and id so it cannot be used for normal database authentication.
        /// The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
        /// should only be trusted if certstrong is true.
        /// 
        /// </summary>
        /// <param name="name">Username to authenticate.
        /// </param>
        /// <param name="pw">Password to authenticate with.
        /// </param>
        /// <param name="certificates">List of der encoded certificates the user connected with.
        /// </param>
        /// <param name="certhash">Hash of user certificate, as used by murmur internally when matching.
        /// </param>
        /// <param name="certstrong">True if certificate was valid and signed by a trusted CA.
        /// </param>
        /// <param name="newname">Set this to change the username from the supplied one.
        /// </param>
        /// <param name="groups">List of groups on the root channel that the user will be added to for the duration of the connection.
        /// </param>
        /// <returns>UserID of authenticated user, -1 for authentication failures and -2 for unknown user (fallthrough).</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return authenticate(name, pw, certificates, certhash, certstrong, out newname, out groups, context__, true);
        }

        private int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("authenticate");
                    delBase__ = getDelegate__(false);
                    ServerAuthenticatorDel_ del__ = (ServerAuthenticatorDel_)delBase__;
                    return del__.authenticate(name, pw, certificates, certhash, certstrong, out newname, out groups, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch information about a user.
        /// This is used to retrieve information like email address, keyhash etc. If you
        /// want murmur to take care of this information itself, simply return false to fall through.
        /// </summary>
        /// <param name="id">User id.
        /// </param>
        /// <param name="key">Key of information to be retrieved.
        /// </param>
        /// <param name="info">Information about user. This needs to include at least "name".
        /// </param>
        /// <returns>true if information is present, false to fall through.</returns>
        
        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return getInfo(id, out info, null, false);
        }

        /// <summary>
        /// Fetch information about a user.
        /// This is used to retrieve information like email address, keyhash etc. If you
        /// want murmur to take care of this information itself, simply return false to fall through.
        /// </summary>
        /// <param name="id">User id.
        /// </param>
        /// <param name="key">Key of information to be retrieved.
        /// </param>
        /// <param name="info">Information about user. This needs to include at least "name".
        /// </param>
        /// <returns>true if information is present, false to fall through.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getInfo(id, out info, context__, true);
        }

        private bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getInfo");
                    delBase__ = getDelegate__(false);
                    ServerAuthenticatorDel_ del__ = (ServerAuthenticatorDel_)delBase__;
                    return del__.getInfo(id, out info, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Map a user to a User id.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>Name of user or empty string for unknown id.</returns>
        
        public string idToName(int id)
        {
            return idToName(id, null, false);
        }

        /// <summary>
        /// Map a user to a User id.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>Name of user or empty string for unknown id.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return idToName(id, context__, true);
        }

        private string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("idToName");
                    delBase__ = getDelegate__(false);
                    ServerAuthenticatorDel_ del__ = (ServerAuthenticatorDel_)delBase__;
                    return del__.idToName(id, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Map a user to a custom Texture.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>User texture or an empty texture for unknwon users or users without textures.</returns>
        
        public byte[] idToTexture(int id)
        {
            return idToTexture(id, null, false);
        }

        /// <summary>
        /// Map a user to a custom Texture.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>User texture or an empty texture for unknwon users or users without textures.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return idToTexture(id, context__, true);
        }

        private byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("idToTexture");
                    delBase__ = getDelegate__(false);
                    ServerAuthenticatorDel_ del__ = (ServerAuthenticatorDel_)delBase__;
                    return del__.idToTexture(id, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Map a name to a user id.
        /// </summary>
        /// <param name="name">Username to map.
        /// </param>
        /// <returns>User id or -2 for unknown name.</returns>
        
        public int nameToId(string name)
        {
            return nameToId(name, null, false);
        }

        /// <summary>
        /// Map a name to a user id.
        /// </summary>
        /// <param name="name">Username to map.
        /// </param>
        /// <returns>User id or -2 for unknown name.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return nameToId(name, context__, true);
        }

        private int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("nameToId");
                    delBase__ = getDelegate__(false);
                    ServerAuthenticatorDel_ del__ = (ServerAuthenticatorDel_)delBase__;
                    return del__.nameToId(name, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_authenticate> begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong)
        {
            return begin_authenticate(name, pw, certificates, certhash, certstrong, null, false, null, null);
        }

        /// <summary>
        /// Called to authenticate a user.
        /// If you do not know the username in question, always return -2 from this
        /// </summary>
        /// <param name="name">Username to authenticate.
        /// </param>
        /// <param name="pw">Password to authenticate with.
        /// </param>
        /// <param name="certificates">List of der encoded certificates the user connected with.
        /// </param>
        /// <param name="certhash">Hash of user certificate, as used by murmur internally when matching.
        /// </param>
        /// <param name="certstrong">True if certificate was valid and signed by a trusted CA.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_authenticate> begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_authenticate(name, pw, certificates, certhash, certstrong, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_authenticate(name, pw, certificates, certhash, certstrong, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_authenticate(name, pw, certificates, certhash, certstrong, ctx__, true, cb__, cookie__);
        }

        private const string __authenticate_name = "authenticate";

        public int end_authenticate(out string newname, out string[] groups, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __authenticate_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            newname = is__.readString();
            groups = is__.readStringSeq();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_authenticate> begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__authenticate_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_authenticate> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_authenticate>(this, __authenticate_name, authenticate_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__authenticate_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(name);
                os__.writeString(pw);
                if(certificates == null)
                {
                    os__.writeSize(0);
                }
                else
                {
                    os__.writeSize(certificates.Length);
                    for(int ix__ = 0; ix__ < certificates.Length; ++ix__)
                    {
                        Murmur.CertificateDerHelper.write(os__, certificates[ix__]);
                    }
                }
                os__.writeString(certhash);
                os__.writeBool(certstrong);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void authenticate_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_authenticate cb__, Ice.ExceptionCallback excb__)
        {
            string newname;
            string[] groups;
            int ret__;
            try
            {
                ret__ = end_authenticate(out newname, out groups, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, newname, groups);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_getInfo> begin_getInfo(int id)
        {
            return begin_getInfo(id, null, false, null, null);
        }

        /// <summary>
        /// Fetch information about a user.
        /// This is used to retrieve information like email address, keyhash etc. If you
        /// </summary>
        /// <param name="id">User id.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_getInfo> begin_getInfo(int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getInfo(id, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getInfo(int id, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getInfo(id, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getInfo(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getInfo(id, ctx__, true, cb__, cookie__);
        }

        private const string __getInfo_name = "getInfo";

        public bool end_getInfo(out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getInfo_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            info = Murmur.UserInfoMapHelper.read(is__);
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_getInfo> begin_getInfo(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getInfo_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_getInfo> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_getInfo>(this, __getInfo_name, getInfo_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getInfo_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getInfo_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_getInfo cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info;
            bool ret__;
            try
            {
                ret__ = end_getInfo(out info, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, info);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToName> begin_idToName(int id)
        {
            return begin_idToName(id, null, false, null, null);
        }

        /// <summary>
        /// Map a user to a User id.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToName> begin_idToName(int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_idToName(id, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_idToName(int id, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_idToName(id, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_idToName(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_idToName(id, ctx__, true, cb__, cookie__);
        }

        private const string __idToName_name = "idToName";

        public string end_idToName(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __idToName_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToName> begin_idToName(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__idToName_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_idToName> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_idToName>(this, __idToName_name, idToName_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__idToName_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void idToName_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_idToName cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_idToName(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToTexture> begin_idToTexture(int id)
        {
            return begin_idToTexture(id, null, false, null, null);
        }

        /// <summary>
        /// Map a user to a custom Texture.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToTexture> begin_idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_idToTexture(id, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_idToTexture(int id, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_idToTexture(id, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_idToTexture(id, ctx__, true, cb__, cookie__);
        }

        private const string __idToTexture_name = "idToTexture";

        public byte[] end_idToTexture(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __idToTexture_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            byte[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readByteSeq();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToTexture> begin_idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__idToTexture_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_idToTexture> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_idToTexture>(this, __idToTexture_name, idToTexture_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__idToTexture_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void idToTexture_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_idToTexture cb__, Ice.ExceptionCallback excb__)
        {
            byte[] ret__;
            try
            {
                ret__ = end_idToTexture(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_nameToId> begin_nameToId(string name)
        {
            return begin_nameToId(name, null, false, null, null);
        }

        /// <summary>
        /// Map a name to a user id.
        /// </summary>
        /// <param name="name">Username to map.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_nameToId> begin_nameToId(string name, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_nameToId(name, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_nameToId(string name, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_nameToId(name, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_nameToId(string name, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_nameToId(name, ctx__, true, cb__, cookie__);
        }

        private const string __nameToId_name = "nameToId";

        public int end_nameToId(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __nameToId_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_nameToId> begin_nameToId(string name, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__nameToId_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_nameToId> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_nameToId>(this, __nameToId_name, nameToId_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__nameToId_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(name);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void nameToId_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_nameToId cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_nameToId(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ServerAuthenticatorPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerAuthenticatorPrx r = b as ServerAuthenticatorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ServerAuthenticatorPrxHelper h = new ServerAuthenticatorPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerAuthenticatorPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ServerAuthenticatorPrx r = b as ServerAuthenticatorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ServerAuthenticatorPrxHelper h = new ServerAuthenticatorPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerAuthenticatorPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ServerAuthenticatorPrxHelper h = new ServerAuthenticatorPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerAuthenticatorPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ServerAuthenticatorPrxHelper h = new ServerAuthenticatorPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerAuthenticatorPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerAuthenticatorPrx r = b as ServerAuthenticatorPrx;
            if(r == null)
            {
                ServerAuthenticatorPrxHelper h = new ServerAuthenticatorPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerAuthenticatorPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ServerAuthenticatorPrxHelper h = new ServerAuthenticatorPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Murmur::ServerAuthenticator"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ServerAuthenticatorDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ServerAuthenticatorDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, ServerAuthenticatorPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ServerAuthenticatorPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ServerAuthenticatorPrxHelper result = new ServerAuthenticatorPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    /// <summary>
    /// Callback interface for server authentication and registration.
    /// This allows you to support both authentication
    /// and account updating.
    /// You do not need to implement this if all you want is authentication, you only need this if other scripts
    /// connected to the same server calls e.g. [Server::setTexture].
    /// Almost all of these methods support fall through, meaning murmur should continue the operation against its
    /// own database.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerUpdatingAuthenticatorPrxHelper : Ice.ObjectPrxHelperBase, ServerUpdatingAuthenticatorPrx
    {
        #region Synchronous operations

        /// <summary>
        /// Called to authenticate a user.
        /// If you do not know the username in question, always return -2 from this
        /// method to fall through to normal database authentication.
        /// Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
        /// the username and id so it cannot be used for normal database authentication.
        /// The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
        /// should only be trusted if certstrong is true.
        /// 
        /// </summary>
        /// <param name="name">Username to authenticate.
        /// </param>
        /// <param name="pw">Password to authenticate with.
        /// </param>
        /// <param name="certificates">List of der encoded certificates the user connected with.
        /// </param>
        /// <param name="certhash">Hash of user certificate, as used by murmur internally when matching.
        /// </param>
        /// <param name="certstrong">True if certificate was valid and signed by a trusted CA.
        /// </param>
        /// <param name="newname">Set this to change the username from the supplied one.
        /// </param>
        /// <param name="groups">List of groups on the root channel that the user will be added to for the duration of the connection.
        /// </param>
        /// <returns>UserID of authenticated user, -1 for authentication failures and -2 for unknown user (fallthrough).</returns>
        
        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups)
        {
            return authenticate(name, pw, certificates, certhash, certstrong, out newname, out groups, null, false);
        }

        /// <summary>
        /// Called to authenticate a user.
        /// If you do not know the username in question, always return -2 from this
        /// method to fall through to normal database authentication.
        /// Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
        /// the username and id so it cannot be used for normal database authentication.
        /// The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
        /// should only be trusted if certstrong is true.
        /// 
        /// </summary>
        /// <param name="name">Username to authenticate.
        /// </param>
        /// <param name="pw">Password to authenticate with.
        /// </param>
        /// <param name="certificates">List of der encoded certificates the user connected with.
        /// </param>
        /// <param name="certhash">Hash of user certificate, as used by murmur internally when matching.
        /// </param>
        /// <param name="certstrong">True if certificate was valid and signed by a trusted CA.
        /// </param>
        /// <param name="newname">Set this to change the username from the supplied one.
        /// </param>
        /// <param name="groups">List of groups on the root channel that the user will be added to for the duration of the connection.
        /// </param>
        /// <returns>UserID of authenticated user, -1 for authentication failures and -2 for unknown user (fallthrough).</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return authenticate(name, pw, certificates, certhash, certstrong, out newname, out groups, context__, true);
        }

        private int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("authenticate");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.authenticate(name, pw, certificates, certhash, certstrong, out newname, out groups, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch information about a user.
        /// This is used to retrieve information like email address, keyhash etc. If you
        /// want murmur to take care of this information itself, simply return false to fall through.
        /// </summary>
        /// <param name="id">User id.
        /// </param>
        /// <param name="key">Key of information to be retrieved.
        /// </param>
        /// <param name="info">Information about user. This needs to include at least "name".
        /// </param>
        /// <returns>true if information is present, false to fall through.</returns>
        
        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return getInfo(id, out info, null, false);
        }

        /// <summary>
        /// Fetch information about a user.
        /// This is used to retrieve information like email address, keyhash etc. If you
        /// want murmur to take care of this information itself, simply return false to fall through.
        /// </summary>
        /// <param name="id">User id.
        /// </param>
        /// <param name="key">Key of information to be retrieved.
        /// </param>
        /// <param name="info">Information about user. This needs to include at least "name".
        /// </param>
        /// <returns>true if information is present, false to fall through.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getInfo(id, out info, context__, true);
        }

        private bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getInfo");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.getInfo(id, out info, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Map a user to a User id.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>Name of user or empty string for unknown id.</returns>
        
        public string idToName(int id)
        {
            return idToName(id, null, false);
        }

        /// <summary>
        /// Map a user to a User id.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>Name of user or empty string for unknown id.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return idToName(id, context__, true);
        }

        private string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("idToName");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.idToName(id, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Map a user to a custom Texture.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>User texture or an empty texture for unknwon users or users without textures.</returns>
        
        public byte[] idToTexture(int id)
        {
            return idToTexture(id, null, false);
        }

        /// <summary>
        /// Map a user to a custom Texture.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <returns>User texture or an empty texture for unknwon users or users without textures.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return idToTexture(id, context__, true);
        }

        private byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("idToTexture");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.idToTexture(id, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Map a name to a user id.
        /// </summary>
        /// <param name="name">Username to map.
        /// </param>
        /// <returns>User id or -2 for unknown name.</returns>
        
        public int nameToId(string name)
        {
            return nameToId(name, null, false);
        }

        /// <summary>
        /// Map a name to a user id.
        /// </summary>
        /// <param name="name">Username to map.
        /// </param>
        /// <returns>User id or -2 for unknown name.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return nameToId(name, context__, true);
        }

        private int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("nameToId");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.nameToId(name, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Get a list of registered users matching filter.
        /// </summary>
        /// <param name="filter">Substring usernames must contain. If empty, return all registered users.
        /// </param>
        /// <returns>List of matching registered users.</returns>
        
        public _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter)
        {
            return getRegisteredUsers(filter, null, false);
        }

        /// <summary>
        /// Get a list of registered users matching filter.
        /// </summary>
        /// <param name="filter">Substring usernames must contain. If empty, return all registered users.
        /// </param>
        /// <returns>List of matching registered users.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getRegisteredUsers(filter, context__, true);
        }

        private _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getRegisteredUsers");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.getRegisteredUsers(filter, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="info">Information about user to register.
        /// </param>
        /// <returns>User id of new user, -1 for registration failure, or -2 to fall through.</returns>
        
        public int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return registerUser(info, null, false);
        }

        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="info">Information about user to register.
        /// </param>
        /// <returns>User id of new user, -1 for registration failure, or -2 to fall through.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return registerUser(info, context__, true);
        }

        private int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("registerUser");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.registerUser(info, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set additional information for user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="info">Information to set about user. This should be merged with existing information.
        /// </param>
        /// <returns>1 for successfull update, 0 for unsuccessfull update, -1 to fall through.</returns>
        
        public int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return setInfo(id, info, null, false);
        }

        /// <summary>
        /// Set additional information for user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="info">Information to set about user. This should be merged with existing information.
        /// </param>
        /// <returns>1 for successfull update, 0 for unsuccessfull update, -1 to fall through.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return setInfo(id, info, context__, true);
        }

        private int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("setInfo");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.setInfo(id, info, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set texture of user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="tex">New texture.
        /// </param>
        /// <returns>1 for successfull update, 0 for unsuccessfull update, -1 to fall through.</returns>
        
        public int setTexture(int id, byte[] tex)
        {
            return setTexture(id, tex, null, false);
        }

        /// <summary>
        /// Set texture of user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="tex">New texture.
        /// </param>
        /// <returns>1 for successfull update, 0 for unsuccessfull update, -1 to fall through.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return setTexture(id, tex, context__, true);
        }

        private int setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("setTexture");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.setTexture(id, tex, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Unregister a user.
        /// </summary>
        /// <param name="id">Userid to unregister.
        /// </param>
        /// <returns>1 for successfull unregistration, 0 for unsuccessfull unregistration, -1 to fall through.</returns>
        
        public int unregisterUser(int id)
        {
            return unregisterUser(id, null, false);
        }

        /// <summary>
        /// Unregister a user.
        /// </summary>
        /// <param name="id">Userid to unregister.
        /// </param>
        /// <returns>1 for successfull unregistration, 0 for unsuccessfull unregistration, -1 to fall through.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return unregisterUser(id, context__, true);
        }

        private int unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("unregisterUser");
                    delBase__ = getDelegate__(false);
                    ServerUpdatingAuthenticatorDel_ del__ = (ServerUpdatingAuthenticatorDel_)delBase__;
                    return del__.unregisterUser(id, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_authenticate> begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong)
        {
            return begin_authenticate(name, pw, certificates, certhash, certstrong, null, false, null, null);
        }

        /// <summary>
        /// Called to authenticate a user.
        /// If you do not know the username in question, always return -2 from this
        /// </summary>
        /// <param name="name">Username to authenticate.
        /// </param>
        /// <param name="pw">Password to authenticate with.
        /// </param>
        /// <param name="certificates">List of der encoded certificates the user connected with.
        /// </param>
        /// <param name="certhash">Hash of user certificate, as used by murmur internally when matching.
        /// </param>
        /// <param name="certstrong">True if certificate was valid and signed by a trusted CA.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_authenticate> begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_authenticate(name, pw, certificates, certhash, certstrong, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_authenticate(name, pw, certificates, certhash, certstrong, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_authenticate(name, pw, certificates, certhash, certstrong, ctx__, true, cb__, cookie__);
        }

        private const string __authenticate_name = "authenticate";

        public int end_authenticate(out string newname, out string[] groups, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __authenticate_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            newname = is__.readString();
            groups = is__.readStringSeq();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_authenticate> begin_authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__authenticate_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_authenticate> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_authenticate>(this, __authenticate_name, authenticate_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__authenticate_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(name);
                os__.writeString(pw);
                if(certificates == null)
                {
                    os__.writeSize(0);
                }
                else
                {
                    os__.writeSize(certificates.Length);
                    for(int ix__ = 0; ix__ < certificates.Length; ++ix__)
                    {
                        Murmur.CertificateDerHelper.write(os__, certificates[ix__]);
                    }
                }
                os__.writeString(certhash);
                os__.writeBool(certstrong);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void authenticate_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_authenticate cb__, Ice.ExceptionCallback excb__)
        {
            string newname;
            string[] groups;
            int ret__;
            try
            {
                ret__ = end_authenticate(out newname, out groups, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, newname, groups);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_getInfo> begin_getInfo(int id)
        {
            return begin_getInfo(id, null, false, null, null);
        }

        /// <summary>
        /// Fetch information about a user.
        /// This is used to retrieve information like email address, keyhash etc. If you
        /// </summary>
        /// <param name="id">User id.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_getInfo> begin_getInfo(int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getInfo(id, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getInfo(int id, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getInfo(id, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getInfo(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getInfo(id, ctx__, true, cb__, cookie__);
        }

        private const string __getInfo_name = "getInfo";

        public bool end_getInfo(out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getInfo_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            info = Murmur.UserInfoMapHelper.read(is__);
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_getInfo> begin_getInfo(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getInfo_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_getInfo> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_getInfo>(this, __getInfo_name, getInfo_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getInfo_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getInfo_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_getInfo cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info;
            bool ret__;
            try
            {
                ret__ = end_getInfo(out info, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, info);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToName> begin_idToName(int id)
        {
            return begin_idToName(id, null, false, null, null);
        }

        /// <summary>
        /// Map a user to a User id.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToName> begin_idToName(int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_idToName(id, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_idToName(int id, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_idToName(id, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_idToName(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_idToName(id, ctx__, true, cb__, cookie__);
        }

        private const string __idToName_name = "idToName";

        public string end_idToName(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __idToName_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToName> begin_idToName(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__idToName_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_idToName> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_idToName>(this, __idToName_name, idToName_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__idToName_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void idToName_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_idToName cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_idToName(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToTexture> begin_idToTexture(int id)
        {
            return begin_idToTexture(id, null, false, null, null);
        }

        /// <summary>
        /// Map a user to a custom Texture.
        /// </summary>
        /// <param name="id">User id to map.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToTexture> begin_idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_idToTexture(id, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_idToTexture(int id, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_idToTexture(id, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_idToTexture(id, ctx__, true, cb__, cookie__);
        }

        private const string __idToTexture_name = "idToTexture";

        public byte[] end_idToTexture(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __idToTexture_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            byte[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readByteSeq();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_idToTexture> begin_idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__idToTexture_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_idToTexture> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_idToTexture>(this, __idToTexture_name, idToTexture_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__idToTexture_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void idToTexture_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_idToTexture cb__, Ice.ExceptionCallback excb__)
        {
            byte[] ret__;
            try
            {
                ret__ = end_idToTexture(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_nameToId> begin_nameToId(string name)
        {
            return begin_nameToId(name, null, false, null, null);
        }

        /// <summary>
        /// Map a name to a user id.
        /// </summary>
        /// <param name="name">Username to map.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_nameToId> begin_nameToId(string name, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_nameToId(name, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_nameToId(string name, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_nameToId(name, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_nameToId(string name, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_nameToId(name, ctx__, true, cb__, cookie__);
        }

        private const string __nameToId_name = "nameToId";

        public int end_nameToId(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __nameToId_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerAuthenticator_nameToId> begin_nameToId(string name, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__nameToId_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_nameToId> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerAuthenticator_nameToId>(this, __nameToId_name, nameToId_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__nameToId_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(name);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void nameToId_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerAuthenticator_nameToId cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_nameToId(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_getRegisteredUsers> begin_getRegisteredUsers(string filter)
        {
            return begin_getRegisteredUsers(filter, null, false, null, null);
        }

        /// <summary>
        /// Get a list of registered users matching filter.
        /// </summary>
        /// <param name="filter">Substring usernames must contain. If empty, return all registered users.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_getRegisteredUsers> begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getRegisteredUsers(filter, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getRegisteredUsers(string filter, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getRegisteredUsers(filter, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getRegisteredUsers(filter, ctx__, true, cb__, cookie__);
        }

        private const string __getRegisteredUsers_name = "getRegisteredUsers";

        public _System.Collections.Generic.Dictionary<int, string> end_getRegisteredUsers(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getRegisteredUsers_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.Dictionary<int, string> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.NameMapHelper.read(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_getRegisteredUsers> begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getRegisteredUsers_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_getRegisteredUsers> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_getRegisteredUsers>(this, __getRegisteredUsers_name, getRegisteredUsers_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getRegisteredUsers_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(filter);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getRegisteredUsers_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerUpdatingAuthenticator_getRegisteredUsers cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<int, string> ret__;
            try
            {
                ret__ = end_getRegisteredUsers(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return begin_registerUser(info, null, false, null, null);
        }

        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="info">Information about user to register.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_registerUser(info, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_registerUser(info, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_registerUser(info, ctx__, true, cb__, cookie__);
        }

        private const string __registerUser_name = "registerUser";

        public int end_registerUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __registerUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__registerUser_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_registerUser> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_registerUser>(this, __registerUser_name, registerUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__registerUser_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.UserInfoMapHelper.write(os__, info);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void registerUser_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerUpdatingAuthenticator_registerUser cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_registerUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setInfo> begin_setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return begin_setInfo(id, info, null, false, null, null);
        }

        /// <summary>
        /// Set additional information for user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="info">Information to set about user. This should be merged with existing information.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setInfo> begin_setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setInfo(id, info, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setInfo(id, info, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setInfo(id, info, ctx__, true, cb__, cookie__);
        }

        private const string __setInfo_name = "setInfo";

        public int end_setInfo(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __setInfo_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setInfo> begin_setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__setInfo_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_setInfo> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_setInfo>(this, __setInfo_name, setInfo_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setInfo_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                Murmur.UserInfoMapHelper.write(os__, info);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setInfo_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerUpdatingAuthenticator_setInfo cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_setInfo(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setTexture> begin_setTexture(int id, byte[] tex)
        {
            return begin_setTexture(id, tex, null, false, null, null);
        }

        /// <summary>
        /// Set texture of user registration.
        /// </summary>
        /// <param name="id">Userid of registered user.
        /// </param>
        /// <param name="tex">New texture.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setTexture> begin_setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setTexture(id, tex, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setTexture(int id, byte[] tex, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setTexture(id, tex, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setTexture(id, tex, ctx__, true, cb__, cookie__);
        }

        private const string __setTexture_name = "setTexture";

        public int end_setTexture(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __setTexture_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_setTexture> begin_setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__setTexture_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_setTexture> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_setTexture>(this, __setTexture_name, setTexture_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setTexture_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                os__.writeByteSeq(tex);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setTexture_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerUpdatingAuthenticator_setTexture cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_setTexture(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_unregisterUser> begin_unregisterUser(int id)
        {
            return begin_unregisterUser(id, null, false, null, null);
        }

        /// <summary>
        /// Unregister a user.
        /// </summary>
        /// <param name="id">Userid to unregister.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_unregisterUser> begin_unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_unregisterUser(id, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_unregisterUser(int id, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_unregisterUser(id, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_unregisterUser(id, ctx__, true, cb__, cookie__);
        }

        private const string __unregisterUser_name = "unregisterUser";

        public int end_unregisterUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __unregisterUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_ServerUpdatingAuthenticator_unregisterUser> begin_unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__unregisterUser_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_unregisterUser> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_ServerUpdatingAuthenticator_unregisterUser>(this, __unregisterUser_name, unregisterUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__unregisterUser_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void unregisterUser_completed__(Ice.AsyncResult r__, Murmur.Callback_ServerUpdatingAuthenticator_unregisterUser cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_unregisterUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ServerUpdatingAuthenticatorPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerUpdatingAuthenticatorPrx r = b as ServerUpdatingAuthenticatorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ServerUpdatingAuthenticatorPrxHelper h = new ServerUpdatingAuthenticatorPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerUpdatingAuthenticatorPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ServerUpdatingAuthenticatorPrx r = b as ServerUpdatingAuthenticatorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ServerUpdatingAuthenticatorPrxHelper h = new ServerUpdatingAuthenticatorPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerUpdatingAuthenticatorPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ServerUpdatingAuthenticatorPrxHelper h = new ServerUpdatingAuthenticatorPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerUpdatingAuthenticatorPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ServerUpdatingAuthenticatorPrxHelper h = new ServerUpdatingAuthenticatorPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerUpdatingAuthenticatorPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerUpdatingAuthenticatorPrx r = b as ServerUpdatingAuthenticatorPrx;
            if(r == null)
            {
                ServerUpdatingAuthenticatorPrxHelper h = new ServerUpdatingAuthenticatorPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerUpdatingAuthenticatorPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ServerUpdatingAuthenticatorPrxHelper h = new ServerUpdatingAuthenticatorPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Murmur::ServerAuthenticator",
            "::Murmur::ServerUpdatingAuthenticator"
        };

        public static string ice_staticId()
        {
            return ids__[2];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ServerUpdatingAuthenticatorDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ServerUpdatingAuthenticatorDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, ServerUpdatingAuthenticatorPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ServerUpdatingAuthenticatorPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ServerUpdatingAuthenticatorPrxHelper result = new ServerUpdatingAuthenticatorPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    /// <summary>
    /// Per-server interface.
    /// This includes all methods for configuring and altering
    /// the state of a single virtual server. You can retrieve a pointer to this interface
    /// from one of the methods in [Meta].
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerPrxHelper : Ice.ObjectPrxHelperBase, ServerPrx
    {
        #region Synchronous operations

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications about changes to users and channels.
        /// 
        /// </summary>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        
        public void addCallback(Murmur.ServerCallbackPrx cb)
        {
            addCallback(cb, null, false);
        }

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications about changes to users and channels.
        /// 
        /// </summary>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            addCallback(cb, context__, true);
        }

        private void addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("addCallback");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.addCallback(cb, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Add a new channel.
        /// </summary>
        /// <param name="name">Name of new channel.
        /// </param>
        /// <param name="parent">Channel ID of parent channel. See [Channel::id].
        /// </param>
        /// <returns>ID of newly created channel.</returns>
        
        public int addChannel(string name, int parent)
        {
            return addChannel(name, parent, null, false);
        }

        /// <summary>
        /// Add a new channel.
        /// </summary>
        /// <param name="name">Name of new channel.
        /// </param>
        /// <param name="parent">Channel ID of parent channel. See [Channel::id].
        /// </param>
        /// <returns>ID of newly created channel.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return addChannel(name, parent, context__, true);
        }

        private int addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("addChannel");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.addChannel(name, parent, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Add a context callback.
        /// This is done per user, and will add a context menu action for the user.
        /// 
        /// </summary>
        /// <param name="session">Session of user which should receive context entry.
        /// </param>
        /// <param name="action">Action string, a unique name to associate with the action.
        /// </param>
        /// <param name="text">Name of action shown to user.
        /// </param>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        /// <param name="ctx">Context this should be used in. Needs to be one or a combination of [ContextServer], [ContextChannel] and [ContextUser].
        /// </param>
        
        public void addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx)
        {
            addContextCallback(session, action, text, cb, ctx, null, false);
        }

        /// <summary>
        /// Add a context callback.
        /// This is done per user, and will add a context menu action for the user.
        /// 
        /// </summary>
        /// <param name="session">Session of user which should receive context entry.
        /// </param>
        /// <param name="action">Action string, a unique name to associate with the action.
        /// </param>
        /// <param name="text">Name of action shown to user.
        /// </param>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        /// <param name="ctx">Context this should be used in. Needs to be one or a combination of [ContextServer], [ContextChannel] and [ContextUser].
        /// </param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            addContextCallback(session, action, text, cb, ctx, context__, true);
        }

        private void addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("addContextCallback");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.addContextCallback(session, action, text, cb, ctx, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Temporarily add a user to a group on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to add to.</param>
        
        public void addUserToGroup(int channelid, int session, string group)
        {
            addUserToGroup(channelid, session, group, null, false);
        }

        /// <summary>
        /// Temporarily add a user to a group on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to add to.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            addUserToGroup(channelid, session, group, context__, true);
        }

        private void addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("addUserToGroup");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.addUserToGroup(channelid, session, group, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Delete server and all it's configuration.
        /// </summary>
        
        public void delete()
        {
            delete(null, false);
        }

        /// <summary>
        /// Delete server and all it's configuration.
        /// </summary>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void delete(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            delete(context__, true);
        }

        private void delete(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("delete");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.delete(context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Retrieve ACLs and Groups on a channel.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        /// <param name="acls">List of ACLs on the channel. This will include inherited ACLs.
        /// </param>
        /// <param name="groups">List of groups on the channel. This will include inherited groups.
        /// </param>
        /// <param name="inherit">Does this channel inherit ACLs from the parent channel?</param>
        
        public void getACL(int channelid, out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit)
        {
            getACL(channelid, out acls, out groups, out inherit, null, false);
        }

        /// <summary>
        /// Retrieve ACLs and Groups on a channel.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        /// <param name="acls">List of ACLs on the channel. This will include inherited ACLs.
        /// </param>
        /// <param name="groups">List of groups on the channel. This will include inherited groups.
        /// </param>
        /// <param name="inherit">Does this channel inherit ACLs from the parent channel?</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void getACL(int channelid, out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            getACL(channelid, out acls, out groups, out inherit, context__, true);
        }

        private void getACL(int channelid, out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getACL");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.getACL(channelid, out acls, out groups, out inherit, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Retrieve all configuration items.
        /// </summary>
        /// <returns>All configured values. If a value isn't set here, the value from [Meta::getDefaultConf] is used.</returns>
        
        public _System.Collections.Generic.Dictionary<string, string> getAllConf()
        {
            return getAllConf(null, false);
        }

        /// <summary>
        /// Retrieve all configuration items.
        /// </summary>
        /// <returns>All configured values. If a value isn't set here, the value from [Meta::getDefaultConf] is used.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public _System.Collections.Generic.Dictionary<string, string> getAllConf(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getAllConf(context__, true);
        }

        private _System.Collections.Generic.Dictionary<string, string> getAllConf(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getAllConf");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getAllConf(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch all current IP bans on the server.
        /// </summary>
        /// <returns>List of bans.</returns>
        
        public Murmur.Ban[] getBans()
        {
            return getBans(null, false);
        }

        /// <summary>
        /// Fetch all current IP bans on the server.
        /// </summary>
        /// <returns>List of bans.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public Murmur.Ban[] getBans(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getBans(context__, true);
        }

        private Murmur.Ban[] getBans(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getBans");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getBans(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch certificate of user.
        /// This returns the complete certificate chain of a user.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <returns>Certificate list of user.</returns>
        
        public byte[][] getCertificateList(int session)
        {
            return getCertificateList(session, null, false);
        }

        /// <summary>
        /// Fetch certificate of user.
        /// This returns the complete certificate chain of a user.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <returns>Certificate list of user.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public byte[][] getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getCertificateList(session, context__, true);
        }

        private byte[][] getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getCertificateList");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getCertificateList(session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Get state of single channel.
        /// </summary>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        /// <returns>State of channel.
        /// </returns>
        
        public Murmur.Channel getChannelState(int channelid)
        {
            return getChannelState(channelid, null, false);
        }

        /// <summary>
        /// Get state of single channel.
        /// </summary>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        /// <returns>State of channel.
        /// </returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public Murmur.Channel getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getChannelState(channelid, context__, true);
        }

        private Murmur.Channel getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getChannelState");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getChannelState(channelid, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch all channels.
        /// This returns all defined channels on the server. The root channel is always channel 0.
        /// </summary>
        /// <returns>List of defined channels.
        /// </returns>
        
        public _System.Collections.Generic.Dictionary<int, Murmur.Channel> getChannels()
        {
            return getChannels(null, false);
        }

        /// <summary>
        /// Fetch all channels.
        /// This returns all defined channels on the server. The root channel is always channel 0.
        /// </summary>
        /// <returns>List of defined channels.
        /// </returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public _System.Collections.Generic.Dictionary<int, Murmur.Channel> getChannels(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getChannels(context__, true);
        }

        private _System.Collections.Generic.Dictionary<int, Murmur.Channel> getChannels(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getChannels");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getChannels(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Retrieve configuration item.
        /// </summary>
        /// <param name="key">Configuration key.
        /// </param>
        /// <returns>Configuration value. If this is empty, see [Meta::getDefaultConf]</returns>
        
        public string getConf(string key)
        {
            return getConf(key, null, false);
        }

        /// <summary>
        /// Retrieve configuration item.
        /// </summary>
        /// <param name="key">Configuration key.
        /// </param>
        /// <returns>Configuration value. If this is empty, see [Meta::getDefaultConf]</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public string getConf(string key, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getConf(key, context__, true);
        }

        private string getConf(string key, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getConf");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getConf(key, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch log entries.
        /// </summary>
        /// <param name="first">Lowest numbered entry to fetch. 0 is the most recent item.
        /// </param>
        /// <param name="last">Last entry to fetch.
        /// </param>
        /// <returns>List of log entries.</returns>
        
        public Murmur.LogEntry[] getLog(int first, int last)
        {
            return getLog(first, last, null, false);
        }

        /// <summary>
        /// Fetch log entries.
        /// </summary>
        /// <param name="first">Lowest numbered entry to fetch. 0 is the most recent item.
        /// </param>
        /// <param name="last">Last entry to fetch.
        /// </param>
        /// <returns>List of log entries.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public Murmur.LogEntry[] getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getLog(first, last, context__, true);
        }

        private Murmur.LogEntry[] getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getLog");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getLog(first, last, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch a group of registered users.
        /// </summary>
        /// <param name="filter">Substring of user name. If blank, will retrieve all registered users.
        /// </param>
        /// <returns>List of registration records.</returns>
        
        public _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter)
        {
            return getRegisteredUsers(filter, null, false);
        }

        /// <summary>
        /// Fetch a group of registered users.
        /// </summary>
        /// <param name="filter">Substring of user name. If blank, will retrieve all registered users.
        /// </param>
        /// <returns>List of registration records.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getRegisteredUsers(filter, context__, true);
        }

        private _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getRegisteredUsers");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getRegisteredUsers(filter, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch registration for a single user.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <returns>Registration record.</returns>
        
        public _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> getRegistration(int userid)
        {
            return getRegistration(userid, null, false);
        }

        /// <summary>
        /// Fetch registration for a single user.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <returns>Registration record.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getRegistration(userid, context__, true);
        }

        private _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getRegistration");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getRegistration(userid, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Get state of a single connected user.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <returns>State of connected user.
        /// </returns>
        
        public Murmur.User getState(int session)
        {
            return getState(session, null, false);
        }

        /// <summary>
        /// Get state of a single connected user.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <returns>State of connected user.
        /// </returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public Murmur.User getState(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getState(session, context__, true);
        }

        private Murmur.User getState(int session, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getState");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getState(session, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch user texture.
        /// Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <returns>Custom texture associated with user or an empty texture.</returns>
        
        public byte[] getTexture(int userid)
        {
            return getTexture(userid, null, false);
        }

        /// <summary>
        /// Fetch user texture.
        /// Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <returns>Custom texture associated with user or an empty texture.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public byte[] getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getTexture(userid, context__, true);
        }

        private byte[] getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getTexture");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getTexture(userid, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch all channels and connected users as a tree.
        /// This retrieves an easy-to-use representation of the server
        /// as a tree. This is primarily used for viewing the state of the server on a webpage.
        /// </summary>
        /// <returns>Recursive tree of all channels and connected users.</returns>
        
        public Murmur.Tree getTree()
        {
            return getTree(null, false);
        }

        /// <summary>
        /// Fetch all channels and connected users as a tree.
        /// This retrieves an easy-to-use representation of the server
        /// as a tree. This is primarily used for viewing the state of the server on a webpage.
        /// </summary>
        /// <returns>Recursive tree of all channels and connected users.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public Murmur.Tree getTree(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getTree(context__, true);
        }

        private Murmur.Tree getTree(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getTree");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getTree(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Get virtual server uptime.
        /// </summary>
        /// <returns>Uptime of the virtual server in seconds</returns>
        
        public int getUptime()
        {
            return getUptime(null, false);
        }

        /// <summary>
        /// Get virtual server uptime.
        /// </summary>
        /// <returns>Uptime of the virtual server in seconds</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int getUptime(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getUptime(context__, true);
        }

        private int getUptime(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getUptime");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getUptime(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Map a list of user names to a matching id.
        /// </summary>
        /// <param name="List">of names.
        /// </param>
        /// @reuturn List of matching ids, with -1 representing invalid or unknown user names.
        
        public _System.Collections.Generic.Dictionary<string, int> getUserIds(string[] names)
        {
            return getUserIds(names, null, false);
        }

        /// <summary>
        /// Map a list of user names to a matching id.
        /// </summary>
        /// <param name="List">of names.
        /// </param>
        /// @reuturn List of matching ids, with -1 representing invalid or unknown user names.
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public _System.Collections.Generic.Dictionary<string, int> getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getUserIds(names, context__, true);
        }

        private _System.Collections.Generic.Dictionary<string, int> getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getUserIds");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getUserIds(names, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Map a list of [User::userid] to a matching name.
        /// </summary>
        /// <param name="List">of ids.
        /// </param>
        /// <returns>Matching list of names, with an empty string representing invalid or unknown ids.</returns>
        
        public _System.Collections.Generic.Dictionary<int, string> getUserNames(int[] ids)
        {
            return getUserNames(ids, null, false);
        }

        /// <summary>
        /// Map a list of [User::userid] to a matching name.
        /// </summary>
        /// <param name="List">of ids.
        /// </param>
        /// <returns>Matching list of names, with an empty string representing invalid or unknown ids.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public _System.Collections.Generic.Dictionary<int, string> getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getUserNames(ids, context__, true);
        }

        private _System.Collections.Generic.Dictionary<int, string> getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getUserNames");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getUserNames(ids, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch all users.
        /// This returns all currently connected users on the server.
        /// </summary>
        /// <returns>List of connected users.
        /// </returns>
        
        public _System.Collections.Generic.Dictionary<int, Murmur.User> getUsers()
        {
            return getUsers(null, false);
        }

        /// <summary>
        /// Fetch all users.
        /// This returns all currently connected users on the server.
        /// </summary>
        /// <returns>List of connected users.
        /// </returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public _System.Collections.Generic.Dictionary<int, Murmur.User> getUsers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getUsers(context__, true);
        }

        private _System.Collections.Generic.Dictionary<int, Murmur.User> getUsers(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getUsers");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.getUsers(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Check if user is permitted to perform action.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        /// <param name="perm">Permission bits to check.
        /// </param>
        /// <returns>true if any of the permissions in perm were set for the user.</returns>
        
        public bool hasPermission(int session, int channelid, int perm)
        {
            return hasPermission(session, channelid, perm, null, false);
        }

        /// <summary>
        /// Check if user is permitted to perform action.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        /// <param name="perm">Permission bits to check.
        /// </param>
        /// <returns>true if any of the permissions in perm were set for the user.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public bool hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return hasPermission(session, channelid, perm, context__, true);
        }

        private bool hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("hasPermission");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.hasPermission(session, channelid, perm, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch the server id.
        /// </summary>
        /// <returns>Unique server id.</returns>
        
        public int id()
        {
            return id(null, false);
        }

        /// <summary>
        /// Fetch the server id.
        /// </summary>
        /// <returns>Unique server id.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int id(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return id(context__, true);
        }

        private int id(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("id");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.id(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Shows if the server currently running (accepting users).
        /// </summary>
        /// <returns>Run-state of server.</returns>
        
        public bool isRunning()
        {
            return isRunning(null, false);
        }

        /// <summary>
        /// Shows if the server currently running (accepting users).
        /// </summary>
        /// <returns>Run-state of server.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public bool isRunning(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return isRunning(context__, true);
        }

        private bool isRunning(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("isRunning");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.isRunning(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Kick a user.
        /// The user is not banned, and is free to rejoin the server.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="reason">Text message to show when user is kicked.</param>
        
        public void kickUser(int session, string reason)
        {
            kickUser(session, reason, null, false);
        }

        /// <summary>
        /// Kick a user.
        /// The user is not banned, and is free to rejoin the server.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="reason">Text message to show when user is kicked.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            kickUser(session, reason, context__, true);
        }

        private void kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("kickUser");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.kickUser(session, reason, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Redirect whisper targets for user.
        /// If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
        /// To remove a redirect pass an empty target string. This is intended for context groups.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="source">Group name to redirect from.
        /// </param>
        /// <param name="target">Group name to redirect to.</param>
        
        public void redirectWhisperGroup(int session, string source, string target)
        {
            redirectWhisperGroup(session, source, target, null, false);
        }

        /// <summary>
        /// Redirect whisper targets for user.
        /// If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
        /// To remove a redirect pass an empty target string. This is intended for context groups.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="source">Group name to redirect from.
        /// </param>
        /// <param name="target">Group name to redirect to.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            redirectWhisperGroup(session, source, target, context__, true);
        }

        private void redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("redirectWhisperGroup");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.redirectWhisperGroup(session, source, target, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="info">Information about new user. Must include at least "name".
        /// </param>
        /// <returns>The ID of the user. See [RegisteredUser::userid].</returns>
        
        public int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return registerUser(info, null, false);
        }

        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="info">Information about new user. Must include at least "name".
        /// </param>
        /// <returns>The ID of the user. See [RegisteredUser::userid].</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return registerUser(info, context__, true);
        }

        private int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("registerUser");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.registerUser(info, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb">Callback interface to be removed.
        /// </param>
        
        public void removeCallback(Murmur.ServerCallbackPrx cb)
        {
            removeCallback(cb, null, false);
        }

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb">Callback interface to be removed.
        /// </param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            removeCallback(cb, context__, true);
        }

        private void removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("removeCallback");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.removeCallback(cb, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Remove a channel and all its subchannels.
        /// </summary>
        /// <param name="channelid">ID of Channel. See [Channel::id].</param>
        
        public void removeChannel(int channelid)
        {
            removeChannel(channelid, null, false);
        }

        /// <summary>
        /// Remove a channel and all its subchannels.
        /// </summary>
        /// <param name="channelid">ID of Channel. See [Channel::id].</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            removeChannel(channelid, context__, true);
        }

        private void removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("removeChannel");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.removeChannel(channelid, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb">Callback interface to be removed. This callback will be removed from all from all users.
        /// </param>
        
        public void removeContextCallback(Murmur.ServerContextCallbackPrx cb)
        {
            removeContextCallback(cb, null, false);
        }

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb">Callback interface to be removed. This callback will be removed from all from all users.
        /// </param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            removeContextCallback(cb, context__, true);
        }

        private void removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("removeContextCallback");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.removeContextCallback(cb, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Remove a user from a temporary group membership on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to remove from.</param>
        
        public void removeUserFromGroup(int channelid, int session, string group)
        {
            removeUserFromGroup(channelid, session, group, null, false);
        }

        /// <summary>
        /// Remove a user from a temporary group membership on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to remove from.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            removeUserFromGroup(channelid, session, group, context__, true);
        }

        private void removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("removeUserFromGroup");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.removeUserFromGroup(channelid, session, group, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Send text message to a single user.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        
        public void sendMessage(int session, string text)
        {
            sendMessage(session, text, null, false);
        }

        /// <summary>
        /// Send text message to a single user.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            sendMessage(session, text, context__, true);
        }

        private void sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("sendMessage");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.sendMessage(session, text, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Send text message to channel or a tree of channels.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to send to. See [Channel::id].
        /// </param>
        /// <param name="tree">If true, the message will be sent to the channel and all its subchannels.
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        
        public void sendMessageChannel(int channelid, bool tree, string text)
        {
            sendMessageChannel(channelid, tree, text, null, false);
        }

        /// <summary>
        /// Send text message to channel or a tree of channels.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to send to. See [Channel::id].
        /// </param>
        /// <param name="tree">If true, the message will be sent to the channel and all its subchannels.
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            sendMessageChannel(channelid, tree, text, context__, true);
        }

        private void sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("sendMessageChannel");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.sendMessageChannel(channelid, tree, text, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set ACLs and Groups on a channel.
        /// Note that this will replace all existing ACLs and groups on the channel.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        /// <param name="acls">List of ACLs on the channel.
        /// </param>
        /// <param name="groups">List of groups on the channel.
        /// </param>
        /// <param name="inherit">Should this channel inherit ACLs from the parent channel?</param>
        
        public void setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit)
        {
            setACL(channelid, acls, groups, inherit, null, false);
        }

        /// <summary>
        /// Set ACLs and Groups on a channel.
        /// Note that this will replace all existing ACLs and groups on the channel.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        /// <param name="acls">List of ACLs on the channel.
        /// </param>
        /// <param name="groups">List of groups on the channel.
        /// </param>
        /// <param name="inherit">Should this channel inherit ACLs from the parent channel?</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setACL(channelid, acls, groups, inherit, context__, true);
        }

        private void setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("setACL");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.setACL(channelid, acls, groups, inherit, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set external authenticator.
        /// If set, all authentications from clients are forwarded to this
        /// proxy.
        /// 
        /// </summary>
        /// <param name="auth">Authenticator object to perform subsequent authentications.</param>
        
        public void setAuthenticator(Murmur.ServerAuthenticatorPrx auth)
        {
            setAuthenticator(auth, null, false);
        }

        /// <summary>
        /// Set external authenticator.
        /// If set, all authentications from clients are forwarded to this
        /// proxy.
        /// 
        /// </summary>
        /// <param name="auth">Authenticator object to perform subsequent authentications.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setAuthenticator(auth, context__, true);
        }

        private void setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("setAuthenticator");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.setAuthenticator(auth, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set all current IP bans on the server.
        /// This will replace any bans already present, so if you want to add a ban, be sure to call [getBans] and then
        /// append to the returned list before calling this method.
        /// </summary>
        /// <param name="bans">List of bans.</param>
        
        public void setBans(Murmur.Ban[] bans)
        {
            setBans(bans, null, false);
        }

        /// <summary>
        /// Set all current IP bans on the server.
        /// This will replace any bans already present, so if you want to add a ban, be sure to call [getBans] and then
        /// append to the returned list before calling this method.
        /// </summary>
        /// <param name="bans">List of bans.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setBans(bans, context__, true);
        }

        private void setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("setBans");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.setBans(bans, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set state of a single channel.
        /// You can use this to move or relink channels.
        /// </summary>
        /// <param name="state">Channel state to set.
        /// </param>
        
        public void setChannelState(Murmur.Channel state)
        {
            setChannelState(state, null, false);
        }

        /// <summary>
        /// Set state of a single channel.
        /// You can use this to move or relink channels.
        /// </summary>
        /// <param name="state">Channel state to set.
        /// </param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setChannelState(state, context__, true);
        }

        private void setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("setChannelState");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.setChannelState(state, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set a configuration item.
        /// </summary>
        /// <param name="key">Configuration key.
        /// </param>
        /// <param name="value">Configuration value.</param>
        
        public void setConf(string key, string value)
        {
            setConf(key, value, null, false);
        }

        /// <summary>
        /// Set a configuration item.
        /// </summary>
        /// <param name="key">Configuration key.
        /// </param>
        /// <param name="value">Configuration value.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setConf(key, value, context__, true);
        }

        private void setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.setConf(key, value, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set user state.
        /// You can use this to move, mute and deafen users.
        /// </summary>
        /// <param name="state">User state to set.
        /// </param>
        
        public void setState(Murmur.User state)
        {
            setState(state, null, false);
        }

        /// <summary>
        /// Set user state.
        /// You can use this to move, mute and deafen users.
        /// </summary>
        /// <param name="state">User state to set.
        /// </param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setState(state, context__, true);
        }

        private void setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("setState");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.setState(state, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set superuser password.
        /// This is just a convenience for using [updateRegistration] on user id 0.
        /// </summary>
        /// <param name="pw">Password.</param>
        
        public void setSuperuserPassword(string pw)
        {
            setSuperuserPassword(pw, null, false);
        }

        /// <summary>
        /// Set superuser password.
        /// This is just a convenience for using [updateRegistration] on user id 0.
        /// </summary>
        /// <param name="pw">Password.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setSuperuserPassword(pw, context__, true);
        }

        private void setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.setSuperuserPassword(pw, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Set user texture.
        /// The texture is a 600x60 32-bit BGRA raw texture, optionally zlib compress()ed.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <param name="tex">Texture to set for the user, or an empty texture to remove the existing texture.</param>
        
        public void setTexture(int userid, byte[] tex)
        {
            setTexture(userid, tex, null, false);
        }

        /// <summary>
        /// Set user texture.
        /// The texture is a 600x60 32-bit BGRA raw texture, optionally zlib compress()ed.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <param name="tex">Texture to set for the user, or an empty texture to remove the existing texture.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            setTexture(userid, tex, context__, true);
        }

        private void setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("setTexture");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.setTexture(userid, tex, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Start server.
        /// </summary>
        
        public void start()
        {
            start(null, false);
        }

        /// <summary>
        /// Start server.
        /// </summary>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void start(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            start(context__, true);
        }

        private void start(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("start");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.start(context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Stop server.
        /// </summary>
        
        public void stop()
        {
            stop(null, false);
        }

        /// <summary>
        /// Stop server.
        /// </summary>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void stop(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            stop(context__, true);
        }

        private void stop(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("stop");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.stop(context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Remove a user registration.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].</param>
        
        public void unregisterUser(int userid)
        {
            unregisterUser(userid, null, false);
        }

        /// <summary>
        /// Remove a user registration.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            unregisterUser(userid, context__, true);
        }

        private void unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("unregisterUser");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.unregisterUser(userid, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Update the registration for a user.
        /// You can use this to set the email or password of a user,
        /// and can also use it to change the user's name.
        /// </summary>
        /// <param name="registration">Updated registration record.</param>
        
        public void updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            updateRegistration(userid, info, null, false);
        }

        /// <summary>
        /// Update the registration for a user.
        /// You can use this to set the email or password of a user,
        /// and can also use it to change the user's name.
        /// </summary>
        /// <param name="registration">Updated registration record.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            updateRegistration(userid, info, context__, true);
        }

        private void updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("updateRegistration");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.updateRegistration(userid, info, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Verify the password of a user.
        /// You can use this to verify a user's credentials.
        /// </summary>
        /// <param name="name">User name. See [RegisteredUser::name].
        /// </param>
        /// <param name="pw">User password.
        /// </param>
        /// <returns>User ID of registered user (See [RegisteredUser::userid]), -1 for failed authentication or -2 for unknown usernames.</returns>
        
        public int verifyPassword(string name, string pw)
        {
            return verifyPassword(name, pw, null, false);
        }

        /// <summary>
        /// Verify the password of a user.
        /// You can use this to verify a user's credentials.
        /// </summary>
        /// <param name="name">User name. See [RegisteredUser::name].
        /// </param>
        /// <param name="pw">User password.
        /// </param>
        /// <returns>User ID of registered user (See [RegisteredUser::userid]), -1 for failed authentication or -2 for unknown usernames.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return verifyPassword(name, pw, context__, true);
        }

        private int verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("verifyPassword");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.verifyPassword(name, pw, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Murmur.Callback_Server_addCallback> begin_addCallback(Murmur.ServerCallbackPrx cb)
        {
            return begin_addCallback(cb, null, false, null, null);
        }

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications about changes to users and channels.
        /// </summary>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_addCallback> begin_addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_addCallback(cb, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_addCallback(Murmur.ServerCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addCallback(cb, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addCallback(cb, ctx__, true, cb__, cookie__);
        }

        private const string __addCallback_name = "addCallback";

        public void end_addCallback(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __addCallback_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidCallbackException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_addCallback> begin_addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__addCallback_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_addCallback> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_addCallback>(this, __addCallback_name, addCallback_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__addCallback_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.ServerCallbackPrxHelper.write__(os__, cb);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void addCallback_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_addCallback cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_addCallback(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_addChannel> begin_addChannel(string name, int parent)
        {
            return begin_addChannel(name, parent, null, false, null, null);
        }

        /// <summary>
        /// Add a new channel.
        /// </summary>
        /// <param name="name">Name of new channel.
        /// </param>
        /// <param name="parent">Channel ID of parent channel. See [Channel::id].
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_addChannel> begin_addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_addChannel(name, parent, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_addChannel(string name, int parent, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addChannel(name, parent, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addChannel(name, parent, ctx__, true, cb__, cookie__);
        }

        private const string __addChannel_name = "addChannel";

        public int end_addChannel(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __addChannel_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_addChannel> begin_addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__addChannel_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_addChannel> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_addChannel>(this, __addChannel_name, addChannel_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__addChannel_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(name);
                os__.writeInt(parent);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void addChannel_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_addChannel cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_addChannel(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_addContextCallback> begin_addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx)
        {
            return begin_addContextCallback(session, action, text, cb, ctx, null, false, null, null);
        }

        /// <summary>
        /// Add a context callback.
        /// This is done per user, and will add a context menu action for the user.
        /// </summary>
        /// <param name="session">Session of user which should receive context entry.
        /// </param>
        /// <param name="action">Action string, a unique name to associate with the action.
        /// </param>
        /// <param name="text">Name of action shown to user.
        /// </param>
        /// <param name="cb">Callback interface which will receive notifications.
        /// </param>
        /// <param name="ctx">Context this should be used in. Needs to be one or a combination of [ContextServer], [ContextChannel] and [ContextUser].
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_addContextCallback> begin_addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_addContextCallback(session, action, text, cb, ctx, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addContextCallback(session, action, text, cb, ctx, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addContextCallback(session, action, text, cb, ctx, ctx__, true, cb__, cookie__);
        }

        private const string __addContextCallback_name = "addContextCallback";

        public void end_addContextCallback(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __addContextCallback_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidCallbackException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_addContextCallback> begin_addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__addContextCallback_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_addContextCallback> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_addContextCallback>(this, __addContextCallback_name, addContextCallback_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__addContextCallback_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(session);
                os__.writeString(action);
                os__.writeString(text);
                Murmur.ServerContextCallbackPrxHelper.write__(os__, cb);
                os__.writeInt(ctx);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void addContextCallback_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_addContextCallback cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_addContextCallback(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_addUserToGroup> begin_addUserToGroup(int channelid, int session, string group)
        {
            return begin_addUserToGroup(channelid, session, group, null, false, null, null);
        }

        /// <summary>
        /// Temporarily add a user to a group on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to add to.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_addUserToGroup> begin_addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_addUserToGroup(channelid, session, group, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_addUserToGroup(int channelid, int session, string group, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addUserToGroup(channelid, session, group, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addUserToGroup(channelid, session, group, ctx__, true, cb__, cookie__);
        }

        private const string __addUserToGroup_name = "addUserToGroup";

        public void end_addUserToGroup(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __addUserToGroup_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.InvalidSessionException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_addUserToGroup> begin_addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__addUserToGroup_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_addUserToGroup> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_addUserToGroup>(this, __addUserToGroup_name, addUserToGroup_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__addUserToGroup_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(channelid);
                os__.writeInt(session);
                os__.writeString(group);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void addUserToGroup_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_addUserToGroup cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_addUserToGroup(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_delete> begin_delete()
        {
            return begin_delete(null, false, null, null);
        }

        /// <summary>
        /// Delete server and all it's configuration.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_delete> begin_delete(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_delete(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_delete(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_delete(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_delete(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_delete(ctx__, true, cb__, cookie__);
        }

        private const string __delete_name = "delete";

        public void end_delete(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __delete_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_delete> begin_delete(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__delete_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_delete> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_delete>(this, __delete_name, delete_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__delete_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void delete_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_delete cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_delete(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getACL> begin_getACL(int channelid)
        {
            return begin_getACL(channelid, null, false, null, null);
        }

        /// <summary>
        /// Retrieve ACLs and Groups on a channel.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getACL> begin_getACL(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getACL(channelid, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getACL(int channelid, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getACL(channelid, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getACL(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getACL(channelid, ctx__, true, cb__, cookie__);
        }

        private const string __getACL_name = "getACL";

        public void end_getACL(out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getACL_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(16);
                acls = new Murmur.ACL[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    acls[ix__] = new Murmur.ACL();
                    acls[ix__].read__(is__);
                }
            }
            {
                int szx__ = is__.readAndCheckSeqSize(7);
                groups = new Murmur.Group[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    groups[ix__] = new Murmur.Group();
                    groups[ix__].read__(is__);
                }
            }
            inherit = is__.readBool();
            is__.endReadEncaps();
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getACL> begin_getACL(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getACL_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getACL> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getACL>(this, __getACL_name, getACL_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getACL_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(channelid);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getACL_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getACL cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.ACL[] acls;
            Murmur.Group[] groups;
            bool inherit;
            try
            {
                end_getACL(out acls, out groups, out inherit, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(acls, groups, inherit);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getAllConf> begin_getAllConf()
        {
            return begin_getAllConf(null, false, null, null);
        }

        /// <summary>
        /// Retrieve all configuration items.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getAllConf> begin_getAllConf(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getAllConf(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getAllConf(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAllConf(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getAllConf(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAllConf(ctx__, true, cb__, cookie__);
        }

        private const string __getAllConf_name = "getAllConf";

        public _System.Collections.Generic.Dictionary<string, string> end_getAllConf(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getAllConf_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.Dictionary<string, string> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.ConfigMapHelper.read(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getAllConf> begin_getAllConf(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getAllConf_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getAllConf> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getAllConf>(this, __getAllConf_name, getAllConf_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getAllConf_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getAllConf_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getAllConf cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<string, string> ret__;
            try
            {
                ret__ = end_getAllConf(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getBans> begin_getBans()
        {
            return begin_getBans(null, false, null, null);
        }

        /// <summary>
        /// Fetch all current IP bans on the server.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getBans> begin_getBans(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getBans(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getBans(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBans(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getBans(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBans(ctx__, true, cb__, cookie__);
        }

        private const string __getBans_name = "getBans";

        public Murmur.Ban[] end_getBans(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getBans_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Murmur.Ban[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(20);
                ret__ = new Murmur.Ban[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    ret__[ix__] = new Murmur.Ban();
                    ret__[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getBans> begin_getBans(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getBans_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getBans> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getBans>(this, __getBans_name, getBans_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getBans_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getBans_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getBans cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.Ban[] ret__;
            try
            {
                ret__ = end_getBans(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getCertificateList> begin_getCertificateList(int session)
        {
            return begin_getCertificateList(session, null, false, null, null);
        }

        /// <summary>
        /// Fetch certificate of user.
        /// This returns the complete certificate chain of a user.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getCertificateList> begin_getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getCertificateList(session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getCertificateList(int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getCertificateList(session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getCertificateList(session, ctx__, true, cb__, cookie__);
        }

        private const string __getCertificateList_name = "getCertificateList";

        public byte[][] end_getCertificateList(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getCertificateList_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidSessionException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            byte[][] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(1);
                ret__ = new byte[szx__][];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    ret__[ix__] = Murmur.CertificateDerHelper.read(is__);
                }
            }
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getCertificateList> begin_getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getCertificateList_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getCertificateList> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getCertificateList>(this, __getCertificateList_name, getCertificateList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getCertificateList_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getCertificateList_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getCertificateList cb__, Ice.ExceptionCallback excb__)
        {
            byte[][] ret__;
            try
            {
                ret__ = end_getCertificateList(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getChannelState> begin_getChannelState(int channelid)
        {
            return begin_getChannelState(channelid, null, false, null, null);
        }

        /// <summary>
        /// Get state of single channel.
        /// </summary>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getChannelState> begin_getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getChannelState(channelid, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getChannelState(int channelid, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getChannelState(channelid, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getChannelState(channelid, ctx__, true, cb__, cookie__);
        }

        private const string __getChannelState_name = "getChannelState";

        public Murmur.Channel end_getChannelState(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getChannelState_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Murmur.Channel ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = null;
            if(ret__ == null)
            {
                ret__ = new Murmur.Channel();
            }
            ret__.read__(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getChannelState> begin_getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getChannelState_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getChannelState> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getChannelState>(this, __getChannelState_name, getChannelState_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getChannelState_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(channelid);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getChannelState_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getChannelState cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.Channel ret__;
            try
            {
                ret__ = end_getChannelState(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getChannels> begin_getChannels()
        {
            return begin_getChannels(null, false, null, null);
        }

        /// <summary>
        /// Fetch all channels.
        /// This returns all defined channels on the server. The root channel is always channel 0.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getChannels> begin_getChannels(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getChannels(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getChannels(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getChannels(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getChannels(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getChannels(ctx__, true, cb__, cookie__);
        }

        private const string __getChannels_name = "getChannels";

        public _System.Collections.Generic.Dictionary<int, Murmur.Channel> end_getChannels(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getChannels_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.Dictionary<int, Murmur.Channel> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.ChannelMapHelper.read(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getChannels> begin_getChannels(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getChannels_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getChannels> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getChannels>(this, __getChannels_name, getChannels_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getChannels_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getChannels_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getChannels cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<int, Murmur.Channel> ret__;
            try
            {
                ret__ = end_getChannels(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getConf> begin_getConf(string key)
        {
            return begin_getConf(key, null, false, null, null);
        }

        /// <summary>
        /// Retrieve configuration item.
        /// </summary>
        /// <param name="key">Configuration key.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getConf> begin_getConf(string key, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getConf(key, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getConf(string key, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getConf(key, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getConf(string key, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getConf(key, ctx__, true, cb__, cookie__);
        }

        private const string __getConf_name = "getConf";

        public string end_getConf(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getConf_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getConf> begin_getConf(string key, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getConf_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getConf> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getConf>(this, __getConf_name, getConf_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getConf_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(key);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getConf_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getConf cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_getConf(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getLog> begin_getLog(int first, int last)
        {
            return begin_getLog(first, last, null, false, null, null);
        }

        /// <summary>
        /// Fetch log entries.
        /// </summary>
        /// <param name="first">Lowest numbered entry to fetch. 0 is the most recent item.
        /// </param>
        /// <param name="last">Last entry to fetch.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getLog> begin_getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getLog(first, last, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getLog(int first, int last, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getLog(first, last, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getLog(first, last, ctx__, true, cb__, cookie__);
        }

        private const string __getLog_name = "getLog";

        public Murmur.LogEntry[] end_getLog(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getLog_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Murmur.LogEntry[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(5);
                ret__ = new Murmur.LogEntry[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    ret__[ix__] = new Murmur.LogEntry();
                    ret__[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getLog> begin_getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getLog_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getLog> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getLog>(this, __getLog_name, getLog_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getLog_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(first);
                os__.writeInt(last);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getLog_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getLog cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.LogEntry[] ret__;
            try
            {
                ret__ = end_getLog(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getRegisteredUsers> begin_getRegisteredUsers(string filter)
        {
            return begin_getRegisteredUsers(filter, null, false, null, null);
        }

        /// <summary>
        /// Fetch a group of registered users.
        /// </summary>
        /// <param name="filter">Substring of user name. If blank, will retrieve all registered users.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getRegisteredUsers> begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getRegisteredUsers(filter, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getRegisteredUsers(string filter, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getRegisteredUsers(filter, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getRegisteredUsers(filter, ctx__, true, cb__, cookie__);
        }

        private const string __getRegisteredUsers_name = "getRegisteredUsers";

        public _System.Collections.Generic.Dictionary<int, string> end_getRegisteredUsers(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getRegisteredUsers_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.Dictionary<int, string> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.NameMapHelper.read(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getRegisteredUsers> begin_getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getRegisteredUsers_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getRegisteredUsers> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getRegisteredUsers>(this, __getRegisteredUsers_name, getRegisteredUsers_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getRegisteredUsers_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(filter);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getRegisteredUsers_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getRegisteredUsers cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<int, string> ret__;
            try
            {
                ret__ = end_getRegisteredUsers(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getRegistration> begin_getRegistration(int userid)
        {
            return begin_getRegistration(userid, null, false, null, null);
        }

        /// <summary>
        /// Fetch registration for a single user.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getRegistration> begin_getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getRegistration(userid, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getRegistration(int userid, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getRegistration(userid, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getRegistration(userid, ctx__, true, cb__, cookie__);
        }

        private const string __getRegistration_name = "getRegistration";

        public _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> end_getRegistration(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getRegistration_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidUserException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.UserInfoMapHelper.read(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getRegistration> begin_getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getRegistration_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getRegistration> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getRegistration>(this, __getRegistration_name, getRegistration_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getRegistration_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(userid);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getRegistration_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getRegistration cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> ret__;
            try
            {
                ret__ = end_getRegistration(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getState> begin_getState(int session)
        {
            return begin_getState(session, null, false, null, null);
        }

        /// <summary>
        /// Get state of a single connected user.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getState> begin_getState(int session, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getState(session, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getState(int session, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getState(session, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getState(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getState(session, ctx__, true, cb__, cookie__);
        }

        private const string __getState_name = "getState";

        public Murmur.User end_getState(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getState_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidSessionException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Murmur.User ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = null;
            if(ret__ == null)
            {
                ret__ = new Murmur.User();
            }
            ret__.read__(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getState> begin_getState(int session, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getState_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getState> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getState>(this, __getState_name, getState_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getState_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(session);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getState_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getState cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.User ret__;
            try
            {
                ret__ = end_getState(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getTexture> begin_getTexture(int userid)
        {
            return begin_getTexture(userid, null, false, null, null);
        }

        /// <summary>
        /// Fetch user texture.
        /// Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getTexture> begin_getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getTexture(userid, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getTexture(int userid, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getTexture(userid, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getTexture(userid, ctx__, true, cb__, cookie__);
        }

        private const string __getTexture_name = "getTexture";

        public byte[] end_getTexture(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getTexture_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidUserException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            byte[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readByteSeq();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getTexture> begin_getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getTexture_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getTexture> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getTexture>(this, __getTexture_name, getTexture_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getTexture_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(userid);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getTexture_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getTexture cb__, Ice.ExceptionCallback excb__)
        {
            byte[] ret__;
            try
            {
                ret__ = end_getTexture(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getTree> begin_getTree()
        {
            return begin_getTree(null, false, null, null);
        }

        /// <summary>
        /// Fetch all channels and connected users as a tree.
        /// This retrieves an easy-to-use representation of the server
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getTree> begin_getTree(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getTree(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getTree(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getTree(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getTree(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getTree(ctx__, true, cb__, cookie__);
        }

        private const string __getTree_name = "getTree";

        public Murmur.Tree end_getTree(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getTree_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Murmur.Tree ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            IceInternal.ParamPatcher<Murmur.Tree>ret___PP = new IceInternal.ParamPatcher<Murmur.Tree>("::Murmur::Tree");
            is__.readObject(ret___PP);
            is__.readPendingObjects();
            is__.endReadEncaps();
            ret__ = (Murmur.Tree)ret___PP.value;
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getTree> begin_getTree(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getTree_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getTree> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getTree>(this, __getTree_name, getTree_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getTree_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getTree_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getTree cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.Tree ret__;
            try
            {
                ret__ = end_getTree(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getUptime> begin_getUptime()
        {
            return begin_getUptime(null, false, null, null);
        }

        /// <summary>
        /// Get virtual server uptime.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getUptime> begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getUptime(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getUptime(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUptime(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUptime(ctx__, true, cb__, cookie__);
        }

        private const string __getUptime_name = "getUptime";

        public int end_getUptime(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getUptime_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getUptime> begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getUptime_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getUptime> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getUptime>(this, __getUptime_name, getUptime_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getUptime_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getUptime_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getUptime cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_getUptime(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getUserIds> begin_getUserIds(string[] names)
        {
            return begin_getUserIds(names, null, false, null, null);
        }

        /// <summary>
        /// Map a list of user names to a matching id.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getUserIds> begin_getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getUserIds(names, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getUserIds(string[] names, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUserIds(names, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUserIds(names, ctx__, true, cb__, cookie__);
        }

        private const string __getUserIds_name = "getUserIds";

        public _System.Collections.Generic.Dictionary<string, int> end_getUserIds(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getUserIds_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.Dictionary<string, int> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.IdMapHelper.read(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getUserIds> begin_getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getUserIds_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getUserIds> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getUserIds>(this, __getUserIds_name, getUserIds_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getUserIds_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeStringSeq(names);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getUserIds_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getUserIds cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<string, int> ret__;
            try
            {
                ret__ = end_getUserIds(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getUserNames> begin_getUserNames(int[] ids)
        {
            return begin_getUserNames(ids, null, false, null, null);
        }

        /// <summary>
        /// Map a list of [User::userid] to a matching name.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getUserNames> begin_getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getUserNames(ids, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getUserNames(int[] ids, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUserNames(ids, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUserNames(ids, ctx__, true, cb__, cookie__);
        }

        private const string __getUserNames_name = "getUserNames";

        public _System.Collections.Generic.Dictionary<int, string> end_getUserNames(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getUserNames_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.Dictionary<int, string> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.NameMapHelper.read(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getUserNames> begin_getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getUserNames_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getUserNames> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getUserNames>(this, __getUserNames_name, getUserNames_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getUserNames_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeIntSeq(ids);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getUserNames_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getUserNames cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<int, string> ret__;
            try
            {
                ret__ = end_getUserNames(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_getUsers> begin_getUsers()
        {
            return begin_getUsers(null, false, null, null);
        }

        /// <summary>
        /// Fetch all users.
        /// This returns all currently connected users on the server.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_getUsers> begin_getUsers(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getUsers(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getUsers(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUsers(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getUsers(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUsers(ctx__, true, cb__, cookie__);
        }

        private const string __getUsers_name = "getUsers";

        public _System.Collections.Generic.Dictionary<int, Murmur.User> end_getUsers(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getUsers_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.Dictionary<int, Murmur.User> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.UserMapHelper.read(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_getUsers> begin_getUsers(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getUsers_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getUsers> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_getUsers>(this, __getUsers_name, getUsers_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getUsers_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getUsers_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_getUsers cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<int, Murmur.User> ret__;
            try
            {
                ret__ = end_getUsers(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_hasPermission> begin_hasPermission(int session, int channelid, int perm)
        {
            return begin_hasPermission(session, channelid, perm, null, false, null, null);
        }

        /// <summary>
        /// Check if user is permitted to perform action.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="channelid">ID of Channel. See [Channel::id].
        /// </param>
        /// <param name="perm">Permission bits to check.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_hasPermission> begin_hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_hasPermission(session, channelid, perm, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_hasPermission(session, channelid, perm, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_hasPermission(session, channelid, perm, ctx__, true, cb__, cookie__);
        }

        private const string __hasPermission_name = "hasPermission";

        public bool end_hasPermission(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __hasPermission_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.InvalidSessionException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_hasPermission> begin_hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__hasPermission_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_hasPermission> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_hasPermission>(this, __hasPermission_name, hasPermission_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__hasPermission_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(session);
                os__.writeInt(channelid);
                os__.writeInt(perm);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void hasPermission_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_hasPermission cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_hasPermission(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_id> begin_id()
        {
            return begin_id(null, false, null, null);
        }

        /// <summary>
        /// Fetch the server id.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_id> begin_id(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_id(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_id(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_id(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_id(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_id(ctx__, true, cb__, cookie__);
        }

        private const string __id_name = "id";

        public int end_id(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __id_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_id> begin_id(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__id_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_id> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_id>(this, __id_name, id_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__id_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void id_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_id cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_id(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_isRunning> begin_isRunning()
        {
            return begin_isRunning(null, false, null, null);
        }

        /// <summary>
        /// Shows if the server currently running (accepting users).
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_isRunning> begin_isRunning(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_isRunning(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_isRunning(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_isRunning(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_isRunning(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_isRunning(ctx__, true, cb__, cookie__);
        }

        private const string __isRunning_name = "isRunning";

        public bool end_isRunning(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __isRunning_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_isRunning> begin_isRunning(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__isRunning_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_isRunning> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_isRunning>(this, __isRunning_name, isRunning_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__isRunning_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void isRunning_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_isRunning cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_isRunning(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_kickUser> begin_kickUser(int session, string reason)
        {
            return begin_kickUser(session, reason, null, false, null, null);
        }

        /// <summary>
        /// Kick a user.
        /// The user is not banned, and is free to rejoin the server.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="reason">Text message to show when user is kicked.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_kickUser> begin_kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_kickUser(session, reason, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_kickUser(int session, string reason, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_kickUser(session, reason, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_kickUser(session, reason, ctx__, true, cb__, cookie__);
        }

        private const string __kickUser_name = "kickUser";

        public void end_kickUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __kickUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidSessionException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_kickUser> begin_kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__kickUser_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_kickUser> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_kickUser>(this, __kickUser_name, kickUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__kickUser_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(session);
                os__.writeString(reason);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void kickUser_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_kickUser cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_kickUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_redirectWhisperGroup> begin_redirectWhisperGroup(int session, string source, string target)
        {
            return begin_redirectWhisperGroup(session, source, target, null, false, null, null);
        }

        /// <summary>
        /// Redirect whisper targets for user.
        /// If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="source">Group name to redirect from.
        /// </param>
        /// <param name="target">Group name to redirect to.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_redirectWhisperGroup> begin_redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_redirectWhisperGroup(session, source, target, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_redirectWhisperGroup(int session, string source, string target, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_redirectWhisperGroup(session, source, target, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_redirectWhisperGroup(session, source, target, ctx__, true, cb__, cookie__);
        }

        private const string __redirectWhisperGroup_name = "redirectWhisperGroup";

        public void end_redirectWhisperGroup(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __redirectWhisperGroup_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidSessionException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_redirectWhisperGroup> begin_redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__redirectWhisperGroup_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_redirectWhisperGroup> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_redirectWhisperGroup>(this, __redirectWhisperGroup_name, redirectWhisperGroup_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__redirectWhisperGroup_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(session);
                os__.writeString(source);
                os__.writeString(target);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void redirectWhisperGroup_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_redirectWhisperGroup cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_redirectWhisperGroup(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return begin_registerUser(info, null, false, null, null);
        }

        /// <summary>
        /// Register a new user.
        /// </summary>
        /// <param name="info">Information about new user. Must include at least "name".
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_registerUser(info, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_registerUser(info, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_registerUser(info, ctx__, true, cb__, cookie__);
        }

        private const string __registerUser_name = "registerUser";

        public int end_registerUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __registerUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidUserException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_registerUser> begin_registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__registerUser_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_registerUser> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_registerUser>(this, __registerUser_name, registerUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__registerUser_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.UserInfoMapHelper.write(os__, info);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void registerUser_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_registerUser cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_registerUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_removeCallback> begin_removeCallback(Murmur.ServerCallbackPrx cb)
        {
            return begin_removeCallback(cb, null, false, null, null);
        }

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb">Callback interface to be removed.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_removeCallback> begin_removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_removeCallback(cb, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_removeCallback(Murmur.ServerCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeCallback(cb, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeCallback(cb, ctx__, true, cb__, cookie__);
        }

        private const string __removeCallback_name = "removeCallback";

        public void end_removeCallback(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __removeCallback_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidCallbackException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_removeCallback> begin_removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__removeCallback_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_removeCallback> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_removeCallback>(this, __removeCallback_name, removeCallback_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__removeCallback_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.ServerCallbackPrxHelper.write__(os__, cb);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void removeCallback_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_removeCallback cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_removeCallback(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_removeChannel> begin_removeChannel(int channelid)
        {
            return begin_removeChannel(channelid, null, false, null, null);
        }

        /// <summary>
        /// Remove a channel and all its subchannels.
        /// </summary>
        /// <param name="channelid">ID of Channel. See [Channel::id].</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_removeChannel> begin_removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_removeChannel(channelid, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_removeChannel(int channelid, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeChannel(channelid, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeChannel(channelid, ctx__, true, cb__, cookie__);
        }

        private const string __removeChannel_name = "removeChannel";

        public void end_removeChannel(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __removeChannel_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_removeChannel> begin_removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__removeChannel_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_removeChannel> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_removeChannel>(this, __removeChannel_name, removeChannel_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__removeChannel_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(channelid);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void removeChannel_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_removeChannel cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_removeChannel(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_removeContextCallback> begin_removeContextCallback(Murmur.ServerContextCallbackPrx cb)
        {
            return begin_removeContextCallback(cb, null, false, null, null);
        }

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb">Callback interface to be removed. This callback will be removed from all from all users.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_removeContextCallback> begin_removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_removeContextCallback(cb, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_removeContextCallback(Murmur.ServerContextCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeContextCallback(cb, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeContextCallback(cb, ctx__, true, cb__, cookie__);
        }

        private const string __removeContextCallback_name = "removeContextCallback";

        public void end_removeContextCallback(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __removeContextCallback_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidCallbackException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_removeContextCallback> begin_removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__removeContextCallback_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_removeContextCallback> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_removeContextCallback>(this, __removeContextCallback_name, removeContextCallback_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__removeContextCallback_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.ServerContextCallbackPrxHelper.write__(os__, cb);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void removeContextCallback_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_removeContextCallback cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_removeContextCallback(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_removeUserFromGroup> begin_removeUserFromGroup(int channelid, int session, string group)
        {
            return begin_removeUserFromGroup(channelid, session, group, null, false, null, null);
        }

        /// <summary>
        /// Remove a user from a temporary group membership on a channel.
        /// This state is not saved, and is intended for temporary memberships.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to add to. See [Channel::id].
        /// </param>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="group">Group name to remove from.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_removeUserFromGroup> begin_removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_removeUserFromGroup(channelid, session, group, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, string group, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeUserFromGroup(channelid, session, group, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeUserFromGroup(channelid, session, group, ctx__, true, cb__, cookie__);
        }

        private const string __removeUserFromGroup_name = "removeUserFromGroup";

        public void end_removeUserFromGroup(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __removeUserFromGroup_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.InvalidSessionException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_removeUserFromGroup> begin_removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__removeUserFromGroup_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_removeUserFromGroup> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_removeUserFromGroup>(this, __removeUserFromGroup_name, removeUserFromGroup_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__removeUserFromGroup_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(channelid);
                os__.writeInt(session);
                os__.writeString(group);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void removeUserFromGroup_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_removeUserFromGroup cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_removeUserFromGroup(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_sendMessage> begin_sendMessage(int session, string text)
        {
            return begin_sendMessage(session, text, null, false, null, null);
        }

        /// <summary>
        /// Send text message to a single user.
        /// </summary>
        /// <param name="session">Connection ID of user. See [User::session].
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_sendMessage> begin_sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_sendMessage(session, text, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_sendMessage(int session, string text, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessage(session, text, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessage(session, text, ctx__, true, cb__, cookie__);
        }

        private const string __sendMessage_name = "sendMessage";

        public void end_sendMessage(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __sendMessage_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidSessionException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_sendMessage> begin_sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__sendMessage_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_sendMessage> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_sendMessage>(this, __sendMessage_name, sendMessage_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__sendMessage_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(session);
                os__.writeString(text);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void sendMessage_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_sendMessage cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_sendMessage(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_sendMessageChannel> begin_sendMessageChannel(int channelid, bool tree, string text)
        {
            return begin_sendMessageChannel(channelid, tree, text, null, false, null, null);
        }

        /// <summary>
        /// Send text message to channel or a tree of channels.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to send to. See [Channel::id].
        /// </param>
        /// <param name="tree">If true, the message will be sent to the channel and all its subchannels.
        /// </param>
        /// <param name="text">Message to send.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_sendMessageChannel> begin_sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_sendMessageChannel(channelid, tree, text, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_sendMessageChannel(int channelid, bool tree, string text, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessageChannel(channelid, tree, text, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessageChannel(channelid, tree, text, ctx__, true, cb__, cookie__);
        }

        private const string __sendMessageChannel_name = "sendMessageChannel";

        public void end_sendMessageChannel(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __sendMessageChannel_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_sendMessageChannel> begin_sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__sendMessageChannel_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_sendMessageChannel> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_sendMessageChannel>(this, __sendMessageChannel_name, sendMessageChannel_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__sendMessageChannel_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(channelid);
                os__.writeBool(tree);
                os__.writeString(text);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void sendMessageChannel_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_sendMessageChannel cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_sendMessageChannel(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_setACL> begin_setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit)
        {
            return begin_setACL(channelid, acls, groups, inherit, null, false, null, null);
        }

        /// <summary>
        /// Set ACLs and Groups on a channel.
        /// Note that this will replace all existing ACLs and groups on the channel.
        /// </summary>
        /// <param name="channelid">Channel ID of channel to fetch from. See [Channel::id].
        /// </param>
        /// <param name="acls">List of ACLs on the channel.
        /// </param>
        /// <param name="groups">List of groups on the channel.
        /// </param>
        /// <param name="inherit">Should this channel inherit ACLs from the parent channel?</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_setACL> begin_setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setACL(channelid, acls, groups, inherit, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setACL(channelid, acls, groups, inherit, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setACL(channelid, acls, groups, inherit, ctx__, true, cb__, cookie__);
        }

        private const string __setACL_name = "setACL";

        public void end_setACL(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __setACL_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_setACL> begin_setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__setACL_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setACL> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setACL>(this, __setACL_name, setACL_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setACL_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(channelid);
                if(acls == null)
                {
                    os__.writeSize(0);
                }
                else
                {
                    os__.writeSize(acls.Length);
                    for(int ix__ = 0; ix__ < acls.Length; ++ix__)
                    {
                        (acls[ix__] == null ? new Murmur.ACL() : acls[ix__]).write__(os__);
                    }
                }
                if(groups == null)
                {
                    os__.writeSize(0);
                }
                else
                {
                    os__.writeSize(groups.Length);
                    for(int ix__ = 0; ix__ < groups.Length; ++ix__)
                    {
                        (groups[ix__] == null ? new Murmur.Group() : groups[ix__]).write__(os__);
                    }
                }
                os__.writeBool(inherit);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setACL_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_setACL cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_setACL(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_setAuthenticator> begin_setAuthenticator(Murmur.ServerAuthenticatorPrx auth)
        {
            return begin_setAuthenticator(auth, null, false, null, null);
        }

        /// <summary>
        /// Set external authenticator.
        /// If set, all authentications from clients are forwarded to this
        /// </summary>
        /// <param name="auth">Authenticator object to perform subsequent authentications.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_setAuthenticator> begin_setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setAuthenticator(auth, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setAuthenticator(Murmur.ServerAuthenticatorPrx auth, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setAuthenticator(auth, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setAuthenticator(auth, ctx__, true, cb__, cookie__);
        }

        private const string __setAuthenticator_name = "setAuthenticator";

        public void end_setAuthenticator(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __setAuthenticator_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidCallbackException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_setAuthenticator> begin_setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__setAuthenticator_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setAuthenticator> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setAuthenticator>(this, __setAuthenticator_name, setAuthenticator_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setAuthenticator_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.ServerAuthenticatorPrxHelper.write__(os__, auth);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setAuthenticator_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_setAuthenticator cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_setAuthenticator(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_setBans> begin_setBans(Murmur.Ban[] bans)
        {
            return begin_setBans(bans, null, false, null, null);
        }

        /// <summary>
        /// Set all current IP bans on the server.
        /// This will replace any bans already present, so if you want to add a ban, be sure to call [getBans] and then
        /// </summary>
        /// <param name="bans">List of bans.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_setBans> begin_setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setBans(bans, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setBans(Murmur.Ban[] bans, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setBans(bans, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setBans(bans, ctx__, true, cb__, cookie__);
        }

        private const string __setBans_name = "setBans";

        public void end_setBans(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __setBans_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_setBans> begin_setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__setBans_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setBans> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setBans>(this, __setBans_name, setBans_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setBans_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(bans == null)
                {
                    os__.writeSize(0);
                }
                else
                {
                    os__.writeSize(bans.Length);
                    for(int ix__ = 0; ix__ < bans.Length; ++ix__)
                    {
                        (bans[ix__] == null ? new Murmur.Ban() : bans[ix__]).write__(os__);
                    }
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setBans_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_setBans cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_setBans(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_setChannelState> begin_setChannelState(Murmur.Channel state)
        {
            return begin_setChannelState(state, null, false, null, null);
        }

        /// <summary>
        /// Set state of a single channel.
        /// You can use this to move or relink channels.
        /// </summary>
        /// <param name="state">Channel state to set.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_setChannelState> begin_setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setChannelState(state, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setChannelState(Murmur.Channel state, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setChannelState(state, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setChannelState(state, ctx__, true, cb__, cookie__);
        }

        private const string __setChannelState_name = "setChannelState";

        public void end_setChannelState(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __setChannelState_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_setChannelState> begin_setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__setChannelState_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setChannelState> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setChannelState>(this, __setChannelState_name, setChannelState_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setChannelState_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(state == null)
                {
                    Murmur.Channel tmp__ = new Murmur.Channel();
                    tmp__.write__(os__);
                }
                else
                {
                    state.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setChannelState_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_setChannelState cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_setChannelState(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_setConf> begin_setConf(string key, string value)
        {
            return begin_setConf(key, value, null, false, null, null);
        }

        /// <summary>
        /// Set a configuration item.
        /// </summary>
        /// <param name="key">Configuration key.
        /// </param>
        /// <param name="value">Configuration value.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_setConf> begin_setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setConf(key, value, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setConf(string key, string value, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setConf(key, value, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setConf(key, value, ctx__, true, cb__, cookie__);
        }

        private const string __setConf_name = "setConf";

        public void end_setConf(Ice.AsyncResult r__)
        {
            end__(r__, __setConf_name);
        }

        private Ice.AsyncResult<Murmur.Callback_Server_setConf> begin_setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_Server_setConf> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_Server_setConf>(this, __setConf_name, setConf_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setConf_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(key);
                os__.writeString(value);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setConf_completed__(Murmur.Callback_Server_setConf cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_setState> begin_setState(Murmur.User state)
        {
            return begin_setState(state, null, false, null, null);
        }

        /// <summary>
        /// Set user state.
        /// You can use this to move, mute and deafen users.
        /// </summary>
        /// <param name="state">User state to set.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_setState> begin_setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setState(state, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setState(Murmur.User state, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setState(state, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setState(state, ctx__, true, cb__, cookie__);
        }

        private const string __setState_name = "setState";

        public void end_setState(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __setState_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidChannelException)
                {
                    throw;
                }
                catch(Murmur.InvalidSessionException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_setState> begin_setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__setState_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setState> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setState>(this, __setState_name, setState_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setState_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(state == null)
                {
                    Murmur.User tmp__ = new Murmur.User();
                    tmp__.write__(os__);
                }
                else
                {
                    state.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setState_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_setState cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_setState(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_setSuperuserPassword> begin_setSuperuserPassword(string pw)
        {
            return begin_setSuperuserPassword(pw, null, false, null, null);
        }

        /// <summary>
        /// Set superuser password.
        /// This is just a convenience for using [updateRegistration] on user id 0.
        /// </summary>
        /// <param name="pw">Password.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_setSuperuserPassword> begin_setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setSuperuserPassword(pw, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setSuperuserPassword(string pw, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setSuperuserPassword(pw, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setSuperuserPassword(pw, ctx__, true, cb__, cookie__);
        }

        private const string __setSuperuserPassword_name = "setSuperuserPassword";

        public void end_setSuperuserPassword(Ice.AsyncResult r__)
        {
            end__(r__, __setSuperuserPassword_name);
        }

        private Ice.AsyncResult<Murmur.Callback_Server_setSuperuserPassword> begin_setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_Server_setSuperuserPassword> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_Server_setSuperuserPassword>(this, __setSuperuserPassword_name, setSuperuserPassword_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setSuperuserPassword_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(pw);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setSuperuserPassword_completed__(Murmur.Callback_Server_setSuperuserPassword cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_setTexture> begin_setTexture(int userid, byte[] tex)
        {
            return begin_setTexture(userid, tex, null, false, null, null);
        }

        /// <summary>
        /// Set user texture.
        /// The texture is a 600x60 32-bit BGRA raw texture, optionally zlib compress()ed.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].
        /// </param>
        /// <param name="tex">Texture to set for the user, or an empty texture to remove the existing texture.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_setTexture> begin_setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setTexture(userid, tex, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setTexture(int userid, byte[] tex, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setTexture(userid, tex, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setTexture(userid, tex, ctx__, true, cb__, cookie__);
        }

        private const string __setTexture_name = "setTexture";

        public void end_setTexture(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __setTexture_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidTextureException)
                {
                    throw;
                }
                catch(Murmur.InvalidUserException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_setTexture> begin_setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__setTexture_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setTexture> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_setTexture>(this, __setTexture_name, setTexture_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setTexture_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(userid);
                os__.writeByteSeq(tex);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setTexture_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_setTexture cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_setTexture(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_start> begin_start()
        {
            return begin_start(null, false, null, null);
        }

        /// <summary>
        /// Start server.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_start> begin_start(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_start(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_start(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_start(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_start(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_start(ctx__, true, cb__, cookie__);
        }

        private const string __start_name = "start";

        public void end_start(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __start_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Murmur.ServerFailureException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_start> begin_start(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__start_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_start> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_start>(this, __start_name, start_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__start_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void start_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_start cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_start(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_stop> begin_stop()
        {
            return begin_stop(null, false, null, null);
        }

        /// <summary>
        /// Stop server.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_stop> begin_stop(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_stop(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_stop(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_stop(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_stop(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_stop(ctx__, true, cb__, cookie__);
        }

        private const string __stop_name = "stop";

        public void end_stop(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __stop_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_stop> begin_stop(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__stop_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_stop> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_stop>(this, __stop_name, stop_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__stop_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void stop_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_stop cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_stop(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_unregisterUser> begin_unregisterUser(int userid)
        {
            return begin_unregisterUser(userid, null, false, null, null);
        }

        /// <summary>
        /// Remove a user registration.
        /// </summary>
        /// <param name="userid">ID of registered user. See [RegisteredUser::userid].</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_unregisterUser> begin_unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_unregisterUser(userid, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_unregisterUser(int userid, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_unregisterUser(userid, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_unregisterUser(userid, ctx__, true, cb__, cookie__);
        }

        private const string __unregisterUser_name = "unregisterUser";

        public void end_unregisterUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __unregisterUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidUserException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_unregisterUser> begin_unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__unregisterUser_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_unregisterUser> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_unregisterUser>(this, __unregisterUser_name, unregisterUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__unregisterUser_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(userid);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void unregisterUser_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_unregisterUser cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_unregisterUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_updateRegistration> begin_updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return begin_updateRegistration(userid, info, null, false, null, null);
        }

        /// <summary>
        /// Update the registration for a user.
        /// You can use this to set the email or password of a user,
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_updateRegistration> begin_updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_updateRegistration(userid, info, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updateRegistration(userid, info, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_updateRegistration(userid, info, ctx__, true, cb__, cookie__);
        }

        private const string __updateRegistration_name = "updateRegistration";

        public void end_updateRegistration(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __updateRegistration_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidUserException)
                {
                    throw;
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Server_updateRegistration> begin_updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__updateRegistration_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_updateRegistration> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_updateRegistration>(this, __updateRegistration_name, updateRegistration_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__updateRegistration_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(userid);
                Murmur.UserInfoMapHelper.write(os__, info);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void updateRegistration_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_updateRegistration cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_updateRegistration(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Server_verifyPassword> begin_verifyPassword(string name, string pw)
        {
            return begin_verifyPassword(name, pw, null, false, null, null);
        }

        /// <summary>
        /// Verify the password of a user.
        /// You can use this to verify a user's credentials.
        /// </summary>
        /// <param name="name">User name. See [RegisteredUser::name].
        /// </param>
        /// <param name="pw">User password.
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Server_verifyPassword> begin_verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_verifyPassword(name, pw, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_verifyPassword(string name, string pw, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_verifyPassword(name, pw, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_verifyPassword(name, pw, ctx__, true, cb__, cookie__);
        }

        private const string __verifyPassword_name = "verifyPassword";

        public int end_verifyPassword(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __verifyPassword_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.ServerBootedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Server_verifyPassword> begin_verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__verifyPassword_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_verifyPassword> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Server_verifyPassword>(this, __verifyPassword_name, verifyPassword_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__verifyPassword_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(name);
                os__.writeString(pw);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void verifyPassword_completed__(Ice.AsyncResult r__, Murmur.Callback_Server_verifyPassword cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_verifyPassword(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ServerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper h = new ServerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ServerPrxHelper h = new ServerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if(r == null)
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ServerPrxHelper h = new ServerPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Murmur::Server"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ServerDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ServerDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, ServerPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ServerPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ServerPrxHelper result = new ServerPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    /// <summary>
    /// Callback interface for Meta.
    /// You can supply an implementation of this to recieve notifications
    /// when servers are stopped or started.
    /// If an added callback ever throws an exception or goes away, it will be automatically removed.
    /// Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
    /// complete before continuing processing.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class MetaCallbackPrxHelper : Ice.ObjectPrxHelperBase, MetaCallbackPrx
    {
        #region Synchronous operations

        /// <summary>
        /// Called when a server is started.
        /// The server is up and running when this event is sent, so all methods that 
        /// need a running server will work.
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        
        public void started(Murmur.ServerPrx srv)
        {
            started(srv, null, false);
        }

        /// <summary>
        /// Called when a server is started.
        /// The server is up and running when this event is sent, so all methods that 
        /// need a running server will work.
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            started(srv, context__, true);
        }

        private void started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    MetaCallbackDel_ del__ = (MetaCallbackDel_)delBase__;
                    del__.started(srv, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Called when a server is stopped.
        /// The server is already stopped when this event is sent, so no methods that
        /// need a running server will work.
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        
        public void stopped(Murmur.ServerPrx srv)
        {
            stopped(srv, null, false);
        }

        /// <summary>
        /// Called when a server is stopped.
        /// The server is already stopped when this event is sent, so no methods that
        /// need a running server will work.
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            stopped(srv, context__, true);
        }

        private void stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    MetaCallbackDel_ del__ = (MetaCallbackDel_)delBase__;
                    del__.stopped(srv, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Murmur.Callback_MetaCallback_started> begin_started(Murmur.ServerPrx srv)
        {
            return begin_started(srv, null, false, null, null);
        }

        /// <summary>
        /// Called when a server is started.
        /// The server is up and running when this event is sent, so all methods that 
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_MetaCallback_started> begin_started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_started(srv, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_started(Murmur.ServerPrx srv, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_started(srv, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_started(srv, ctx__, true, cb__, cookie__);
        }

        private const string __started_name = "started";

        public void end_started(Ice.AsyncResult r__)
        {
            end__(r__, __started_name);
        }

        private Ice.AsyncResult<Murmur.Callback_MetaCallback_started> begin_started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_MetaCallback_started> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_MetaCallback_started>(this, __started_name, started_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__started_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.ServerPrxHelper.write__(os__, srv);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void started_completed__(Murmur.Callback_MetaCallback_started cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_MetaCallback_stopped> begin_stopped(Murmur.ServerPrx srv)
        {
            return begin_stopped(srv, null, false, null, null);
        }

        /// <summary>
        /// Called when a server is stopped.
        /// The server is already stopped when this event is sent, so no methods that
        /// </summary>
        /// <param name="srv">Interface for started server.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_MetaCallback_stopped> begin_stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_stopped(srv, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_stopped(Murmur.ServerPrx srv, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_stopped(srv, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_stopped(srv, ctx__, true, cb__, cookie__);
        }

        private const string __stopped_name = "stopped";

        public void end_stopped(Ice.AsyncResult r__)
        {
            end__(r__, __stopped_name);
        }

        private Ice.AsyncResult<Murmur.Callback_MetaCallback_stopped> begin_stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Murmur.Callback_MetaCallback_stopped> result__ = new IceInternal.OnewayOutgoingAsync<Murmur.Callback_MetaCallback_stopped>(this, __stopped_name, stopped_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__stopped_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.ServerPrxHelper.write__(os__, srv);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void stopped_completed__(Murmur.Callback_MetaCallback_stopped cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static MetaCallbackPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MetaCallbackPrx r = b as MetaCallbackPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                MetaCallbackPrxHelper h = new MetaCallbackPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MetaCallbackPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            MetaCallbackPrx r = b as MetaCallbackPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                MetaCallbackPrxHelper h = new MetaCallbackPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MetaCallbackPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    MetaCallbackPrxHelper h = new MetaCallbackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MetaCallbackPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    MetaCallbackPrxHelper h = new MetaCallbackPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MetaCallbackPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MetaCallbackPrx r = b as MetaCallbackPrx;
            if(r == null)
            {
                MetaCallbackPrxHelper h = new MetaCallbackPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MetaCallbackPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            MetaCallbackPrxHelper h = new MetaCallbackPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Murmur::MetaCallback"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new MetaCallbackDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new MetaCallbackDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, MetaCallbackPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static MetaCallbackPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                MetaCallbackPrxHelper result = new MetaCallbackPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerListHelper
    {
        public static void write(IceInternal.BasicStream os__, Murmur.ServerPrx[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    Murmur.ServerPrxHelper.write__(os__, v__[ix__]);
                }
            }
        }

        public static Murmur.ServerPrx[] read(IceInternal.BasicStream is__)
        {
            Murmur.ServerPrx[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(2);
                v__ = new Murmur.ServerPrx[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = Murmur.ServerPrxHelper.read__(is__);
                }
            }
            return v__;
        }
    }

    /// <summary>
    /// This is the meta interface.
    /// It is primarily used for retrieving the [Server] interfaces for each individual server.
    /// </summary>
    
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class MetaPrxHelper : Ice.ObjectPrxHelperBase, MetaPrx
    {
        #region Synchronous operations

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications when servers are started or stopped.
        /// 
        /// </summary>
        /// <param name="cb">Callback interface which will receive notifications.</param>
        
        public void addCallback(Murmur.MetaCallbackPrx cb)
        {
            addCallback(cb, null, false);
        }

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications when servers are started or stopped.
        /// 
        /// </summary>
        /// <param name="cb">Callback interface which will receive notifications.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            addCallback(cb, context__, true);
        }

        private void addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("addCallback");
                    delBase__ = getDelegate__(false);
                    MetaDel_ del__ = (MetaDel_)delBase__;
                    del__.addCallback(cb, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch list of all defined servers.
        /// </summary>
        /// <returns>List of interfaces for all servers.</returns>
        
        public Murmur.ServerPrx[] getAllServers()
        {
            return getAllServers(null, false);
        }

        /// <summary>
        /// Fetch list of all defined servers.
        /// </summary>
        /// <returns>List of interfaces for all servers.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public Murmur.ServerPrx[] getAllServers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getAllServers(context__, true);
        }

        private Murmur.ServerPrx[] getAllServers(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getAllServers");
                    delBase__ = getDelegate__(false);
                    MetaDel_ del__ = (MetaDel_)delBase__;
                    return del__.getAllServers(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch list of all currently running servers.
        /// </summary>
        /// <returns>List of interfaces for running servers.</returns>
        
        public Murmur.ServerPrx[] getBootedServers()
        {
            return getBootedServers(null, false);
        }

        /// <summary>
        /// Fetch list of all currently running servers.
        /// </summary>
        /// <returns>List of interfaces for running servers.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public Murmur.ServerPrx[] getBootedServers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getBootedServers(context__, true);
        }

        private Murmur.ServerPrx[] getBootedServers(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getBootedServers");
                    delBase__ = getDelegate__(false);
                    MetaDel_ del__ = (MetaDel_)delBase__;
                    return del__.getBootedServers(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch default configuraion.
        /// This returns the configuration items that were set in the configuration file, or
        /// the built-in default. The individual servers will use these values unless they have been overridden in the
        /// server specific configuration. The only special case is the port, which defaults to the value defined here +
        /// the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
        /// </summary>
        /// <returns>Default configuration of the servers.</returns>
        
        public _System.Collections.Generic.Dictionary<string, string> getDefaultConf()
        {
            return getDefaultConf(null, false);
        }

        /// <summary>
        /// Fetch default configuraion.
        /// This returns the configuration items that were set in the configuration file, or
        /// the built-in default. The individual servers will use these values unless they have been overridden in the
        /// server specific configuration. The only special case is the port, which defaults to the value defined here +
        /// the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
        /// </summary>
        /// <returns>Default configuration of the servers.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public _System.Collections.Generic.Dictionary<string, string> getDefaultConf(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getDefaultConf(context__, true);
        }

        private _System.Collections.Generic.Dictionary<string, string> getDefaultConf(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getDefaultConf");
                    delBase__ = getDelegate__(false);
                    MetaDel_ del__ = (MetaDel_)delBase__;
                    return del__.getDefaultConf(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch interface to specific server.
        /// </summary>
        /// <param name="id">Server ID. See [Server::getId].
        /// </param>
        /// <returns>Interface for specified server, or a null proxy if id is invalid.</returns>
        
        public Murmur.ServerPrx getServer(int id)
        {
            return getServer(id, null, false);
        }

        /// <summary>
        /// Fetch interface to specific server.
        /// </summary>
        /// <param name="id">Server ID. See [Server::getId].
        /// </param>
        /// <returns>Interface for specified server, or a null proxy if id is invalid.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public Murmur.ServerPrx getServer(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getServer(id, context__, true);
        }

        private Murmur.ServerPrx getServer(int id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getServer");
                    delBase__ = getDelegate__(false);
                    MetaDel_ del__ = (MetaDel_)delBase__;
                    return del__.getServer(id, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Get murmur uptime.
        /// </summary>
        /// <returns>Uptime of murmur in seconds</returns>
        
        public int getUptime()
        {
            return getUptime(null, false);
        }

        /// <summary>
        /// Get murmur uptime.
        /// </summary>
        /// <returns>Uptime of murmur in seconds</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public int getUptime(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getUptime(context__, true);
        }

        private int getUptime(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getUptime");
                    delBase__ = getDelegate__(false);
                    MetaDel_ del__ = (MetaDel_)delBase__;
                    return del__.getUptime(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Fetch version of Murmur.
        /// </summary>
        /// <param name="major">Major version.
        /// </param>
        /// <param name="minor">Minor version.
        /// </param>
        /// <param name="patch">Patchlevel.
        /// </param>
        /// <param name="text">Textual representation of version. Note that this may not match the [major], [minor] and [patch] levels, as it
        /// may be simply the compile date or the SVN revision. This is usually the text you want to present to users.</param>
        
        public void getVersion(out int major, out int minor, out int patch, out string text)
        {
            getVersion(out major, out minor, out patch, out text, null, false);
        }

        /// <summary>
        /// Fetch version of Murmur.
        /// </summary>
        /// <param name="major">Major version.
        /// </param>
        /// <param name="minor">Minor version.
        /// </param>
        /// <param name="patch">Patchlevel.
        /// </param>
        /// <param name="text">Textual representation of version. Note that this may not match the [major], [minor] and [patch] levels, as it
        /// may be simply the compile date or the SVN revision. This is usually the text you want to present to users.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void getVersion(out int major, out int minor, out int patch, out string text, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            getVersion(out major, out minor, out patch, out text, context__, true);
        }

        private void getVersion(out int major, out int minor, out int patch, out string text, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("getVersion");
                    delBase__ = getDelegate__(false);
                    MetaDel_ del__ = (MetaDel_)delBase__;
                    del__.getVersion(out major, out minor, out patch, out text, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Create a new server.
        /// Call [Server::getId] on the returned interface to find it's ID.
        /// </summary>
        /// <returns>Interface for new server.</returns>
        
        public Murmur.ServerPrx newServer()
        {
            return newServer(null, false);
        }

        /// <summary>
        /// Create a new server.
        /// Call [Server::getId] on the returned interface to find it's ID.
        /// </summary>
        /// <returns>Interface for new server.</returns>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public Murmur.ServerPrx newServer(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return newServer(context__, true);
        }

        private Murmur.ServerPrx newServer(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("newServer");
                    delBase__ = getDelegate__(false);
                    MetaDel_ del__ = (MetaDel_)delBase__;
                    return del__.newServer(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb">Callback interface to be removed.</param>
        
        public void removeCallback(Murmur.MetaCallbackPrx cb)
        {
            removeCallback(cb, null, false);
        }

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb">Callback interface to be removed.</param>
        /// <param name="context__">The Context map to send with the invocation.</param>
        
        public void removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            removeCallback(cb, context__, true);
        }

        private void removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("removeCallback");
                    delBase__ = getDelegate__(false);
                    MetaDel_ del__ = (MetaDel_)delBase__;
                    del__.removeCallback(cb, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Murmur.Callback_Meta_addCallback> begin_addCallback(Murmur.MetaCallbackPrx cb)
        {
            return begin_addCallback(cb, null, false, null, null);
        }

        /// <summary>
        /// Add a callback.
        /// The callback will receive notifications when servers are started or stopped.
        /// </summary>
        /// <param name="cb">Callback interface which will receive notifications.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Meta_addCallback> begin_addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_addCallback(cb, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_addCallback(Murmur.MetaCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addCallback(cb, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_addCallback(cb, ctx__, true, cb__, cookie__);
        }

        private const string __addCallback_name = "addCallback";

        public void end_addCallback(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __addCallback_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidCallbackException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Meta_addCallback> begin_addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__addCallback_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_addCallback> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_addCallback>(this, __addCallback_name, addCallback_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__addCallback_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.MetaCallbackPrxHelper.write__(os__, cb);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void addCallback_completed__(Ice.AsyncResult r__, Murmur.Callback_Meta_addCallback cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_addCallback(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Meta_getAllServers> begin_getAllServers()
        {
            return begin_getAllServers(null, false, null, null);
        }

        /// <summary>
        /// Fetch list of all defined servers.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Meta_getAllServers> begin_getAllServers(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getAllServers(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getAllServers(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAllServers(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getAllServers(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAllServers(ctx__, true, cb__, cookie__);
        }

        private const string __getAllServers_name = "getAllServers";

        public Murmur.ServerPrx[] end_getAllServers(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getAllServers_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Murmur.ServerPrx[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(2);
                ret__ = new Murmur.ServerPrx[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    ret__[ix__] = Murmur.ServerPrxHelper.read__(is__);
                }
            }
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Meta_getAllServers> begin_getAllServers(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getAllServers_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getAllServers> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getAllServers>(this, __getAllServers_name, getAllServers_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getAllServers_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getAllServers_completed__(Ice.AsyncResult r__, Murmur.Callback_Meta_getAllServers cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.ServerPrx[] ret__;
            try
            {
                ret__ = end_getAllServers(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Meta_getBootedServers> begin_getBootedServers()
        {
            return begin_getBootedServers(null, false, null, null);
        }

        /// <summary>
        /// Fetch list of all currently running servers.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Meta_getBootedServers> begin_getBootedServers(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getBootedServers(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getBootedServers(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBootedServers(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getBootedServers(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBootedServers(ctx__, true, cb__, cookie__);
        }

        private const string __getBootedServers_name = "getBootedServers";

        public Murmur.ServerPrx[] end_getBootedServers(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getBootedServers_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Murmur.ServerPrx[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(2);
                ret__ = new Murmur.ServerPrx[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    ret__[ix__] = Murmur.ServerPrxHelper.read__(is__);
                }
            }
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Meta_getBootedServers> begin_getBootedServers(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getBootedServers_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getBootedServers> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getBootedServers>(this, __getBootedServers_name, getBootedServers_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getBootedServers_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getBootedServers_completed__(Ice.AsyncResult r__, Murmur.Callback_Meta_getBootedServers cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.ServerPrx[] ret__;
            try
            {
                ret__ = end_getBootedServers(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Meta_getDefaultConf> begin_getDefaultConf()
        {
            return begin_getDefaultConf(null, false, null, null);
        }

        /// <summary>
        /// Fetch default configuraion.
        /// This returns the configuration items that were set in the configuration file, or
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Meta_getDefaultConf> begin_getDefaultConf(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getDefaultConf(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getDefaultConf(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getDefaultConf(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getDefaultConf(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getDefaultConf(ctx__, true, cb__, cookie__);
        }

        private const string __getDefaultConf_name = "getDefaultConf";

        public _System.Collections.Generic.Dictionary<string, string> end_getDefaultConf(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getDefaultConf_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.Dictionary<string, string> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.ConfigMapHelper.read(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Meta_getDefaultConf> begin_getDefaultConf(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getDefaultConf_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getDefaultConf> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getDefaultConf>(this, __getDefaultConf_name, getDefaultConf_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getDefaultConf_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getDefaultConf_completed__(Ice.AsyncResult r__, Murmur.Callback_Meta_getDefaultConf cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.Dictionary<string, string> ret__;
            try
            {
                ret__ = end_getDefaultConf(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Meta_getServer> begin_getServer(int id)
        {
            return begin_getServer(id, null, false, null, null);
        }

        /// <summary>
        /// Fetch interface to specific server.
        /// </summary>
        /// <param name="id">Server ID. See [Server::getId].
        /// </param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Meta_getServer> begin_getServer(int id, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getServer(id, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getServer(int id, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getServer(id, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getServer(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getServer(id, ctx__, true, cb__, cookie__);
        }

        private const string __getServer_name = "getServer";

        public Murmur.ServerPrx end_getServer(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getServer_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Murmur.ServerPrx ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.ServerPrxHelper.read__(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Meta_getServer> begin_getServer(int id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getServer_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getServer> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getServer>(this, __getServer_name, getServer_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getServer_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(id);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getServer_completed__(Ice.AsyncResult r__, Murmur.Callback_Meta_getServer cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.ServerPrx ret__;
            try
            {
                ret__ = end_getServer(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Meta_getUptime> begin_getUptime()
        {
            return begin_getUptime(null, false, null, null);
        }

        /// <summary>
        /// Get murmur uptime.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Meta_getUptime> begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getUptime(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getUptime(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUptime(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getUptime(ctx__, true, cb__, cookie__);
        }

        private const string __getUptime_name = "getUptime";

        public int end_getUptime(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getUptime_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Meta_getUptime> begin_getUptime(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getUptime_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getUptime> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getUptime>(this, __getUptime_name, getUptime_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getUptime_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getUptime_completed__(Ice.AsyncResult r__, Murmur.Callback_Meta_getUptime cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_getUptime(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Meta_getVersion> begin_getVersion()
        {
            return begin_getVersion(null, false, null, null);
        }

        /// <summary>
        /// Fetch version of Murmur.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Meta_getVersion> begin_getVersion(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getVersion(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getVersion(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getVersion(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getVersion(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getVersion(ctx__, true, cb__, cookie__);
        }

        private const string __getVersion_name = "getVersion";

        public void end_getVersion(out int major, out int minor, out int patch, out string text, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getVersion_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            major = is__.readInt();
            minor = is__.readInt();
            patch = is__.readInt();
            text = is__.readString();
            is__.endReadEncaps();
        }

        private Ice.AsyncResult<Murmur.Callback_Meta_getVersion> begin_getVersion(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getVersion_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getVersion> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_getVersion>(this, __getVersion_name, getVersion_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getVersion_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getVersion_completed__(Ice.AsyncResult r__, Murmur.Callback_Meta_getVersion cb__, Ice.ExceptionCallback excb__)
        {
            int major;
            int minor;
            int patch;
            string text;
            try
            {
                end_getVersion(out major, out minor, out patch, out text, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(major, minor, patch, text);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Meta_newServer> begin_newServer()
        {
            return begin_newServer(null, false, null, null);
        }

        /// <summary>
        /// Create a new server.
        /// Call [Server::getId] on the returned interface to find it's ID.
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Meta_newServer> begin_newServer(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_newServer(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_newServer(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_newServer(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_newServer(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_newServer(ctx__, true, cb__, cookie__);
        }

        private const string __newServer_name = "newServer";

        public Murmur.ServerPrx end_newServer(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __newServer_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Murmur.ServerPrx ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = Murmur.ServerPrxHelper.read__(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Murmur.Callback_Meta_newServer> begin_newServer(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__newServer_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_newServer> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_newServer>(this, __newServer_name, newServer_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__newServer_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void newServer_completed__(Ice.AsyncResult r__, Murmur.Callback_Meta_newServer cb__, Ice.ExceptionCallback excb__)
        {
            Murmur.ServerPrx ret__;
            try
            {
                ret__ = end_newServer(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Murmur.Callback_Meta_removeCallback> begin_removeCallback(Murmur.MetaCallbackPrx cb)
        {
            return begin_removeCallback(cb, null, false, null, null);
        }

        /// <summary>
        /// Remove a callback.
        /// </summary>
        /// <param name="cb">Callback interface to be removed.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Murmur.Callback_Meta_removeCallback> begin_removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_removeCallback(cb, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_removeCallback(Murmur.MetaCallbackPrx cb, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeCallback(cb, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeCallback(cb, ctx__, true, cb__, cookie__);
        }

        private const string __removeCallback_name = "removeCallback";

        public void end_removeCallback(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __removeCallback_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Murmur.InvalidCallbackException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Murmur.Callback_Meta_removeCallback> begin_removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__removeCallback_name);
            IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_removeCallback> result__ =  new IceInternal.TwowayOutgoingAsync<Murmur.Callback_Meta_removeCallback>(this, __removeCallback_name, removeCallback_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__removeCallback_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                Murmur.MetaCallbackPrxHelper.write__(os__, cb);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void removeCallback_completed__(Ice.AsyncResult r__, Murmur.Callback_Meta_removeCallback cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_removeCallback(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static MetaPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MetaPrx r = b as MetaPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                MetaPrxHelper h = new MetaPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MetaPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            MetaPrx r = b as MetaPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                MetaPrxHelper h = new MetaPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MetaPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    MetaPrxHelper h = new MetaPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MetaPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    MetaPrxHelper h = new MetaPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MetaPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MetaPrx r = b as MetaPrx;
            if(r == null)
            {
                MetaPrxHelper h = new MetaPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MetaPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            MetaPrxHelper h = new MetaPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Murmur::Meta"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new MetaDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new MetaDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, MetaPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static MetaPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                MetaPrxHelper result = new MetaPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Murmur
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface TreeDel_ : Ice.ObjectDel_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerCallbackDel_ : Ice.ObjectDel_
    {
        void userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__);

        void userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__);

        void userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__);

        void channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__);

        void channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__);

        void channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerContextCallbackDel_ : Ice.ObjectDel_
    {
        void contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> context__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerAuthenticatorDel_ : Ice.ObjectDel_
    {
        int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__);

        bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__);

        string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__);

        byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerUpdatingAuthenticatorDel_ : Murmur.ServerAuthenticatorDel_
    {
        int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        int unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        int setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerDel_ : Ice.ObjectDel_
    {
        bool isRunning(_System.Collections.Generic.Dictionary<string, string> context__);

        void start(_System.Collections.Generic.Dictionary<string, string> context__);

        void stop(_System.Collections.Generic.Dictionary<string, string> context__);

        void delete(_System.Collections.Generic.Dictionary<string, string> context__);

        int id(_System.Collections.Generic.Dictionary<string, string> context__);

        void addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        void removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        void setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> context__);

        string getConf(string key, _System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.Dictionary<string, string> getAllConf(_System.Collections.Generic.Dictionary<string, string> context__);

        void setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> context__);

        void setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> context__);

        Murmur.LogEntry[] getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.Dictionary<int, Murmur.User> getUsers(_System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.Dictionary<int, Murmur.Channel> getChannels(_System.Collections.Generic.Dictionary<string, string> context__);

        byte[][] getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> context__);

        Murmur.Tree getTree(_System.Collections.Generic.Dictionary<string, string> context__);

        Murmur.Ban[] getBans(_System.Collections.Generic.Dictionary<string, string> context__);

        void setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> context__);

        void kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> context__);

        Murmur.User getState(int session, _System.Collections.Generic.Dictionary<string, string> context__);

        void setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__);

        void sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> context__);

        bool hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> context__);

        void addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> context__);

        void removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        Murmur.Channel getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> context__);

        void setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__);

        void removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> context__);

        int addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> context__);

        void sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> context__);

        void getACL(int channelid, out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit, _System.Collections.Generic.Dictionary<string, string> context__);

        void setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> context__);

        void addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__);

        void removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__);

        void redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.Dictionary<int, string> getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.Dictionary<string, int> getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> context__);

        int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        void unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> context__);

        void updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        int verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> context__);

        byte[] getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> context__);

        void setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__);

        int getUptime(_System.Collections.Generic.Dictionary<string, string> context__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface MetaCallbackDel_ : Ice.ObjectDel_
    {
        void started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__);

        void stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface MetaDel_ : Ice.ObjectDel_
    {
        Murmur.ServerPrx getServer(int id, _System.Collections.Generic.Dictionary<string, string> context__);

        Murmur.ServerPrx newServer(_System.Collections.Generic.Dictionary<string, string> context__);

        Murmur.ServerPrx[] getBootedServers(_System.Collections.Generic.Dictionary<string, string> context__);

        Murmur.ServerPrx[] getAllServers(_System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.Dictionary<string, string> getDefaultConf(_System.Collections.Generic.Dictionary<string, string> context__);

        void getVersion(out int major, out int minor, out int patch, out string text, _System.Collections.Generic.Dictionary<string, string> context__);

        void addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        void removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__);

        int getUptime(_System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace Murmur
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class TreeDelM_ : Ice.ObjectDelM_, TreeDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerCallbackDelM_ : Ice.ObjectDelM_, ServerCallbackDel_
    {
        public void channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("channelCreated", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(state == null)
                    {
                        Murmur.Channel tmp__ = new Murmur.Channel();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        state.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("channelRemoved", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(state == null)
                    {
                        Murmur.Channel tmp__ = new Murmur.Channel();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        state.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("channelStateChanged", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(state == null)
                    {
                        Murmur.Channel tmp__ = new Murmur.Channel();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        state.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("userConnected", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(state == null)
                    {
                        Murmur.User tmp__ = new Murmur.User();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        state.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("userDisconnected", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(state == null)
                    {
                        Murmur.User tmp__ = new Murmur.User();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        state.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("userStateChanged", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(state == null)
                    {
                        Murmur.User tmp__ = new Murmur.User();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        state.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerContextCallbackDelM_ : Ice.ObjectDelM_, ServerContextCallbackDel_
    {
        public void contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("contextAction", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(action);
                    if(usr == null)
                    {
                        Murmur.User tmp__ = new Murmur.User();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        usr.write__(os__);
                    }
                    os__.writeInt(session);
                    os__.writeInt(channelid);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerAuthenticatorDelM_ : Ice.ObjectDelM_, ServerAuthenticatorDel_
    {
        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("authenticate", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(name);
                    os__.writeString(pw);
                    if(certificates == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(certificates.Length);
                        for(int ix__ = 0; ix__ < certificates.Length; ++ix__)
                        {
                            Murmur.CertificateDerHelper.write(os__, certificates[ix__]);
                        }
                    }
                    os__.writeString(certhash);
                    os__.writeBool(certstrong);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    newname = is__.readString();
                    groups = is__.readStringSeq();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getInfo", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    info = Murmur.UserInfoMapHelper.read(is__);
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("idToName", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("idToTexture", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    byte[] ret__;
                    ret__ = is__.readByteSeq();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("nameToId", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(name);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerUpdatingAuthenticatorDelM_ : Ice.ObjectDelM_, ServerUpdatingAuthenticatorDel_
    {
        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("authenticate", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(name);
                    os__.writeString(pw);
                    if(certificates == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(certificates.Length);
                        for(int ix__ = 0; ix__ < certificates.Length; ++ix__)
                        {
                            Murmur.CertificateDerHelper.write(os__, certificates[ix__]);
                        }
                    }
                    os__.writeString(certhash);
                    os__.writeBool(certstrong);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    newname = is__.readString();
                    groups = is__.readStringSeq();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getInfo", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    info = Murmur.UserInfoMapHelper.read(is__);
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("idToName", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("idToTexture", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    byte[] ret__;
                    ret__ = is__.readByteSeq();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("nameToId", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(name);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getRegisteredUsers", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(filter);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.Dictionary<int, string> ret__;
                    ret__ = Murmur.NameMapHelper.read(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("registerUser", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.UserInfoMapHelper.write(os__, info);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setInfo", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                    Murmur.UserInfoMapHelper.write(os__, info);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setTexture", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                    os__.writeByteSeq(tex);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("unregisterUser", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerDelM_ : Ice.ObjectDelM_, ServerDel_
    {
        public void addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("addCallback", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.ServerCallbackPrxHelper.write__(os__, cb);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidCallbackException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("addChannel", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(name);
                    os__.writeInt(parent);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("addContextCallback", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(session);
                    os__.writeString(action);
                    os__.writeString(text);
                    Murmur.ServerContextCallbackPrxHelper.write__(os__, cb);
                    os__.writeInt(ctx);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidCallbackException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("addUserToGroup", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(channelid);
                    os__.writeInt(session);
                    os__.writeString(group);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.InvalidSessionException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void delete(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("delete", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void getACL(int channelid, out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getACL", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(channelid);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    {
                        int szx__ = is__.readAndCheckSeqSize(16);
                        acls = new Murmur.ACL[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            acls[ix__] = new Murmur.ACL();
                            acls[ix__].read__(is__);
                        }
                    }
                    {
                        int szx__ = is__.readAndCheckSeqSize(7);
                        groups = new Murmur.Group[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            groups[ix__] = new Murmur.Group();
                            groups[ix__].read__(is__);
                        }
                    }
                    inherit = is__.readBool();
                    is__.endReadEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.Dictionary<string, string> getAllConf(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getAllConf", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.Dictionary<string, string> ret__;
                    ret__ = Murmur.ConfigMapHelper.read(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Murmur.Ban[] getBans(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getBans", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Murmur.Ban[] ret__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(20);
                        ret__ = new Murmur.Ban[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            ret__[ix__] = new Murmur.Ban();
                            ret__[ix__].read__(is__);
                        }
                    }
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public byte[][] getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getCertificateList", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidSessionException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    byte[][] ret__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(1);
                        ret__ = new byte[szx__][];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            ret__[ix__] = Murmur.CertificateDerHelper.read(is__);
                        }
                    }
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Murmur.Channel getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getChannelState", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(channelid);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Murmur.Channel ret__;
                    ret__ = null;
                    if(ret__ == null)
                    {
                        ret__ = new Murmur.Channel();
                    }
                    ret__.read__(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.Dictionary<int, Murmur.Channel> getChannels(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getChannels", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.Dictionary<int, Murmur.Channel> ret__;
                    ret__ = Murmur.ChannelMapHelper.read(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string getConf(string key, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getConf", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(key);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Murmur.LogEntry[] getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getLog", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(first);
                    os__.writeInt(last);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Murmur.LogEntry[] ret__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(5);
                        ret__ = new Murmur.LogEntry[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            ret__[ix__] = new Murmur.LogEntry();
                            ret__[ix__].read__(is__);
                        }
                    }
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getRegisteredUsers", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(filter);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.Dictionary<int, string> ret__;
                    ret__ = Murmur.NameMapHelper.read(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getRegistration", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(userid);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidUserException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> ret__;
                    ret__ = Murmur.UserInfoMapHelper.read(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Murmur.User getState(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getState", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(session);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidSessionException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Murmur.User ret__;
                    ret__ = null;
                    if(ret__ == null)
                    {
                        ret__ = new Murmur.User();
                    }
                    ret__.read__(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public byte[] getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getTexture", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(userid);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidUserException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    byte[] ret__;
                    ret__ = is__.readByteSeq();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Murmur.Tree getTree(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getTree", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Murmur.Tree ret__;
                    IceInternal.ParamPatcher<Murmur.Tree> ret___PP = new IceInternal.ParamPatcher<Murmur.Tree>("::Murmur::Tree");
                    is__.readObject(ret___PP);
                    is__.readPendingObjects();
                    is__.endReadEncaps();
                    try
                    {
                        ret__ = (Murmur.Tree)ret___PP.value;
                    }
                    catch(_System.InvalidCastException)
                    {
                        ret__ = null;
                        IceInternal.Ex.throwUOE(ret___PP.type(), ret___PP.value.ice_id());
                    }
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int getUptime(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getUptime", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.Dictionary<string, int> getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getUserIds", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeStringSeq(names);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.Dictionary<string, int> ret__;
                    ret__ = Murmur.IdMapHelper.read(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.Dictionary<int, string> getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getUserNames", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeIntSeq(ids);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.Dictionary<int, string> ret__;
                    ret__ = Murmur.NameMapHelper.read(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.Dictionary<int, Murmur.User> getUsers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getUsers", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.Dictionary<int, Murmur.User> ret__;
                    ret__ = Murmur.UserMapHelper.read(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("hasPermission", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(session);
                    os__.writeInt(channelid);
                    os__.writeInt(perm);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.InvalidSessionException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int id(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("id", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool isRunning(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("isRunning", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("kickUser", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(session);
                    os__.writeString(reason);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidSessionException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("redirectWhisperGroup", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(session);
                    os__.writeString(source);
                    os__.writeString(target);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidSessionException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("registerUser", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.UserInfoMapHelper.write(os__, info);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidUserException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("removeCallback", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.ServerCallbackPrxHelper.write__(os__, cb);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidCallbackException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("removeChannel", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(channelid);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("removeContextCallback", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.ServerContextCallbackPrxHelper.write__(os__, cb);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidCallbackException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("removeUserFromGroup", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(channelid);
                    os__.writeInt(session);
                    os__.writeString(group);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.InvalidSessionException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("sendMessage", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(session);
                    os__.writeString(text);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidSessionException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("sendMessageChannel", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(channelid);
                    os__.writeBool(tree);
                    os__.writeString(text);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setACL", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(channelid);
                    if(acls == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(acls.Length);
                        for(int ix__ = 0; ix__ < acls.Length; ++ix__)
                        {
                            (acls[ix__] == null ? new Murmur.ACL() : acls[ix__]).write__(os__);
                        }
                    }
                    if(groups == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(groups.Length);
                        for(int ix__ = 0; ix__ < groups.Length; ++ix__)
                        {
                            (groups[ix__] == null ? new Murmur.Group() : groups[ix__]).write__(os__);
                        }
                    }
                    os__.writeBool(inherit);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setAuthenticator", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.ServerAuthenticatorPrxHelper.write__(os__, auth);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidCallbackException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setBans", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(bans == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(bans.Length);
                        for(int ix__ = 0; ix__ < bans.Length; ++ix__)
                        {
                            (bans[ix__] == null ? new Murmur.Ban() : bans[ix__]).write__(os__);
                        }
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setChannelState", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(state == null)
                    {
                        Murmur.Channel tmp__ = new Murmur.Channel();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        state.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setConf", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(key);
                    os__.writeString(value);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setState", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(state == null)
                    {
                        Murmur.User tmp__ = new Murmur.User();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        state.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidChannelException)
                        {
                            throw;
                        }
                        catch(Murmur.InvalidSessionException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setSuperuserPassword", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(pw);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setTexture", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(userid);
                    os__.writeByteSeq(tex);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidTextureException)
                        {
                            throw;
                        }
                        catch(Murmur.InvalidUserException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void start(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("start", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerFailureException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void stop(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("stop", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("unregisterUser", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(userid);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidUserException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("updateRegistration", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(userid);
                    Murmur.UserInfoMapHelper.write(os__, info);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidUserException)
                        {
                            throw;
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("verifyPassword", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(name);
                    os__.writeString(pw);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.ServerBootedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class MetaCallbackDelM_ : Ice.ObjectDelM_, MetaCallbackDel_
    {
        public void started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("started", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.ServerPrxHelper.write__(os__, srv);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("stopped", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.ServerPrxHelper.write__(os__, srv);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class MetaDelM_ : Ice.ObjectDelM_, MetaDel_
    {
        public void addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("addCallback", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.MetaCallbackPrxHelper.write__(os__, cb);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidCallbackException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Murmur.ServerPrx[] getAllServers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getAllServers", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Murmur.ServerPrx[] ret__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(2);
                        ret__ = new Murmur.ServerPrx[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            ret__[ix__] = Murmur.ServerPrxHelper.read__(is__);
                        }
                    }
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Murmur.ServerPrx[] getBootedServers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getBootedServers", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Murmur.ServerPrx[] ret__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(2);
                        ret__ = new Murmur.ServerPrx[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            ret__[ix__] = Murmur.ServerPrxHelper.read__(is__);
                        }
                    }
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.Dictionary<string, string> getDefaultConf(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getDefaultConf", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.Dictionary<string, string> ret__;
                    ret__ = Murmur.ConfigMapHelper.read(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Murmur.ServerPrx getServer(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getServer", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(id);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Murmur.ServerPrx ret__;
                    ret__ = Murmur.ServerPrxHelper.read__(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int getUptime(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getUptime", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void getVersion(out int major, out int minor, out int patch, out string text, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getVersion", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    major = is__.readInt();
                    minor = is__.readInt();
                    patch = is__.readInt();
                    text = is__.readString();
                    is__.endReadEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Murmur.ServerPrx newServer(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("newServer", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Murmur.ServerPrx ret__;
                    ret__ = Murmur.ServerPrxHelper.read__(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("removeCallback", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    Murmur.MetaCallbackPrxHelper.write__(os__, cb);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Murmur.InvalidCallbackException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace Murmur
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class TreeDelD_ : Ice.ObjectDelD_, TreeDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerCallbackDelD_ : Ice.ObjectDelD_, ServerCallbackDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void channelCreated(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "channelCreated", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerCallback servant__ = null;
                try
                {
                    servant__ = (ServerCallback)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.channelCreated(state, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void channelRemoved(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "channelRemoved", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerCallback servant__ = null;
                try
                {
                    servant__ = (ServerCallback)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.channelRemoved(state, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void channelStateChanged(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "channelStateChanged", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerCallback servant__ = null;
                try
                {
                    servant__ = (ServerCallback)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.channelStateChanged(state, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void userConnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "userConnected", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerCallback servant__ = null;
                try
                {
                    servant__ = (ServerCallback)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.userConnected(state, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void userDisconnected(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "userDisconnected", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerCallback servant__ = null;
                try
                {
                    servant__ = (ServerCallback)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.userDisconnected(state, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void userStateChanged(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "userStateChanged", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerCallback servant__ = null;
                try
                {
                    servant__ = (ServerCallback)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.userStateChanged(state, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerContextCallbackDelD_ : Ice.ObjectDelD_, ServerContextCallbackDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void contextAction(string action, Murmur.User usr, int session, int channelid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "contextAction", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerContextCallback servant__ = null;
                try
                {
                    servant__ = (ServerContextCallback)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.contextAction(action, usr, session, channelid, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerAuthenticatorDelD_ : Ice.ObjectDelD_, ServerAuthenticatorDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "authenticate", Ice.OperationMode.Idempotent, context__);
            string newnameHolder__ = null;
            string[] groupsHolder__ = null;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.authenticate(name, pw, certificates, certhash, certstrong, out newnameHolder__, out groupsHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            newname = newnameHolder__;
            groups = groupsHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getInfo", Ice.OperationMode.Idempotent, context__);
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> infoHolder__ = null;
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getInfo(id, out infoHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            info = infoHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "idToName", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.idToName(id, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "idToTexture", Ice.OperationMode.Idempotent, context__);
            byte[] result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.idToTexture(id, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "nameToId", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.nameToId(name, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerUpdatingAuthenticatorDelD_ : Ice.ObjectDelD_, ServerUpdatingAuthenticatorDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "authenticate", Ice.OperationMode.Idempotent, context__);
            string newnameHolder__ = null;
            string[] groupsHolder__ = null;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.authenticate(name, pw, certificates, certhash, certstrong, out newnameHolder__, out groupsHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            newname = newnameHolder__;
            groups = groupsHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getInfo", Ice.OperationMode.Idempotent, context__);
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> infoHolder__ = null;
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getInfo(id, out infoHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            info = infoHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string idToName(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "idToName", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.idToName(id, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public byte[] idToTexture(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "idToTexture", Ice.OperationMode.Idempotent, context__);
            byte[] result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.idToTexture(id, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int nameToId(string name, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "nameToId", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.nameToId(name, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getRegisteredUsers", Ice.OperationMode.Idempotent, context__);
            _System.Collections.Generic.Dictionary<int, string> result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getRegisteredUsers(filter, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "registerUser", Ice.OperationMode.Normal, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.registerUser(info, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "setInfo", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.setInfo(id, info, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int setTexture(int id, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "setTexture", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.setTexture(id, tex, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int unregisterUser(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "unregisterUser", Ice.OperationMode.Normal, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ServerUpdatingAuthenticator servant__ = null;
                try
                {
                    servant__ = (ServerUpdatingAuthenticator)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.unregisterUser(id, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerDelD_ : Ice.ObjectDelD_, ServerDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void addCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int addChannel(string name, int parent, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void addContextCallback(int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void addUserToGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void delete(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void getACL(int channelid, out Murmur.ACL[] acls, out Murmur.Group[] groups, out bool inherit, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.Dictionary<string, string> getAllConf(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Murmur.Ban[] getBans(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public byte[][] getCertificateList(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Murmur.Channel getChannelState(int channelid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.Dictionary<int, Murmur.Channel> getChannels(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string getConf(string key, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Murmur.LogEntry[] getLog(int first, int last, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> getRegistration(int userid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Murmur.User getState(int session, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public byte[] getTexture(int userid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Murmur.Tree getTree(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int getUptime(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.Dictionary<string, int> getUserIds(string[] names, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.Dictionary<int, string> getUserNames(int[] ids, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.Dictionary<int, Murmur.User> getUsers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool hasPermission(int session, int channelid, int perm, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int id(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool isRunning(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void kickUser(int session, string reason, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void redirectWhisperGroup(int session, string source, string target, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void removeCallback(Murmur.ServerCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void removeChannel(int channelid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void removeContextCallback(Murmur.ServerContextCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void removeUserFromGroup(int channelid, int session, string group, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void sendMessage(int session, string text, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void sendMessageChannel(int channelid, bool tree, string text, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setACL(int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setAuthenticator(Murmur.ServerAuthenticatorPrx auth, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setBans(Murmur.Ban[] bans, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setChannelState(Murmur.Channel state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setConf(string key, string value, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setState(Murmur.User state, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setSuperuserPassword(string pw, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void setTexture(int userid, byte[] tex, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void start(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void stop(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void unregisterUser(int userid, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void updateRegistration(int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int verifyPassword(string name, string pw, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class MetaCallbackDelD_ : Ice.ObjectDelD_, MetaCallbackDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void started(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "started", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MetaCallback servant__ = null;
                try
                {
                    servant__ = (MetaCallback)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.started(srv, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void stopped(Murmur.ServerPrx srv, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "stopped", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MetaCallback servant__ = null;
                try
                {
                    servant__ = (MetaCallback)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.stopped(srv, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class MetaDelD_ : Ice.ObjectDelD_, MetaDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void addCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Murmur.ServerPrx[] getAllServers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Murmur.ServerPrx[] getBootedServers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.Dictionary<string, string> getDefaultConf(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Murmur.ServerPrx getServer(int id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int getUptime(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void getVersion(out int major, out int minor, out int patch, out string text, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Murmur.ServerPrx newServer(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void removeCallback(Murmur.MetaCallbackPrx cb, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }
    }
}

namespace Murmur
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ServerCallbackDisp_ : Ice.ObjectImpl, ServerCallback
    {
        #region Slice operations

        public void userConnected(Murmur.User state)
        {
            userConnected(state, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void userConnected(Murmur.User state, Ice.Current current__);

        public void userDisconnected(Murmur.User state)
        {
            userDisconnected(state, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void userDisconnected(Murmur.User state, Ice.Current current__);

        public void userStateChanged(Murmur.User state)
        {
            userStateChanged(state, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void userStateChanged(Murmur.User state, Ice.Current current__);

        public void channelCreated(Murmur.Channel state)
        {
            channelCreated(state, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void channelCreated(Murmur.Channel state, Ice.Current current__);

        public void channelRemoved(Murmur.Channel state)
        {
            channelRemoved(state, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void channelRemoved(Murmur.Channel state, Ice.Current current__);

        public void channelStateChanged(Murmur.Channel state)
        {
            channelStateChanged(state, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void channelStateChanged(Murmur.Channel state, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Murmur::ServerCallback"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus userConnected___(ServerCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.User state;
            state = null;
            if(state == null)
            {
                state = new Murmur.User();
            }
            state.read__(is__);
            is__.endReadEncaps();
            obj__.userConnected(state, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus userDisconnected___(ServerCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.User state;
            state = null;
            if(state == null)
            {
                state = new Murmur.User();
            }
            state.read__(is__);
            is__.endReadEncaps();
            obj__.userDisconnected(state, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus userStateChanged___(ServerCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.User state;
            state = null;
            if(state == null)
            {
                state = new Murmur.User();
            }
            state.read__(is__);
            is__.endReadEncaps();
            obj__.userStateChanged(state, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus channelCreated___(ServerCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.Channel state;
            state = null;
            if(state == null)
            {
                state = new Murmur.Channel();
            }
            state.read__(is__);
            is__.endReadEncaps();
            obj__.channelCreated(state, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus channelRemoved___(ServerCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.Channel state;
            state = null;
            if(state == null)
            {
                state = new Murmur.Channel();
            }
            state.read__(is__);
            is__.endReadEncaps();
            obj__.channelRemoved(state, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus channelStateChanged___(ServerCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.Channel state;
            state = null;
            if(state == null)
            {
                state = new Murmur.Channel();
            }
            state.read__(is__);
            is__.endReadEncaps();
            obj__.channelStateChanged(state, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "channelCreated",
            "channelRemoved",
            "channelStateChanged",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "userConnected",
            "userDisconnected",
            "userStateChanged"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return channelCreated___(this, inS__, current__);
                }
                case 1:
                {
                    return channelRemoved___(this, inS__, current__);
                }
                case 2:
                {
                    return channelStateChanged___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 6:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 7:
                {
                    return userConnected___(this, inS__, current__);
                }
                case 8:
                {
                    return userDisconnected___(this, inS__, current__);
                }
                case 9:
                {
                    return userStateChanged___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::ServerCallback was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::ServerCallback was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ServerContextCallbackDisp_ : Ice.ObjectImpl, ServerContextCallback
    {
        #region Slice operations

        public void contextAction(string action, Murmur.User usr, int session, int channelid)
        {
            contextAction(action, usr, session, channelid, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void contextAction(string action, Murmur.User usr, int session, int channelid, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Murmur::ServerContextCallback"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus contextAction___(ServerContextCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string action;
            action = is__.readString();
            Murmur.User usr;
            usr = null;
            if(usr == null)
            {
                usr = new Murmur.User();
            }
            usr.read__(is__);
            int session;
            session = is__.readInt();
            int channelid;
            channelid = is__.readInt();
            is__.endReadEncaps();
            obj__.contextAction(action, usr, session, channelid, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "contextAction",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return contextAction___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::ServerContextCallback was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::ServerContextCallback was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ServerAuthenticatorDisp_ : Ice.ObjectImpl, ServerAuthenticator
    {
        #region Slice operations

        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups)
        {
            return authenticate(name, pw, certificates, certhash, certstrong, out newname, out groups, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, Ice.Current current__);

        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return getInfo(id, out info, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        public int nameToId(string name)
        {
            return nameToId(name, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int nameToId(string name, Ice.Current current__);

        public string idToName(int id)
        {
            return idToName(id, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string idToName(int id, Ice.Current current__);

        public byte[] idToTexture(int id)
        {
            return idToTexture(id, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract byte[] idToTexture(int id, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Murmur::ServerAuthenticator"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus authenticate___(ServerAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string name;
            name = is__.readString();
            string pw;
            pw = is__.readString();
            byte[][] certificates;
            {
                int szx__ = is__.readAndCheckSeqSize(1);
                certificates = new byte[szx__][];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    certificates[ix__] = Murmur.CertificateDerHelper.read(is__);
                }
            }
            string certhash;
            certhash = is__.readString();
            bool certstrong;
            certstrong = is__.readBool();
            is__.endReadEncaps();
            string newname;
            string[] groups;
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.authenticate(name, pw, certificates, certhash, certstrong, out newname, out groups, current__);
            os__.writeString(newname);
            os__.writeStringSeq(groups);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getInfo___(ServerAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int id;
            id = is__.readInt();
            is__.endReadEncaps();
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info;
            IceInternal.BasicStream os__ = inS__.ostr();
            bool ret__ = obj__.getInfo(id, out info, current__);
            Murmur.UserInfoMapHelper.write(os__, info);
            os__.writeBool(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus nameToId___(ServerAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string name;
            name = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.nameToId(name, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus idToName___(ServerAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int id;
            id = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.idToName(id, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus idToTexture___(ServerAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int id;
            id = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            byte[] ret__ = obj__.idToTexture(id, current__);
            os__.writeByteSeq(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "authenticate",
            "getInfo",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "idToName",
            "idToTexture",
            "nameToId"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return authenticate___(this, inS__, current__);
                }
                case 1:
                {
                    return getInfo___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 6:
                {
                    return idToName___(this, inS__, current__);
                }
                case 7:
                {
                    return idToTexture___(this, inS__, current__);
                }
                case 8:
                {
                    return nameToId___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::ServerAuthenticator was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::ServerAuthenticator was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ServerUpdatingAuthenticatorDisp_ : Ice.ObjectImpl, ServerUpdatingAuthenticator
    {
        #region Slice operations

        public int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return registerUser(info, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int registerUser(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        public int unregisterUser(int id)
        {
            return unregisterUser(id, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int unregisterUser(int id, Ice.Current current__);

        public _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter)
        {
            return getRegisteredUsers(filter, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract _System.Collections.Generic.Dictionary<int, string> getRegisteredUsers(string filter, Ice.Current current__);

        public int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return setInfo(id, info, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int setInfo(int id, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        public int setTexture(int id, byte[] tex)
        {
            return setTexture(id, tex, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int setTexture(int id, byte[] tex, Ice.Current current__);

        #endregion

        #region Inherited Slice operations

        public int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups)
        {
            return authenticate(name, pw, certificates, certhash, certstrong, out newname, out groups, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int authenticate(string name, string pw, byte[][] certificates, string certhash, bool certstrong, out string newname, out string[] groups, Ice.Current current__);

        public bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            return getInfo(id, out info, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool getInfo(int id, out _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        public string idToName(int id)
        {
            return idToName(id, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string idToName(int id, Ice.Current current__);

        public byte[] idToTexture(int id)
        {
            return idToTexture(id, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract byte[] idToTexture(int id, Ice.Current current__);

        public int nameToId(string name)
        {
            return nameToId(name, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int nameToId(string name, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Murmur::ServerAuthenticator",
            "::Murmur::ServerUpdatingAuthenticator"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[2];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[2];
        }

        public static new string ice_staticId()
        {
            return ids__[2];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus registerUser___(ServerUpdatingAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info;
            info = Murmur.UserInfoMapHelper.read(is__);
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.registerUser(info, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus unregisterUser___(ServerUpdatingAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int id;
            id = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.unregisterUser(id, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getRegisteredUsers___(ServerUpdatingAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string filter;
            filter = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            _System.Collections.Generic.Dictionary<int, string> ret__ = obj__.getRegisteredUsers(filter, current__);
            Murmur.NameMapHelper.write(os__, ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setInfo___(ServerUpdatingAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int id;
            id = is__.readInt();
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info;
            info = Murmur.UserInfoMapHelper.read(is__);
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.setInfo(id, info, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setTexture___(ServerUpdatingAuthenticator obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int id;
            id = is__.readInt();
            byte[] tex;
            tex = is__.readByteSeq();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.setTexture(id, tex, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "authenticate",
            "getInfo",
            "getRegisteredUsers",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "idToName",
            "idToTexture",
            "nameToId",
            "registerUser",
            "setInfo",
            "setTexture",
            "unregisterUser"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return Murmur.ServerAuthenticatorDisp_.authenticate___(this, inS__, current__);
                }
                case 1:
                {
                    return Murmur.ServerAuthenticatorDisp_.getInfo___(this, inS__, current__);
                }
                case 2:
                {
                    return getRegisteredUsers___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 6:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 7:
                {
                    return Murmur.ServerAuthenticatorDisp_.idToName___(this, inS__, current__);
                }
                case 8:
                {
                    return Murmur.ServerAuthenticatorDisp_.idToTexture___(this, inS__, current__);
                }
                case 9:
                {
                    return Murmur.ServerAuthenticatorDisp_.nameToId___(this, inS__, current__);
                }
                case 10:
                {
                    return registerUser___(this, inS__, current__);
                }
                case 11:
                {
                    return setInfo___(this, inS__, current__);
                }
                case 12:
                {
                    return setTexture___(this, inS__, current__);
                }
                case 13:
                {
                    return unregisterUser___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::ServerUpdatingAuthenticator was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::ServerUpdatingAuthenticator was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ServerDisp_ : Ice.ObjectImpl, Server
    {
        #region Slice operations

        public void isRunning_async(Murmur.AMD_Server_isRunning cb__)
        {
            isRunning_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void isRunning_async(Murmur.AMD_Server_isRunning cb__, Ice.Current current__);

        public void start_async(Murmur.AMD_Server_start cb__)
        {
            start_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void start_async(Murmur.AMD_Server_start cb__, Ice.Current current__);

        public void stop_async(Murmur.AMD_Server_stop cb__)
        {
            stop_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void stop_async(Murmur.AMD_Server_stop cb__, Ice.Current current__);

        public void delete_async(Murmur.AMD_Server_delete cb__)
        {
            delete_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void delete_async(Murmur.AMD_Server_delete cb__, Ice.Current current__);

        public void id_async(Murmur.AMD_Server_id cb__)
        {
            id_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void id_async(Murmur.AMD_Server_id cb__, Ice.Current current__);

        public void addCallback_async(Murmur.AMD_Server_addCallback cb__, Murmur.ServerCallbackPrx cb)
        {
            addCallback_async(cb__, cb, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void addCallback_async(Murmur.AMD_Server_addCallback cb__, Murmur.ServerCallbackPrx cb, Ice.Current current__);

        public void removeCallback_async(Murmur.AMD_Server_removeCallback cb__, Murmur.ServerCallbackPrx cb)
        {
            removeCallback_async(cb__, cb, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void removeCallback_async(Murmur.AMD_Server_removeCallback cb__, Murmur.ServerCallbackPrx cb, Ice.Current current__);

        public void setAuthenticator_async(Murmur.AMD_Server_setAuthenticator cb__, Murmur.ServerAuthenticatorPrx auth)
        {
            setAuthenticator_async(cb__, auth, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setAuthenticator_async(Murmur.AMD_Server_setAuthenticator cb__, Murmur.ServerAuthenticatorPrx auth, Ice.Current current__);

        public void getConf_async(Murmur.AMD_Server_getConf cb__, string key)
        {
            getConf_async(cb__, key, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getConf_async(Murmur.AMD_Server_getConf cb__, string key, Ice.Current current__);

        public void getAllConf_async(Murmur.AMD_Server_getAllConf cb__)
        {
            getAllConf_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getAllConf_async(Murmur.AMD_Server_getAllConf cb__, Ice.Current current__);

        public void setConf_async(Murmur.AMD_Server_setConf cb__, string key, string value)
        {
            setConf_async(cb__, key, value, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setConf_async(Murmur.AMD_Server_setConf cb__, string key, string value, Ice.Current current__);

        public void setSuperuserPassword_async(Murmur.AMD_Server_setSuperuserPassword cb__, string pw)
        {
            setSuperuserPassword_async(cb__, pw, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setSuperuserPassword_async(Murmur.AMD_Server_setSuperuserPassword cb__, string pw, Ice.Current current__);

        public void getLog_async(Murmur.AMD_Server_getLog cb__, int first, int last)
        {
            getLog_async(cb__, first, last, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getLog_async(Murmur.AMD_Server_getLog cb__, int first, int last, Ice.Current current__);

        public void getUsers_async(Murmur.AMD_Server_getUsers cb__)
        {
            getUsers_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getUsers_async(Murmur.AMD_Server_getUsers cb__, Ice.Current current__);

        public void getChannels_async(Murmur.AMD_Server_getChannels cb__)
        {
            getChannels_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getChannels_async(Murmur.AMD_Server_getChannels cb__, Ice.Current current__);

        public void getCertificateList_async(Murmur.AMD_Server_getCertificateList cb__, int session)
        {
            getCertificateList_async(cb__, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getCertificateList_async(Murmur.AMD_Server_getCertificateList cb__, int session, Ice.Current current__);

        public void getTree_async(Murmur.AMD_Server_getTree cb__)
        {
            getTree_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getTree_async(Murmur.AMD_Server_getTree cb__, Ice.Current current__);

        public void getBans_async(Murmur.AMD_Server_getBans cb__)
        {
            getBans_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getBans_async(Murmur.AMD_Server_getBans cb__, Ice.Current current__);

        public void setBans_async(Murmur.AMD_Server_setBans cb__, Murmur.Ban[] bans)
        {
            setBans_async(cb__, bans, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setBans_async(Murmur.AMD_Server_setBans cb__, Murmur.Ban[] bans, Ice.Current current__);

        public void kickUser_async(Murmur.AMD_Server_kickUser cb__, int session, string reason)
        {
            kickUser_async(cb__, session, reason, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void kickUser_async(Murmur.AMD_Server_kickUser cb__, int session, string reason, Ice.Current current__);

        public void getState_async(Murmur.AMD_Server_getState cb__, int session)
        {
            getState_async(cb__, session, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getState_async(Murmur.AMD_Server_getState cb__, int session, Ice.Current current__);

        public void setState_async(Murmur.AMD_Server_setState cb__, Murmur.User state)
        {
            setState_async(cb__, state, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setState_async(Murmur.AMD_Server_setState cb__, Murmur.User state, Ice.Current current__);

        public void sendMessage_async(Murmur.AMD_Server_sendMessage cb__, int session, string text)
        {
            sendMessage_async(cb__, session, text, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void sendMessage_async(Murmur.AMD_Server_sendMessage cb__, int session, string text, Ice.Current current__);

        public void hasPermission_async(Murmur.AMD_Server_hasPermission cb__, int session, int channelid, int perm)
        {
            hasPermission_async(cb__, session, channelid, perm, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void hasPermission_async(Murmur.AMD_Server_hasPermission cb__, int session, int channelid, int perm, Ice.Current current__);

        public void addContextCallback_async(Murmur.AMD_Server_addContextCallback cb__, int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx)
        {
            addContextCallback_async(cb__, session, action, text, cb, ctx, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void addContextCallback_async(Murmur.AMD_Server_addContextCallback cb__, int session, string action, string text, Murmur.ServerContextCallbackPrx cb, int ctx, Ice.Current current__);

        public void removeContextCallback_async(Murmur.AMD_Server_removeContextCallback cb__, Murmur.ServerContextCallbackPrx cb)
        {
            removeContextCallback_async(cb__, cb, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void removeContextCallback_async(Murmur.AMD_Server_removeContextCallback cb__, Murmur.ServerContextCallbackPrx cb, Ice.Current current__);

        public void getChannelState_async(Murmur.AMD_Server_getChannelState cb__, int channelid)
        {
            getChannelState_async(cb__, channelid, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getChannelState_async(Murmur.AMD_Server_getChannelState cb__, int channelid, Ice.Current current__);

        public void setChannelState_async(Murmur.AMD_Server_setChannelState cb__, Murmur.Channel state)
        {
            setChannelState_async(cb__, state, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setChannelState_async(Murmur.AMD_Server_setChannelState cb__, Murmur.Channel state, Ice.Current current__);

        public void removeChannel_async(Murmur.AMD_Server_removeChannel cb__, int channelid)
        {
            removeChannel_async(cb__, channelid, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void removeChannel_async(Murmur.AMD_Server_removeChannel cb__, int channelid, Ice.Current current__);

        public void addChannel_async(Murmur.AMD_Server_addChannel cb__, string name, int parent)
        {
            addChannel_async(cb__, name, parent, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void addChannel_async(Murmur.AMD_Server_addChannel cb__, string name, int parent, Ice.Current current__);

        public void sendMessageChannel_async(Murmur.AMD_Server_sendMessageChannel cb__, int channelid, bool tree, string text)
        {
            sendMessageChannel_async(cb__, channelid, tree, text, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void sendMessageChannel_async(Murmur.AMD_Server_sendMessageChannel cb__, int channelid, bool tree, string text, Ice.Current current__);

        public void getACL_async(Murmur.AMD_Server_getACL cb__, int channelid)
        {
            getACL_async(cb__, channelid, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getACL_async(Murmur.AMD_Server_getACL cb__, int channelid, Ice.Current current__);

        public void setACL_async(Murmur.AMD_Server_setACL cb__, int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit)
        {
            setACL_async(cb__, channelid, acls, groups, inherit, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setACL_async(Murmur.AMD_Server_setACL cb__, int channelid, Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit, Ice.Current current__);

        public void addUserToGroup_async(Murmur.AMD_Server_addUserToGroup cb__, int channelid, int session, string group)
        {
            addUserToGroup_async(cb__, channelid, session, group, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void addUserToGroup_async(Murmur.AMD_Server_addUserToGroup cb__, int channelid, int session, string group, Ice.Current current__);

        public void removeUserFromGroup_async(Murmur.AMD_Server_removeUserFromGroup cb__, int channelid, int session, string group)
        {
            removeUserFromGroup_async(cb__, channelid, session, group, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void removeUserFromGroup_async(Murmur.AMD_Server_removeUserFromGroup cb__, int channelid, int session, string group, Ice.Current current__);

        public void redirectWhisperGroup_async(Murmur.AMD_Server_redirectWhisperGroup cb__, int session, string source, string target)
        {
            redirectWhisperGroup_async(cb__, session, source, target, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void redirectWhisperGroup_async(Murmur.AMD_Server_redirectWhisperGroup cb__, int session, string source, string target, Ice.Current current__);

        public void getUserNames_async(Murmur.AMD_Server_getUserNames cb__, int[] ids)
        {
            getUserNames_async(cb__, ids, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getUserNames_async(Murmur.AMD_Server_getUserNames cb__, int[] ids, Ice.Current current__);

        public void getUserIds_async(Murmur.AMD_Server_getUserIds cb__, string[] names)
        {
            getUserIds_async(cb__, names, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getUserIds_async(Murmur.AMD_Server_getUserIds cb__, string[] names, Ice.Current current__);

        public void registerUser_async(Murmur.AMD_Server_registerUser cb__, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            registerUser_async(cb__, info, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void registerUser_async(Murmur.AMD_Server_registerUser cb__, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        public void unregisterUser_async(Murmur.AMD_Server_unregisterUser cb__, int userid)
        {
            unregisterUser_async(cb__, userid, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void unregisterUser_async(Murmur.AMD_Server_unregisterUser cb__, int userid, Ice.Current current__);

        public void updateRegistration_async(Murmur.AMD_Server_updateRegistration cb__, int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info)
        {
            updateRegistration_async(cb__, userid, info, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void updateRegistration_async(Murmur.AMD_Server_updateRegistration cb__, int userid, _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info, Ice.Current current__);

        public void getRegistration_async(Murmur.AMD_Server_getRegistration cb__, int userid)
        {
            getRegistration_async(cb__, userid, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getRegistration_async(Murmur.AMD_Server_getRegistration cb__, int userid, Ice.Current current__);

        public void getRegisteredUsers_async(Murmur.AMD_Server_getRegisteredUsers cb__, string filter)
        {
            getRegisteredUsers_async(cb__, filter, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getRegisteredUsers_async(Murmur.AMD_Server_getRegisteredUsers cb__, string filter, Ice.Current current__);

        public void verifyPassword_async(Murmur.AMD_Server_verifyPassword cb__, string name, string pw)
        {
            verifyPassword_async(cb__, name, pw, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void verifyPassword_async(Murmur.AMD_Server_verifyPassword cb__, string name, string pw, Ice.Current current__);

        public void getTexture_async(Murmur.AMD_Server_getTexture cb__, int userid)
        {
            getTexture_async(cb__, userid, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getTexture_async(Murmur.AMD_Server_getTexture cb__, int userid, Ice.Current current__);

        public void setTexture_async(Murmur.AMD_Server_setTexture cb__, int userid, byte[] tex)
        {
            setTexture_async(cb__, userid, tex, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void setTexture_async(Murmur.AMD_Server_setTexture cb__, int userid, byte[] tex, Ice.Current current__);

        public void getUptime_async(Murmur.AMD_Server_getUptime cb__)
        {
            getUptime_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getUptime_async(Murmur.AMD_Server_getUptime cb__, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Murmur::Server"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus isRunning___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_isRunning cb__ = new _AMD_Server_isRunning(inS__);
            try
            {
                obj__.isRunning_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus start___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_start cb__ = new _AMD_Server_start(inS__);
            try
            {
                obj__.start_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus stop___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_stop cb__ = new _AMD_Server_stop(inS__);
            try
            {
                obj__.stop_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus delete___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_delete cb__ = new _AMD_Server_delete(inS__);
            try
            {
                obj__.delete_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus id___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_id cb__ = new _AMD_Server_id(inS__);
            try
            {
                obj__.id_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus addCallback___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.ServerCallbackPrx cb;
            cb = Murmur.ServerCallbackPrxHelper.read__(is__);
            is__.endReadEncaps();
            AMD_Server_addCallback cb__ = new _AMD_Server_addCallback(inS__);
            try
            {
                obj__.addCallback_async(cb__, cb, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus removeCallback___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.ServerCallbackPrx cb;
            cb = Murmur.ServerCallbackPrxHelper.read__(is__);
            is__.endReadEncaps();
            AMD_Server_removeCallback cb__ = new _AMD_Server_removeCallback(inS__);
            try
            {
                obj__.removeCallback_async(cb__, cb, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setAuthenticator___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.ServerAuthenticatorPrx auth;
            auth = Murmur.ServerAuthenticatorPrxHelper.read__(is__);
            is__.endReadEncaps();
            AMD_Server_setAuthenticator cb__ = new _AMD_Server_setAuthenticator(inS__);
            try
            {
                obj__.setAuthenticator_async(cb__, auth, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getConf___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string key;
            key = is__.readString();
            is__.endReadEncaps();
            AMD_Server_getConf cb__ = new _AMD_Server_getConf(inS__);
            try
            {
                obj__.getConf_async(cb__, key, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getAllConf___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_getAllConf cb__ = new _AMD_Server_getAllConf(inS__);
            try
            {
                obj__.getAllConf_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setConf___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string key;
            key = is__.readString();
            string value;
            value = is__.readString();
            is__.endReadEncaps();
            AMD_Server_setConf cb__ = new _AMD_Server_setConf(inS__);
            try
            {
                obj__.setConf_async(cb__, key, value, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setSuperuserPassword___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string pw;
            pw = is__.readString();
            is__.endReadEncaps();
            AMD_Server_setSuperuserPassword cb__ = new _AMD_Server_setSuperuserPassword(inS__);
            try
            {
                obj__.setSuperuserPassword_async(cb__, pw, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getLog___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int first;
            first = is__.readInt();
            int last;
            last = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_getLog cb__ = new _AMD_Server_getLog(inS__);
            try
            {
                obj__.getLog_async(cb__, first, last, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getUsers___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_getUsers cb__ = new _AMD_Server_getUsers(inS__);
            try
            {
                obj__.getUsers_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getChannels___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_getChannels cb__ = new _AMD_Server_getChannels(inS__);
            try
            {
                obj__.getChannels_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getCertificateList___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_getCertificateList cb__ = new _AMD_Server_getCertificateList(inS__);
            try
            {
                obj__.getCertificateList_async(cb__, session, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getTree___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_getTree cb__ = new _AMD_Server_getTree(inS__);
            try
            {
                obj__.getTree_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getBans___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_getBans cb__ = new _AMD_Server_getBans(inS__);
            try
            {
                obj__.getBans_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setBans___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.Ban[] bans;
            {
                int szx__ = is__.readAndCheckSeqSize(20);
                bans = new Murmur.Ban[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    bans[ix__] = new Murmur.Ban();
                    bans[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            AMD_Server_setBans cb__ = new _AMD_Server_setBans(inS__);
            try
            {
                obj__.setBans_async(cb__, bans, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus kickUser___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int session;
            session = is__.readInt();
            string reason;
            reason = is__.readString();
            is__.endReadEncaps();
            AMD_Server_kickUser cb__ = new _AMD_Server_kickUser(inS__);
            try
            {
                obj__.kickUser_async(cb__, session, reason, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getState___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int session;
            session = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_getState cb__ = new _AMD_Server_getState(inS__);
            try
            {
                obj__.getState_async(cb__, session, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setState___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.User state;
            state = null;
            if(state == null)
            {
                state = new Murmur.User();
            }
            state.read__(is__);
            is__.endReadEncaps();
            AMD_Server_setState cb__ = new _AMD_Server_setState(inS__);
            try
            {
                obj__.setState_async(cb__, state, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus sendMessage___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int session;
            session = is__.readInt();
            string text;
            text = is__.readString();
            is__.endReadEncaps();
            AMD_Server_sendMessage cb__ = new _AMD_Server_sendMessage(inS__);
            try
            {
                obj__.sendMessage_async(cb__, session, text, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus hasPermission___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int session;
            session = is__.readInt();
            int channelid;
            channelid = is__.readInt();
            int perm;
            perm = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_hasPermission cb__ = new _AMD_Server_hasPermission(inS__);
            try
            {
                obj__.hasPermission_async(cb__, session, channelid, perm, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus addContextCallback___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int session;
            session = is__.readInt();
            string action;
            action = is__.readString();
            string text;
            text = is__.readString();
            Murmur.ServerContextCallbackPrx cb;
            cb = Murmur.ServerContextCallbackPrxHelper.read__(is__);
            int ctx;
            ctx = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_addContextCallback cb__ = new _AMD_Server_addContextCallback(inS__);
            try
            {
                obj__.addContextCallback_async(cb__, session, action, text, cb, ctx, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus removeContextCallback___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.ServerContextCallbackPrx cb;
            cb = Murmur.ServerContextCallbackPrxHelper.read__(is__);
            is__.endReadEncaps();
            AMD_Server_removeContextCallback cb__ = new _AMD_Server_removeContextCallback(inS__);
            try
            {
                obj__.removeContextCallback_async(cb__, cb, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getChannelState___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int channelid;
            channelid = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_getChannelState cb__ = new _AMD_Server_getChannelState(inS__);
            try
            {
                obj__.getChannelState_async(cb__, channelid, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setChannelState___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.Channel state;
            state = null;
            if(state == null)
            {
                state = new Murmur.Channel();
            }
            state.read__(is__);
            is__.endReadEncaps();
            AMD_Server_setChannelState cb__ = new _AMD_Server_setChannelState(inS__);
            try
            {
                obj__.setChannelState_async(cb__, state, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus removeChannel___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int channelid;
            channelid = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_removeChannel cb__ = new _AMD_Server_removeChannel(inS__);
            try
            {
                obj__.removeChannel_async(cb__, channelid, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus addChannel___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string name;
            name = is__.readString();
            int parent;
            parent = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_addChannel cb__ = new _AMD_Server_addChannel(inS__);
            try
            {
                obj__.addChannel_async(cb__, name, parent, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus sendMessageChannel___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int channelid;
            channelid = is__.readInt();
            bool tree;
            tree = is__.readBool();
            string text;
            text = is__.readString();
            is__.endReadEncaps();
            AMD_Server_sendMessageChannel cb__ = new _AMD_Server_sendMessageChannel(inS__);
            try
            {
                obj__.sendMessageChannel_async(cb__, channelid, tree, text, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getACL___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int channelid;
            channelid = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_getACL cb__ = new _AMD_Server_getACL(inS__);
            try
            {
                obj__.getACL_async(cb__, channelid, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setACL___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int channelid;
            channelid = is__.readInt();
            Murmur.ACL[] acls;
            {
                int szx__ = is__.readAndCheckSeqSize(16);
                acls = new Murmur.ACL[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    acls[ix__] = new Murmur.ACL();
                    acls[ix__].read__(is__);
                }
            }
            Murmur.Group[] groups;
            {
                int szx__ = is__.readAndCheckSeqSize(7);
                groups = new Murmur.Group[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    groups[ix__] = new Murmur.Group();
                    groups[ix__].read__(is__);
                }
            }
            bool inherit;
            inherit = is__.readBool();
            is__.endReadEncaps();
            AMD_Server_setACL cb__ = new _AMD_Server_setACL(inS__);
            try
            {
                obj__.setACL_async(cb__, channelid, acls, groups, inherit, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus addUserToGroup___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int channelid;
            channelid = is__.readInt();
            int session;
            session = is__.readInt();
            string group;
            group = is__.readString();
            is__.endReadEncaps();
            AMD_Server_addUserToGroup cb__ = new _AMD_Server_addUserToGroup(inS__);
            try
            {
                obj__.addUserToGroup_async(cb__, channelid, session, group, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus removeUserFromGroup___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int channelid;
            channelid = is__.readInt();
            int session;
            session = is__.readInt();
            string group;
            group = is__.readString();
            is__.endReadEncaps();
            AMD_Server_removeUserFromGroup cb__ = new _AMD_Server_removeUserFromGroup(inS__);
            try
            {
                obj__.removeUserFromGroup_async(cb__, channelid, session, group, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus redirectWhisperGroup___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int session;
            session = is__.readInt();
            string source;
            source = is__.readString();
            string target;
            target = is__.readString();
            is__.endReadEncaps();
            AMD_Server_redirectWhisperGroup cb__ = new _AMD_Server_redirectWhisperGroup(inS__);
            try
            {
                obj__.redirectWhisperGroup_async(cb__, session, source, target, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getUserNames___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int[] ids;
            ids = is__.readIntSeq();
            is__.endReadEncaps();
            AMD_Server_getUserNames cb__ = new _AMD_Server_getUserNames(inS__);
            try
            {
                obj__.getUserNames_async(cb__, ids, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getUserIds___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string[] names;
            names = is__.readStringSeq();
            is__.endReadEncaps();
            AMD_Server_getUserIds cb__ = new _AMD_Server_getUserIds(inS__);
            try
            {
                obj__.getUserIds_async(cb__, names, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus registerUser___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info;
            info = Murmur.UserInfoMapHelper.read(is__);
            is__.endReadEncaps();
            AMD_Server_registerUser cb__ = new _AMD_Server_registerUser(inS__);
            try
            {
                obj__.registerUser_async(cb__, info, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus unregisterUser___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int userid;
            userid = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_unregisterUser cb__ = new _AMD_Server_unregisterUser(inS__);
            try
            {
                obj__.unregisterUser_async(cb__, userid, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus updateRegistration___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int userid;
            userid = is__.readInt();
            _System.Collections.Generic.Dictionary<Murmur.UserInfo, string> info;
            info = Murmur.UserInfoMapHelper.read(is__);
            is__.endReadEncaps();
            AMD_Server_updateRegistration cb__ = new _AMD_Server_updateRegistration(inS__);
            try
            {
                obj__.updateRegistration_async(cb__, userid, info, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getRegistration___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int userid;
            userid = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_getRegistration cb__ = new _AMD_Server_getRegistration(inS__);
            try
            {
                obj__.getRegistration_async(cb__, userid, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getRegisteredUsers___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string filter;
            filter = is__.readString();
            is__.endReadEncaps();
            AMD_Server_getRegisteredUsers cb__ = new _AMD_Server_getRegisteredUsers(inS__);
            try
            {
                obj__.getRegisteredUsers_async(cb__, filter, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus verifyPassword___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string name;
            name = is__.readString();
            string pw;
            pw = is__.readString();
            is__.endReadEncaps();
            AMD_Server_verifyPassword cb__ = new _AMD_Server_verifyPassword(inS__);
            try
            {
                obj__.verifyPassword_async(cb__, name, pw, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getTexture___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int userid;
            userid = is__.readInt();
            is__.endReadEncaps();
            AMD_Server_getTexture cb__ = new _AMD_Server_getTexture(inS__);
            try
            {
                obj__.getTexture_async(cb__, userid, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setTexture___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int userid;
            userid = is__.readInt();
            byte[] tex;
            tex = is__.readByteSeq();
            is__.endReadEncaps();
            AMD_Server_setTexture cb__ = new _AMD_Server_setTexture(inS__);
            try
            {
                obj__.setTexture_async(cb__, userid, tex, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getUptime___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Server_getUptime cb__ = new _AMD_Server_getUptime(inS__);
            try
            {
                obj__.getUptime_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        private static string[] all__ =
        {
            "addCallback",
            "addChannel",
            "addContextCallback",
            "addUserToGroup",
            "delete",
            "getACL",
            "getAllConf",
            "getBans",
            "getCertificateList",
            "getChannelState",
            "getChannels",
            "getConf",
            "getLog",
            "getRegisteredUsers",
            "getRegistration",
            "getState",
            "getTexture",
            "getTree",
            "getUptime",
            "getUserIds",
            "getUserNames",
            "getUsers",
            "hasPermission",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "id",
            "isRunning",
            "kickUser",
            "redirectWhisperGroup",
            "registerUser",
            "removeCallback",
            "removeChannel",
            "removeContextCallback",
            "removeUserFromGroup",
            "sendMessage",
            "sendMessageChannel",
            "setACL",
            "setAuthenticator",
            "setBans",
            "setChannelState",
            "setConf",
            "setState",
            "setSuperuserPassword",
            "setTexture",
            "start",
            "stop",
            "unregisterUser",
            "updateRegistration",
            "verifyPassword"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return addCallback___(this, inS__, current__);
                }
                case 1:
                {
                    return addChannel___(this, inS__, current__);
                }
                case 2:
                {
                    return addContextCallback___(this, inS__, current__);
                }
                case 3:
                {
                    return addUserToGroup___(this, inS__, current__);
                }
                case 4:
                {
                    return delete___(this, inS__, current__);
                }
                case 5:
                {
                    return getACL___(this, inS__, current__);
                }
                case 6:
                {
                    return getAllConf___(this, inS__, current__);
                }
                case 7:
                {
                    return getBans___(this, inS__, current__);
                }
                case 8:
                {
                    return getCertificateList___(this, inS__, current__);
                }
                case 9:
                {
                    return getChannelState___(this, inS__, current__);
                }
                case 10:
                {
                    return getChannels___(this, inS__, current__);
                }
                case 11:
                {
                    return getConf___(this, inS__, current__);
                }
                case 12:
                {
                    return getLog___(this, inS__, current__);
                }
                case 13:
                {
                    return getRegisteredUsers___(this, inS__, current__);
                }
                case 14:
                {
                    return getRegistration___(this, inS__, current__);
                }
                case 15:
                {
                    return getState___(this, inS__, current__);
                }
                case 16:
                {
                    return getTexture___(this, inS__, current__);
                }
                case 17:
                {
                    return getTree___(this, inS__, current__);
                }
                case 18:
                {
                    return getUptime___(this, inS__, current__);
                }
                case 19:
                {
                    return getUserIds___(this, inS__, current__);
                }
                case 20:
                {
                    return getUserNames___(this, inS__, current__);
                }
                case 21:
                {
                    return getUsers___(this, inS__, current__);
                }
                case 22:
                {
                    return hasPermission___(this, inS__, current__);
                }
                case 23:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 24:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 25:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 26:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 27:
                {
                    return id___(this, inS__, current__);
                }
                case 28:
                {
                    return isRunning___(this, inS__, current__);
                }
                case 29:
                {
                    return kickUser___(this, inS__, current__);
                }
                case 30:
                {
                    return redirectWhisperGroup___(this, inS__, current__);
                }
                case 31:
                {
                    return registerUser___(this, inS__, current__);
                }
                case 32:
                {
                    return removeCallback___(this, inS__, current__);
                }
                case 33:
                {
                    return removeChannel___(this, inS__, current__);
                }
                case 34:
                {
                    return removeContextCallback___(this, inS__, current__);
                }
                case 35:
                {
                    return removeUserFromGroup___(this, inS__, current__);
                }
                case 36:
                {
                    return sendMessage___(this, inS__, current__);
                }
                case 37:
                {
                    return sendMessageChannel___(this, inS__, current__);
                }
                case 38:
                {
                    return setACL___(this, inS__, current__);
                }
                case 39:
                {
                    return setAuthenticator___(this, inS__, current__);
                }
                case 40:
                {
                    return setBans___(this, inS__, current__);
                }
                case 41:
                {
                    return setChannelState___(this, inS__, current__);
                }
                case 42:
                {
                    return setConf___(this, inS__, current__);
                }
                case 43:
                {
                    return setState___(this, inS__, current__);
                }
                case 44:
                {
                    return setSuperuserPassword___(this, inS__, current__);
                }
                case 45:
                {
                    return setTexture___(this, inS__, current__);
                }
                case 46:
                {
                    return start___(this, inS__, current__);
                }
                case 47:
                {
                    return stop___(this, inS__, current__);
                }
                case 48:
                {
                    return unregisterUser___(this, inS__, current__);
                }
                case 49:
                {
                    return updateRegistration___(this, inS__, current__);
                }
                case 50:
                {
                    return verifyPassword___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::Server was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::Server was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class MetaCallbackDisp_ : Ice.ObjectImpl, MetaCallback
    {
        #region Slice operations

        public void started(Murmur.ServerPrx srv)
        {
            started(srv, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void started(Murmur.ServerPrx srv, Ice.Current current__);

        public void stopped(Murmur.ServerPrx srv)
        {
            stopped(srv, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void stopped(Murmur.ServerPrx srv, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Murmur::MetaCallback"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus started___(MetaCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.ServerPrx srv;
            srv = Murmur.ServerPrxHelper.read__(is__);
            is__.endReadEncaps();
            obj__.started(srv, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus stopped___(MetaCallback obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.ServerPrx srv;
            srv = Murmur.ServerPrxHelper.read__(is__);
            is__.endReadEncaps();
            obj__.stopped(srv, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "started",
            "stopped"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 4:
                {
                    return started___(this, inS__, current__);
                }
                case 5:
                {
                    return stopped___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::MetaCallback was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::MetaCallback was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class MetaDisp_ : Ice.ObjectImpl, Meta
    {
        #region Slice operations

        public void getServer_async(Murmur.AMD_Meta_getServer cb__, int id)
        {
            getServer_async(cb__, id, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getServer_async(Murmur.AMD_Meta_getServer cb__, int id, Ice.Current current__);

        public void newServer_async(Murmur.AMD_Meta_newServer cb__)
        {
            newServer_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void newServer_async(Murmur.AMD_Meta_newServer cb__, Ice.Current current__);

        public void getBootedServers_async(Murmur.AMD_Meta_getBootedServers cb__)
        {
            getBootedServers_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getBootedServers_async(Murmur.AMD_Meta_getBootedServers cb__, Ice.Current current__);

        public void getAllServers_async(Murmur.AMD_Meta_getAllServers cb__)
        {
            getAllServers_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getAllServers_async(Murmur.AMD_Meta_getAllServers cb__, Ice.Current current__);

        public void getDefaultConf_async(Murmur.AMD_Meta_getDefaultConf cb__)
        {
            getDefaultConf_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getDefaultConf_async(Murmur.AMD_Meta_getDefaultConf cb__, Ice.Current current__);

        public void getVersion_async(Murmur.AMD_Meta_getVersion cb__)
        {
            getVersion_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getVersion_async(Murmur.AMD_Meta_getVersion cb__, Ice.Current current__);

        public void addCallback_async(Murmur.AMD_Meta_addCallback cb__, Murmur.MetaCallbackPrx cb)
        {
            addCallback_async(cb__, cb, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void addCallback_async(Murmur.AMD_Meta_addCallback cb__, Murmur.MetaCallbackPrx cb, Ice.Current current__);

        public void removeCallback_async(Murmur.AMD_Meta_removeCallback cb__, Murmur.MetaCallbackPrx cb)
        {
            removeCallback_async(cb__, cb, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void removeCallback_async(Murmur.AMD_Meta_removeCallback cb__, Murmur.MetaCallbackPrx cb, Ice.Current current__);

        public void getUptime_async(Murmur.AMD_Meta_getUptime cb__)
        {
            getUptime_async(cb__, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void getUptime_async(Murmur.AMD_Meta_getUptime cb__, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Murmur::Meta"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getServer___(Meta obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int id;
            id = is__.readInt();
            is__.endReadEncaps();
            AMD_Meta_getServer cb__ = new _AMD_Meta_getServer(inS__);
            try
            {
                obj__.getServer_async(cb__, id, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus newServer___(Meta obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Meta_newServer cb__ = new _AMD_Meta_newServer(inS__);
            try
            {
                obj__.newServer_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getBootedServers___(Meta obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Meta_getBootedServers cb__ = new _AMD_Meta_getBootedServers(inS__);
            try
            {
                obj__.getBootedServers_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getAllServers___(Meta obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Meta_getAllServers cb__ = new _AMD_Meta_getAllServers(inS__);
            try
            {
                obj__.getAllServers_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getDefaultConf___(Meta obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Meta_getDefaultConf cb__ = new _AMD_Meta_getDefaultConf(inS__);
            try
            {
                obj__.getDefaultConf_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getVersion___(Meta obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Meta_getVersion cb__ = new _AMD_Meta_getVersion(inS__);
            try
            {
                obj__.getVersion_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus addCallback___(Meta obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.MetaCallbackPrx cb;
            cb = Murmur.MetaCallbackPrxHelper.read__(is__);
            is__.endReadEncaps();
            AMD_Meta_addCallback cb__ = new _AMD_Meta_addCallback(inS__);
            try
            {
                obj__.addCallback_async(cb__, cb, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus removeCallback___(Meta obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Murmur.MetaCallbackPrx cb;
            cb = Murmur.MetaCallbackPrxHelper.read__(is__);
            is__.endReadEncaps();
            AMD_Meta_removeCallback cb__ = new _AMD_Meta_removeCallback(inS__);
            try
            {
                obj__.removeCallback_async(cb__, cb, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getUptime___(Meta obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            AMD_Meta_getUptime cb__ = new _AMD_Meta_getUptime(inS__);
            try
            {
                obj__.getUptime_async(cb__, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        private static string[] all__ =
        {
            "addCallback",
            "getAllServers",
            "getBootedServers",
            "getDefaultConf",
            "getServer",
            "getUptime",
            "getVersion",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "newServer",
            "removeCallback"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return addCallback___(this, inS__, current__);
                }
                case 1:
                {
                    return getAllServers___(this, inS__, current__);
                }
                case 2:
                {
                    return getBootedServers___(this, inS__, current__);
                }
                case 3:
                {
                    return getDefaultConf___(this, inS__, current__);
                }
                case 4:
                {
                    return getServer___(this, inS__, current__);
                }
                case 5:
                {
                    return getUptime___(this, inS__, current__);
                }
                case 6:
                {
                    return getVersion___(this, inS__, current__);
                }
                case 7:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 8:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 9:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 10:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 11:
                {
                    return newServer___(this, inS__, current__);
                }
                case 12:
                {
                    return removeCallback___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::Meta was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Murmur::Meta was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}

namespace Murmur
{
    /// <summary>
    /// Shows if the server currently running (accepting users).
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_isRunning : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Run-state of server.</param>
        void ice_response(bool ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_isRunning : IceInternal.IncomingAsync, AMD_Server_isRunning
    {
        public _AMD_Server_isRunning(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(bool ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeBool(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Start server.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_start : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_start : IceInternal.IncomingAsync, AMD_Server_start
    {
        public _AMD_Server_start(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerFailureException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Stop server.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_stop : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_stop : IceInternal.IncomingAsync, AMD_Server_stop
    {
        public _AMD_Server_stop(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Delete server and all it's configuration.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_delete : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_delete : IceInternal.IncomingAsync, AMD_Server_delete
    {
        public _AMD_Server_delete(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Fetch the server id.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_id : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Unique server id.</param>
        void ice_response(int ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_id : IceInternal.IncomingAsync, AMD_Server_id
    {
        public _AMD_Server_id(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(int ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeInt(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Add a callback.
    /// The callback will receive notifications about changes to users and channels.
    /// 
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_addCallback : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_addCallback : IceInternal.IncomingAsync, AMD_Server_addCallback
    {
        public _AMD_Server_addCallback(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidCallbackException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Remove a callback.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_removeCallback : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_removeCallback : IceInternal.IncomingAsync, AMD_Server_removeCallback
    {
        public _AMD_Server_removeCallback(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidCallbackException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Set external authenticator.
    /// If set, all authentications from clients are forwarded to this
    /// proxy.
    /// 
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_setAuthenticator : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_setAuthenticator : IceInternal.IncomingAsync, AMD_Server_setAuthenticator
    {
        public _AMD_Server_setAuthenticator(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidCallbackException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Retrieve configuration item.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getConf : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Configuration value. If this is empty, see [Meta::getDefaultConf]</param>
        void ice_response(string ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getConf : IceInternal.IncomingAsync, AMD_Server_getConf
    {
        public _AMD_Server_getConf(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(string ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeString(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Retrieve all configuration items.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getAllConf : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) All configured values. If a value isn't set here, the value from [Meta::getDefaultConf] is used.</param>
        void ice_response(_System.Collections.Generic.Dictionary<string, string> ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getAllConf : IceInternal.IncomingAsync, AMD_Server_getAllConf
    {
        public _AMD_Server_getAllConf(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(_System.Collections.Generic.Dictionary<string, string> ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.ConfigMapHelper.write(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Set a configuration item.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_setConf : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_setConf : IceInternal.IncomingAsync, AMD_Server_setConf
    {
        public _AMD_Server_setConf(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }
    }

    /// <summary>
    /// Set superuser password.
    /// This is just a convenience for using [updateRegistration] on user id 0.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_setSuperuserPassword : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_setSuperuserPassword : IceInternal.IncomingAsync, AMD_Server_setSuperuserPassword
    {
        public _AMD_Server_setSuperuserPassword(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }
    }

    /// <summary>
    /// Fetch log entries.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getLog : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) List of log entries.</param>
        void ice_response(Murmur.LogEntry[] ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getLog : IceInternal.IncomingAsync, AMD_Server_getLog
    {
        public _AMD_Server_getLog(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.LogEntry[] ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if(ret__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(ret__.Length);
                        for(int ix__ = 0; ix__ < ret__.Length; ++ix__)
                        {
                            (ret__[ix__] == null ? new Murmur.LogEntry() : ret__[ix__]).write__(os__);
                        }
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Fetch all users.
    /// This returns all currently connected users on the server.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getUsers : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) List of connected users.
        /// </param>
        void ice_response(_System.Collections.Generic.Dictionary<int, Murmur.User> ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getUsers : IceInternal.IncomingAsync, AMD_Server_getUsers
    {
        public _AMD_Server_getUsers(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(_System.Collections.Generic.Dictionary<int, Murmur.User> ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.UserMapHelper.write(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Fetch all channels.
    /// This returns all defined channels on the server. The root channel is always channel 0.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getChannels : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) List of defined channels.
        /// </param>
        void ice_response(_System.Collections.Generic.Dictionary<int, Murmur.Channel> ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getChannels : IceInternal.IncomingAsync, AMD_Server_getChannels
    {
        public _AMD_Server_getChannels(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(_System.Collections.Generic.Dictionary<int, Murmur.Channel> ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.ChannelMapHelper.write(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Fetch certificate of user.
    /// This returns the complete certificate chain of a user.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getCertificateList : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Certificate list of user.</param>
        void ice_response(byte[][] ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getCertificateList : IceInternal.IncomingAsync, AMD_Server_getCertificateList
    {
        public _AMD_Server_getCertificateList(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(byte[][] ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if(ret__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(ret__.Length);
                        for(int ix__ = 0; ix__ < ret__.Length; ++ix__)
                        {
                            Murmur.CertificateDerHelper.write(os__, ret__[ix__]);
                        }
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidSessionException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Fetch all channels and connected users as a tree.
    /// This retrieves an easy-to-use representation of the server
    /// as a tree. This is primarily used for viewing the state of the server on a webpage.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getTree : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Recursive tree of all channels and connected users.</param>
        void ice_response(Murmur.Tree ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getTree : IceInternal.IncomingAsync, AMD_Server_getTree
    {
        public _AMD_Server_getTree(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.Tree ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeObject(ret__);
                    os__.writePendingObjects();
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Fetch all current IP bans on the server.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getBans : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) List of bans.</param>
        void ice_response(Murmur.Ban[] ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getBans : IceInternal.IncomingAsync, AMD_Server_getBans
    {
        public _AMD_Server_getBans(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.Ban[] ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if(ret__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(ret__.Length);
                        for(int ix__ = 0; ix__ < ret__.Length; ++ix__)
                        {
                            (ret__[ix__] == null ? new Murmur.Ban() : ret__[ix__]).write__(os__);
                        }
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Set all current IP bans on the server.
    /// This will replace any bans already present, so if you want to add a ban, be sure to call [getBans] and then
    /// append to the returned list before calling this method.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_setBans : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_setBans : IceInternal.IncomingAsync, AMD_Server_setBans
    {
        public _AMD_Server_setBans(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Kick a user.
    /// The user is not banned, and is free to rejoin the server.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_kickUser : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_kickUser : IceInternal.IncomingAsync, AMD_Server_kickUser
    {
        public _AMD_Server_kickUser(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidSessionException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Get state of a single connected user.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getState : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) State of connected user.
        /// </param>
        void ice_response(Murmur.User ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getState : IceInternal.IncomingAsync, AMD_Server_getState
    {
        public _AMD_Server_getState(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.User ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if(ret__ == null)
                    {
                        Murmur.User tmp__ = new Murmur.User();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        ret__.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidSessionException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Set user state.
    /// You can use this to move, mute and deafen users.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_setState : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_setState : IceInternal.IncomingAsync, AMD_Server_setState
    {
        public _AMD_Server_setState(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.InvalidSessionException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Send text message to a single user.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_sendMessage : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_sendMessage : IceInternal.IncomingAsync, AMD_Server_sendMessage
    {
        public _AMD_Server_sendMessage(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidSessionException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Check if user is permitted to perform action.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_hasPermission : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) true if any of the permissions in perm were set for the user.</param>
        void ice_response(bool ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_hasPermission : IceInternal.IncomingAsync, AMD_Server_hasPermission
    {
        public _AMD_Server_hasPermission(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(bool ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeBool(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.InvalidSessionException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Add a context callback.
    /// This is done per user, and will add a context menu action for the user.
    /// 
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_addContextCallback : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_addContextCallback : IceInternal.IncomingAsync, AMD_Server_addContextCallback
    {
        public _AMD_Server_addContextCallback(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidCallbackException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Remove a callback.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_removeContextCallback : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_removeContextCallback : IceInternal.IncomingAsync, AMD_Server_removeContextCallback
    {
        public _AMD_Server_removeContextCallback(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidCallbackException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Get state of single channel.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getChannelState : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) State of channel.
        /// </param>
        void ice_response(Murmur.Channel ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getChannelState : IceInternal.IncomingAsync, AMD_Server_getChannelState
    {
        public _AMD_Server_getChannelState(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.Channel ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if(ret__ == null)
                    {
                        Murmur.Channel tmp__ = new Murmur.Channel();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        ret__.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Set state of a single channel.
    /// You can use this to move or relink channels.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_setChannelState : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_setChannelState : IceInternal.IncomingAsync, AMD_Server_setChannelState
    {
        public _AMD_Server_setChannelState(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Remove a channel and all its subchannels.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_removeChannel : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_removeChannel : IceInternal.IncomingAsync, AMD_Server_removeChannel
    {
        public _AMD_Server_removeChannel(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Add a new channel.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_addChannel : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) ID of newly created channel.</param>
        void ice_response(int ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_addChannel : IceInternal.IncomingAsync, AMD_Server_addChannel
    {
        public _AMD_Server_addChannel(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(int ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeInt(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Send text message to channel or a tree of channels.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_sendMessageChannel : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_sendMessageChannel : IceInternal.IncomingAsync, AMD_Server_sendMessageChannel
    {
        public _AMD_Server_sendMessageChannel(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Retrieve ACLs and Groups on a channel.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getACL : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="acls">List of ACLs on the channel. This will include inherited ACLs.
        /// </param>
        /// <param name="groups">List of groups on the channel. This will include inherited groups.
        /// </param>
        /// <param name="inherit">Does this channel inherit ACLs from the parent channel?</param>
        void ice_response(Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getACL : IceInternal.IncomingAsync, AMD_Server_getACL
    {
        public _AMD_Server_getACL(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.ACL[] acls, Murmur.Group[] groups, bool inherit)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if(acls == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(acls.Length);
                        for(int ix__ = 0; ix__ < acls.Length; ++ix__)
                        {
                            (acls[ix__] == null ? new Murmur.ACL() : acls[ix__]).write__(os__);
                        }
                    }
                    if(groups == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(groups.Length);
                        for(int ix__ = 0; ix__ < groups.Length; ++ix__)
                        {
                            (groups[ix__] == null ? new Murmur.Group() : groups[ix__]).write__(os__);
                        }
                    }
                    os__.writeBool(inherit);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Set ACLs and Groups on a channel.
    /// Note that this will replace all existing ACLs and groups on the channel.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_setACL : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_setACL : IceInternal.IncomingAsync, AMD_Server_setACL
    {
        public _AMD_Server_setACL(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Temporarily add a user to a group on a channel.
    /// This state is not saved, and is intended for temporary memberships.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_addUserToGroup : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_addUserToGroup : IceInternal.IncomingAsync, AMD_Server_addUserToGroup
    {
        public _AMD_Server_addUserToGroup(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.InvalidSessionException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Remove a user from a temporary group membership on a channel.
    /// This state is not saved, and is intended for temporary memberships.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_removeUserFromGroup : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_removeUserFromGroup : IceInternal.IncomingAsync, AMD_Server_removeUserFromGroup
    {
        public _AMD_Server_removeUserFromGroup(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidChannelException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.InvalidSessionException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Redirect whisper targets for user.
    /// If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
    /// To remove a redirect pass an empty target string. This is intended for context groups.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_redirectWhisperGroup : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_redirectWhisperGroup : IceInternal.IncomingAsync, AMD_Server_redirectWhisperGroup
    {
        public _AMD_Server_redirectWhisperGroup(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidSessionException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Map a list of [User::userid] to a matching name.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getUserNames : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Matching list of names, with an empty string representing invalid or unknown ids.</param>
        void ice_response(_System.Collections.Generic.Dictionary<int, string> ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getUserNames : IceInternal.IncomingAsync, AMD_Server_getUserNames
    {
        public _AMD_Server_getUserNames(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(_System.Collections.Generic.Dictionary<int, string> ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.NameMapHelper.write(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Map a list of user names to a matching id.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getUserIds : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response(_System.Collections.Generic.Dictionary<string, int> ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getUserIds : IceInternal.IncomingAsync, AMD_Server_getUserIds
    {
        public _AMD_Server_getUserIds(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(_System.Collections.Generic.Dictionary<string, int> ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.IdMapHelper.write(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Register a new user.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_registerUser : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) The ID of the user. See [RegisteredUser::userid].</param>
        void ice_response(int ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_registerUser : IceInternal.IncomingAsync, AMD_Server_registerUser
    {
        public _AMD_Server_registerUser(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(int ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeInt(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidUserException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Remove a user registration.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_unregisterUser : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_unregisterUser : IceInternal.IncomingAsync, AMD_Server_unregisterUser
    {
        public _AMD_Server_unregisterUser(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidUserException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Update the registration for a user.
    /// You can use this to set the email or password of a user,
    /// and can also use it to change the user's name.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_updateRegistration : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_updateRegistration : IceInternal.IncomingAsync, AMD_Server_updateRegistration
    {
        public _AMD_Server_updateRegistration(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidUserException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Fetch registration for a single user.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getRegistration : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Registration record.</param>
        void ice_response(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getRegistration : IceInternal.IncomingAsync, AMD_Server_getRegistration
    {
        public _AMD_Server_getRegistration(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(_System.Collections.Generic.Dictionary<Murmur.UserInfo, string> ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.UserInfoMapHelper.write(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidUserException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Fetch a group of registered users.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getRegisteredUsers : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) List of registration records.</param>
        void ice_response(_System.Collections.Generic.Dictionary<int, string> ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getRegisteredUsers : IceInternal.IncomingAsync, AMD_Server_getRegisteredUsers
    {
        public _AMD_Server_getRegisteredUsers(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(_System.Collections.Generic.Dictionary<int, string> ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.NameMapHelper.write(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Verify the password of a user.
    /// You can use this to verify a user's credentials.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_verifyPassword : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) User ID of registered user (See [RegisteredUser::userid]), -1 for failed authentication or -2 for unknown usernames.</param>
        void ice_response(int ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_verifyPassword : IceInternal.IncomingAsync, AMD_Server_verifyPassword
    {
        public _AMD_Server_verifyPassword(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(int ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeInt(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Fetch user texture.
    /// Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getTexture : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Custom texture associated with user or an empty texture.</param>
        void ice_response(byte[] ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getTexture : IceInternal.IncomingAsync, AMD_Server_getTexture
    {
        public _AMD_Server_getTexture(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(byte[] ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeByteSeq(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidUserException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Set user texture.
    /// The texture is a 600x60 32-bit BGRA raw texture, optionally zlib compress()ed.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_setTexture : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_setTexture : IceInternal.IncomingAsync, AMD_Server_setTexture
    {
        public _AMD_Server_setTexture(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidTextureException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.InvalidUserException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Get virtual server uptime.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Server_getUptime : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Uptime of the virtual server in seconds</param>
        void ice_response(int ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Server_getUptime : IceInternal.IncomingAsync, AMD_Server_getUptime
    {
        public _AMD_Server_getUptime(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(int ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeInt(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.ServerBootedException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Fetch interface to specific server.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Meta_getServer : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Interface for specified server, or a null proxy if id is invalid.</param>
        void ice_response(Murmur.ServerPrx ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Meta_getServer : IceInternal.IncomingAsync, AMD_Meta_getServer
    {
        public _AMD_Meta_getServer(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.ServerPrx ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.ServerPrxHelper.write__(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Create a new server.
    /// Call [Server::getId] on the returned interface to find it's ID.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Meta_newServer : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Interface for new server.</param>
        void ice_response(Murmur.ServerPrx ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Meta_newServer : IceInternal.IncomingAsync, AMD_Meta_newServer
    {
        public _AMD_Meta_newServer(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.ServerPrx ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.ServerPrxHelper.write__(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Fetch list of all currently running servers.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Meta_getBootedServers : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) List of interfaces for running servers.</param>
        void ice_response(Murmur.ServerPrx[] ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Meta_getBootedServers : IceInternal.IncomingAsync, AMD_Meta_getBootedServers
    {
        public _AMD_Meta_getBootedServers(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.ServerPrx[] ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if(ret__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(ret__.Length);
                        for(int ix__ = 0; ix__ < ret__.Length; ++ix__)
                        {
                            Murmur.ServerPrxHelper.write__(os__, ret__[ix__]);
                        }
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Fetch list of all defined servers.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Meta_getAllServers : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) List of interfaces for all servers.</param>
        void ice_response(Murmur.ServerPrx[] ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Meta_getAllServers : IceInternal.IncomingAsync, AMD_Meta_getAllServers
    {
        public _AMD_Meta_getAllServers(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(Murmur.ServerPrx[] ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if(ret__ == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(ret__.Length);
                        for(int ix__ = 0; ix__ < ret__.Length; ++ix__)
                        {
                            Murmur.ServerPrxHelper.write__(os__, ret__[ix__]);
                        }
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Fetch default configuraion.
    /// This returns the configuration items that were set in the configuration file, or
    /// the built-in default. The individual servers will use these values unless they have been overridden in the
    /// server specific configuration. The only special case is the port, which defaults to the value defined here +
    /// the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Meta_getDefaultConf : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Default configuration of the servers.</param>
        void ice_response(_System.Collections.Generic.Dictionary<string, string> ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Meta_getDefaultConf : IceInternal.IncomingAsync, AMD_Meta_getDefaultConf
    {
        public _AMD_Meta_getDefaultConf(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(_System.Collections.Generic.Dictionary<string, string> ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    Murmur.ConfigMapHelper.write(os__, ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Fetch version of Murmur.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Meta_getVersion : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="major">Major version.
        /// </param>
        /// <param name="minor">Minor version.
        /// </param>
        /// <param name="patch">Patchlevel.
        /// </param>
        /// <param name="text">Textual representation of version. Note that this may not match the [major], [minor] and [patch] levels, as it
        /// may be simply the compile date or the SVN revision. This is usually the text you want to present to users.</param>
        void ice_response(int major, int minor, int patch, string text);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Meta_getVersion : IceInternal.IncomingAsync, AMD_Meta_getVersion
    {
        public _AMD_Meta_getVersion(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(int major, int minor, int patch, string text)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeInt(major);
                    os__.writeInt(minor);
                    os__.writeInt(patch);
                    os__.writeString(text);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// Add a callback.
    /// The callback will receive notifications when servers are started or stopped.
    /// 
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Meta_addCallback : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Meta_addCallback : IceInternal.IncomingAsync, AMD_Meta_addCallback
    {
        public _AMD_Meta_addCallback(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidCallbackException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Remove a callback.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Meta_removeCallback : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response();
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Meta_removeCallback : IceInternal.IncomingAsync, AMD_Meta_removeCallback
    {
        public _AMD_Meta_removeCallback(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }

        override public void ice_exception(_System.Exception ex)
        {
            try
            {
                throw ex;
            }
            catch(Murmur.InvalidCallbackException ex__)
            {
                if(validateResponse__(false))
                {
                    os__().writeUserException(ex__);
                    response__(false);
                }
            }
            catch(_System.Exception ex__)
            {
                base.ice_exception(ex__);
            }
        }
    }

    /// <summary>
    /// Get murmur uptime.
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_Meta_getUptime : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        /// <param name="ret__">(return value) Uptime of murmur in seconds</param>
        void ice_response(int ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_Meta_getUptime : IceInternal.IncomingAsync, AMD_Meta_getUptime
    {
        public _AMD_Meta_getUptime(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(int ret__)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    os__.writeInt(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }
}
